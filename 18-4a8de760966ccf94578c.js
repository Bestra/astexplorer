webpackJsonp([18],{

/***/ "./node_modules/babel6/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__("./node_modules/babel6/node_modules/babel-core/index.js");


/***/ },

/***/ "./node_modules/babel-plugin-transform-react-display-name/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _path = __webpack_require__("./node_modules/path-browserify/index.js");
	
	var _path2 = _interopRequireDefault(_path);
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  function addDisplayName(id, call) {
	    var props = call.arguments[0].properties;
	    var safe = true;
	
	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var key = t.toComputedKey(prop);
	      if (t.isLiteral(key, { value: "displayName" })) {
	        safe = false;
	        break;
	      }
	    }
	
	    if (safe) {
	      props.unshift(t.objectProperty(t.identifier("displayName"), t.stringLiteral(id)));
	    }
	  }
	
	  var isCreateClassCallExpression = t.buildMatchMemberExpression("React.createClass");
	
	  function isCreateClass(node) {
	    if (!node || !t.isCallExpression(node)) return false;
	
	    // not React.createClass call member object
	    if (!isCreateClassCallExpression(node.callee)) return false;
	
	    // no call arguments
	    var args = node.arguments;
	    if (args.length !== 1) return false;
	
	    // first node arg is not an object
	    var first = args[0];
	    if (!t.isObjectExpression(first)) return false;
	
	    return true;
	  }
	
	  return {
	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(_ref2, state) {
	        var node = _ref2.node;
	
	        if (isCreateClass(node.declaration)) {
	          var displayName = state.file.opts.basename;
	
	          // ./{module name}/index.js
	          if (displayName === "index") {
	            displayName = _path2["default"].basename(_path2["default"].dirname(state.file.opts.filename));
	          }
	
	          addDisplayName(displayName, node.declaration);
	        }
	      },
	
	      CallExpression: function CallExpression(path) {
	        var node = path.node;
	
	        if (!isCreateClass(node)) return;
	
	        var id = undefined;
	
	        // crawl up the ancestry looking for possible candidates for displayName inference
	        path.find(function (path) {
	          if (path.isAssignmentExpression()) {
	            id = path.node.left;
	          } else if (path.isObjectProperty()) {
	            id = path.node.key;
	          } else if (path.isVariableDeclarator()) {
	            id = path.node.id;
	          } else if (path.isStatement()) {
	            // we've hit a statement, we should stop crawling up
	            return true;
	          }
	
	          // we've got an id! no need to continue
	          if (id) return true;
	        });
	
	        // ensure that we have an identifier we can inherit from
	        if (!id) return;
	
	        // foo.bar -> bar
	        if (t.isMemberExpression(id)) {
	          id = id.property;
	        }
	
	        // identifiers are the only thing we can reliably get a name from
	        if (t.isIdentifier(id)) {
	          addDisplayName(id.name, node);
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/api/node.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequire = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require.js")["default"];
	
	exports.__esModule = true;
	exports.transformFile = transformFile;
	exports.transformFileSync = transformFileSync;
	
	var _lodashLangIsFunction = __webpack_require__("./node_modules/lodash/lang/isFunction.js");
	
	var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);
	
	var _fs = __webpack_require__("./node_modules/node-libs-browser/mock/empty.js");
	
	var _fs2 = _interopRequireDefault(_fs);
	
	//
	
	//
	
	var _util = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/util.js");
	
	var util = _interopRequireWildcard(_util);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _transformationFileOptionsOptionManager = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/option-manager.js");
	
	var _transformationFileOptionsOptionManager2 = _interopRequireDefault(_transformationFileOptionsOptionManager);
	
	//
	
	var _transformationPipeline = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/pipeline.js");
	
	var _transformationPipeline2 = _interopRequireDefault(_transformationPipeline);
	
	var _transformationFile = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/index.js");
	
	exports.File = _interopRequire(_transformationFile);
	
	var _transformationFileOptionsConfig = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/config.js");
	
	exports.options = _interopRequire(_transformationFileOptionsConfig);
	
	var _toolsBuildExternalHelpers = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/tools/build-external-helpers.js");
	
	exports.buildExternalHelpers = _interopRequire(_toolsBuildExternalHelpers);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	exports.template = _interopRequire(_babelTemplate);
	
	var _package = __webpack_require__("./node_modules/babel6/node_modules/babel-core/package.json");
	
	exports.version = _package.version;
	exports.util = util;
	exports.messages = messages;
	exports.types = t;
	exports.traverse = _babelTraverse2["default"];
	exports.OptionManager = _transformationFileOptionsOptionManager2["default"];
	exports.Pipeline = _transformationPipeline2["default"];
	
	var pipeline = new _transformationPipeline2["default"]();
	var transform = pipeline.transform.bind(pipeline);
	exports.transform = transform;
	var transformFromAst = pipeline.transformFromAst.bind(pipeline);
	
	exports.transformFromAst = transformFromAst;
	//
	
	function transformFile(filename /*: string*/, opts /*:: ?: Object*/, callback /*: Function*/) {
	  if (_lodashLangIsFunction2["default"](opts)) {
	    callback = opts;
	    opts = {};
	  }
	
	  opts.filename = filename;
	
	  _fs2["default"].readFile(filename, function (err, code) {
	    var result = undefined;
	
	    if (!err) {
	      try {
	        result = transform(code, opts);
	      } catch (_err) {
	        err = _err;
	      }
	    }
	
	    if (err) {
	      callback(err);
	    } else {
	      callback(null, result);
	    }
	  });
	}
	
	function transformFileSync(filename /*: string*/) /*: string*/ {
	  var opts /*:: ?: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  opts.filename = filename;
	  return transform(_fs2["default"].readFileSync(filename, "utf8"), opts);
	}

/***/ },

/***/ "./node_modules/babel-runtime/helpers/interop-require.js":
/***/ function(module, exports) {

	"use strict";
	
	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj["default"] : obj;
	};
	
	exports.__esModule = true;

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/util.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	exports.canCompile = canCompile;
	exports.list = list;
	exports.regexify = regexify;
	exports.arrayify = arrayify;
	exports.booleanify = booleanify;
	exports.shouldIgnore = shouldIgnore;
	
	var _lodashStringEscapeRegExp = __webpack_require__("./node_modules/lodash/string/escapeRegExp.js");
	
	var _lodashStringEscapeRegExp2 = _interopRequireDefault(_lodashStringEscapeRegExp);
	
	var _lodashStringStartsWith = __webpack_require__("./node_modules/lodash/string/startsWith.js");
	
	var _lodashStringStartsWith2 = _interopRequireDefault(_lodashStringStartsWith);
	
	var _lodashLangIsBoolean = __webpack_require__("./node_modules/lodash/lang/isBoolean.js");
	
	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);
	
	var _minimatch = __webpack_require__("./node_modules/minimatch/minimatch.js");
	
	var _minimatch2 = _interopRequireDefault(_minimatch);
	
	var _lodashCollectionContains = __webpack_require__("./node_modules/lodash/collection/contains.js");
	
	var _lodashCollectionContains2 = _interopRequireDefault(_lodashCollectionContains);
	
	var _lodashLangIsString = __webpack_require__("./node_modules/lodash/lang/isString.js");
	
	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
	
	var _lodashLangIsRegExp = __webpack_require__("./node_modules/lodash/lang/isRegExp.js");
	
	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
	
	var _path = __webpack_require__("./node_modules/path-browserify/index.js");
	
	var _path2 = _interopRequireDefault(_path);
	
	var _slash = __webpack_require__("./node_modules/slash/index.js");
	
	var _slash2 = _interopRequireDefault(_slash);
	
	var _util = __webpack_require__("./node_modules/util/util.js");
	
	exports.inherits = _util.inherits;
	exports.inspect = _util.inspect;
	
	/**
	 * Test if a filename ends with a compilable extension.
	 */
	
	function canCompile(filename /*: string*/, altExts /*:: ?: Array<string>*/) {
	  var exts = altExts || canCompile.EXTENSIONS;
	  var ext = _path2["default"].extname(filename);
	  return _lodashCollectionContains2["default"](exts, ext);
	}
	
	/**
	 * Default set of compilable extensions.
	 */
	
	canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];
	
	/**
	 * Create an array from any value, splitting strings by ",".
	 */
	
	function list(val /*:: ?: string*/) /*: Array<string>*/ {
	  if (!val) {
	    return [];
	  } else if (Array.isArray(val)) {
	    return val;
	  } else if (typeof val === "string") {
	    return val.split(",");
	  } else {
	    return [val];
	  }
	}
	
	/**
	 * Create a RegExp from a string, array, or regexp.
	 */
	
	function regexify(val /*: any*/) /*: RegExp*/ {
	  if (!val) {
	    return new RegExp(/.^/);
	  }
	
	  if (Array.isArray(val)) {
	    val = new RegExp(val.map(_lodashStringEscapeRegExp2["default"]).join("|"), "i");
	  }
	
	  if (typeof val === "string") {
	    // normalise path separators
	    val = _slash2["default"](val);
	
	    // remove starting wildcards or relative separator if present
	    if (_lodashStringStartsWith2["default"](val, "./") || _lodashStringStartsWith2["default"](val, "*/")) val = val.slice(2);
	    if (_lodashStringStartsWith2["default"](val, "**/")) val = val.slice(3);
	
	    var regex = _minimatch2["default"].makeRe(val, { nocase: true });
	    return new RegExp(regex.source.slice(1, -1), "i");
	  }
	
	  if (_lodashLangIsRegExp2["default"](val)) {
	    return val;
	  }
	
	  throw new TypeError("illegal type for regexify");
	}
	
	/**
	 * Create an array from a boolean, string, or array, mapped by and optional function.
	 */
	
	function arrayify(val /*: any*/, mapFn /*:: ?: Function*/) /*: Array<any>*/ {
	  if (!val) return [];
	  if (_lodashLangIsBoolean2["default"](val)) return arrayify([val], mapFn);
	  if (_lodashLangIsString2["default"](val)) return arrayify(list(val), mapFn);
	
	  if (Array.isArray(val)) {
	    if (mapFn) val = val.map(mapFn);
	    return val;
	  }
	
	  return [val];
	}
	
	/**
	 * Makes boolean-like strings into booleans.
	 */
	
	function booleanify(val /*: any*/) /*: boolean | any*/ {
	  if (val === "true" || val == 1) {
	    return true;
	  }
	
	  if (val === "false" || val == 0 || !val) {
	    return false;
	  }
	
	  return val;
	}
	
	/**
	 * Tests if a filename should be ignored based on "ignore" and "only" options.
	 */
	
	function shouldIgnore(filename /*: string*/, ignore /*: Array<RegExp | Function>*/, only /*:: ?: Array<RegExp | Function>*/) /*: boolean*/ {
	  if (ignore === undefined) ignore = [];
	
	  filename = _slash2["default"](filename);
	
	  if (only) {
	    for (var _iterator = only, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var pattern = _ref;
	
	      if (_shouldIgnore(pattern, filename)) return false;
	    }
	    return true;
	  } else if (ignore.length) {
	    for (var _iterator2 = ignore, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var pattern = _ref2;
	
	      if (_shouldIgnore(pattern, filename)) return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Returns result of calling function with filename if pattern is a function.
	 * Otherwise returns result of matching pattern Regex with filename.
	 */
	
	function _shouldIgnore(pattern /*: Function | RegExp*/, filename /*: string*/) {
	  if (typeof pattern === "function") {
	    return pattern(filename);
	  } else {
	    return pattern.test(filename);
	  }
	}

/***/ },

/***/ "./node_modules/babel-messages/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.get = get;
	exports.parseArgs = parseArgs;
	
	var _util = __webpack_require__("./node_modules/util/util.js");
	
	var util = _interopRequireWildcard(_util);
	
	/**
	 * Mapping of messages to be used in Babel.
	 * Messages can include $0-style placeholders.
	 */
	
	var MESSAGES = {
	  tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
	  classesIllegalBareSuper: "Illegal use of bare super",
	  classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
	  scopeDuplicateDeclaration: "Duplicate declaration $1",
	  settersNoRest: "Setters aren't allowed to have a rest",
	  noAssignmentsInForHead: "No assignments allowed in for-in/of head",
	  expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
	  invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
	  readOnly: "$1 is read-only",
	  unknownForHead: "Unknown node type $1 in ForStatement",
	  didYouMean: "Did you mean $1?",
	  codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
	  missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
	  unsupportedOutputType: "Unsupported output type $1",
	  illegalMethodName: "Illegal method name $1",
	  lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",
	
	  modulesIllegalExportName: "Illegal export $1",
	  modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",
	
	  undeclaredVariable: "Reference to undeclared variable $1",
	  undeclaredVariableType: "Referencing a type alias outside of a type annotation",
	  undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",
	
	  traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.",
	  traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
	  traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
	  traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",
	
	  pluginNotObject: "Plugin $2 specified in $1 was expected to return an object when invoked but returned $3",
	  pluginNotFunction: "Plugin $2 specified in $1 was expected to return a function but returned $3",
	  pluginUnknown: "Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4",
	  pluginInvalidProperty: "Plugin $2 specified in $1 provided an invalid property of $3"
	};
	
	exports.MESSAGES = MESSAGES;
	/**
	 * Get a message with $0 placeholders replaced by arguments.
	 */
	
	function get(key /*: string*/) /*: string*/ {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	
	  var msg = MESSAGES[key];
	  if (!msg) throw new ReferenceError("Unknown message " + JSON.stringify(key));
	
	  // stringify args
	  args = parseArgs(args);
	
	  // replace $0 placeholders with args
	  return msg.replace(/\$(\d+)/g, function (str, i) {
	    return args[i - 1];
	  });
	}
	
	/**
	 * Stingify arguments to be used inside messages.
	 */
	
	function parseArgs(args /*: Array<any>*/) /*: Array<string>*/ {
	  return args.map(function (val) {
	    if (val != null && val.inspect) {
	      return val.inspect();
	    } else {
	      try {
	        return JSON.stringify(val) || val + "";
	      } catch (e) {
	        return util.inspect(val);
	      }
	    }
	  });
	}

/***/ },

/***/ "./node_modules/babel-types/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _defaults = __webpack_require__("./node_modules/babel-runtime/helpers/defaults.js")["default"];
	
	var _interopExportWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-export-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneWithoutLoc = cloneWithoutLoc;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;
	
	var _toFastProperties = __webpack_require__("./node_modules/to-fast-properties/index.js");
	
	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
	
	var _lodashArrayCompact = __webpack_require__("./node_modules/lodash/array/compact.js");
	
	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashArrayUniq = __webpack_require__("./node_modules/lodash/array/uniq.js");
	
	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/init.js");
	
	var _definitions = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _react2 = __webpack_require__("./node_modules/babel-types/lib/react.js");
	
	var _react = _interopRequireWildcard(_react2);
	
	var t = exports;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */
	
	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };
	
	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}
	
	//
	
	var _constants = __webpack_require__("./node_modules/babel-types/lib/constants.js");
	
	_defaults(exports, _interopExportWildcard(_constants, _defaults));
	
	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */
	
	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}
	
	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */
	
	t.FLIPPED_ALIAS_KEYS = {};
	
	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});
	
	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */
	
	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});
	
	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));
	
	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */
	
	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;
	
	  var matches = isType(node.type, type);
	  if (!matches) return false;
	
	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}
	
	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */
	
	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;
	
	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;
	
	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var alias = _ref;
	
	      if (nodeType === alias) return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Description
	 */
	
	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }
	
	    var node = {};
	    node.type = type;
	
	    var i = 0;
	
	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      var field = t.NODE_FIELDS[type][key];
	
	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);
	
	      node[key] = arg;
	    }
	
	    for (var key in node) {
	      validate(node, key, node[key]);
	    }
	
	    return node;
	  }
	
	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});
	
	/**
	 * Description
	 */
	
	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };
	
	  var newType = t.DEPRECATED_KEYS[type];
	
	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};
	
	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}
	
	/**
	 * Description
	 */
	
	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;
	
	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;
	
	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;
	
	  field.validate(node, key, val);
	}
	
	/**
	 * Test if an object is shallowly equal.
	 */
	
	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);
	
	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;
	
	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }
	
	    var key = _ref3;
	
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Append a node to a member expression.
	 */
	
	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}
	
	/**
	 * Prepend a node to a member expression.
	 */
	
	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}
	
	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */
	
	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
	
	  return node[key] = t.toBlock(node[key], node);
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */
	
	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` and location properties.
	 */
	
	function cloneWithoutLoc(node /*: Object*/) /*: Object*/ {
	  var newNode = clone(node);
	  delete newNode.loc;
	  return newNode;
	}
	
	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */
	
	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	
	  for (var key in node) {
	    if (key[0] === "_") continue;
	
	    var val = node[key];
	
	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }
	
	    newNode[key] = val;
	  }
	
	  return newNode;
	}
	
	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */
	
	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");
	
	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;
	
	    var search = [member];
	    var i = 0;
	
	    while (search.length) {
	      var node = search.shift();
	
	      if (allowPartial && i === parts.length) {
	        return true;
	      }
	
	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }
	
	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }
	
	    return true;
	  };
	}
	
	/**
	 * Remove comment properties from a node.
	 */
	
	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    delete node[key];
	  }
	  return node;
	}
	
	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */
	
	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}
	
	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}
	
	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}
	
	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}
	
	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}
	
	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */
	
	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;
	
	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var key = _ref5;
	
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }
	
	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }
	
	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;
	
	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }
	
	    var key = _ref6;
	
	    child[key] = parent[key];
	  }
	
	  t.inheritsComments(child, parent);
	
	  return child;
	}
	
	/**
	 * TODO
	 */
	
	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}
	
	/**
	 * TODO
	 */
	
	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}
	
	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);
	
	//
	
	var _retrievers = __webpack_require__("./node_modules/babel-types/lib/retrievers.js");
	
	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));
	
	var _validators = __webpack_require__("./node_modules/babel-types/lib/validators.js");
	
	_defaults(exports, _interopExportWildcard(_validators, _defaults));
	
	var _converters = __webpack_require__("./node_modules/babel-types/lib/converters.js");
	
	_defaults(exports, _interopExportWildcard(_converters, _defaults));
	
	var _flow = __webpack_require__("./node_modules/babel-types/lib/flow.js");
	
	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },

/***/ "./node_modules/babel-runtime/helpers/defaults.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Object$getOwnPropertyNames = __webpack_require__("./node_modules/babel-runtime/core-js/object/get-own-property-names.js")["default"];
	
	var _Object$getOwnPropertyDescriptor = __webpack_require__("./node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js")["default"];
	
	var _Object$defineProperty = __webpack_require__("./node_modules/babel-runtime/core-js/object/define-property.js")["default"];
	
	exports["default"] = function (obj, defaults) {
	  var keys = _Object$getOwnPropertyNames(defaults);
	
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	
	    var value = _Object$getOwnPropertyDescriptor(defaults, key);
	
	    if (value && value.configurable && obj[key] === undefined) {
	      _Object$defineProperty(obj, key, value);
	    }
	  }
	
	  return obj;
	};
	
	exports.__esModule = true;

/***/ },

/***/ "./node_modules/babel-runtime/helpers/interop-export-wildcard.js":
/***/ function(module, exports) {

	"use strict";
	
	exports["default"] = function (obj, defaults) {
	  var newObj = defaults({}, obj);
	  delete newObj["default"];
	  return newObj;
	};
	
	exports.__esModule = true;

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/init.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/core.js");
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/es2015.js");
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/flow.js");
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/jsx.js");
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/misc.js");
	
	__webpack_require__("./node_modules/babel-types/lib/definitions/experimental.js");

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};
	
	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}
	
	function assertEach(callback /*: Function*/) /*: Function*/ {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;
	
	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  }
	  validator.each = callback;
	  return validator;
	}
	
	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }
	
	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }
	
	  validate.oneOf = vals;
	
	  return validate;
	}
	
	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var type = _ref;
	
	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeTypes = types;
	
	  return validate;
	}
	
	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var type = _ref2;
	
	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeOrValueTypes = types;
	
	  return validate;
	}
	
	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }
	
	  validate.type = type;
	
	  return validate;
	}
	
	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }
	
	  function validate() {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var fn = _ref3;
	
	      fn.apply(undefined, arguments);
	    }
	  }
	  validate.chainOf = fns;
	  return validate;
	}
	
	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  var inherits = opts.inherits && store[opts.inherits] || {};
	
	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];
	
	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }
	
	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    opts.fields[key] = opts.fields[key] || {};
	  }
	
	  for (var key in opts.fields) {
	    var field = opts.fields[key];
	
	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }
	
	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;
	
	  store[type] = opts;
	}
	
	var store = {};

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/core.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-types/lib/constants.js");
	
	var _index2 = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _index3 = _interopRequireDefault(_index2);
	
	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement"))),
	      "default": []
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});
	
	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});
	
	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});
	
	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});
	
	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});
	
	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});
	
	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});
	
	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});
	
	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});
	
	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});
	
	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});
	
	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});
	
	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});
	
	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});
	
	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});
	
	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});
	
	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});
	
	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});
	
	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});
	
	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});
	
	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});
	
	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});
	
	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});
	
	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});
	
	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});
	
	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});
	
	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});
	
	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-types/lib/constants.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol$for = __webpack_require__("./node_modules/babel-runtime/core-js/symbol/for.js")["default"];
	
	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
	
	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];
	
	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);
	
	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);
	
	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};
	
	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
	var NOT_LOCAL_BINDING = _Symbol$for("should not be considered a local binding");
	exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

/***/ },

/***/ "./node_modules/babel-runtime/core-js/symbol/for.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__("./node_modules/core-js/library/fn/symbol/for.js"), __esModule: true };

/***/ },

/***/ "./node_modules/core-js/library/fn/symbol/for.js":
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__("./node_modules/core-js/library/modules/es6.symbol.js");
	module.exports = __webpack_require__("./node_modules/core-js/library/modules/$.core.js").Symbol['for'];

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/es2015.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});
	
	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});
	
	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});
	
	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});
	
	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});
	
	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});
	
	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});
	
	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});
	
	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});
	
	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareInterface", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});
	
	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});
	
	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/jsx.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});
	
	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});
	
	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXText", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});
	
	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});
	
	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});
	
	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/misc.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("Noop", {
	  visitor: []
	});
	
	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-types/lib/definitions/experimental.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});
	
	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-types/lib/react.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var isReactComponent = t.buildMatchMemberExpression("React.Component");
	
	exports.isReactComponent = isReactComponent;
	
	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}
	
	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);
	
	  var lastNonEmptyLine = 0;
	
	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }
	
	  var str = "";
	
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	
	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;
	
	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");
	
	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }
	
	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }
	
	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }
	
	      str += trimmedLine;
	    }
	  }
	
	  if (str) args.push(t.stringLiteral(str));
	}
	
	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];
	
	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];
	
	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }
	
	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;
	
	    elems.push(child);
	  }
	
	  return elems;
	}

/***/ },

/***/ "./node_modules/babel-types/lib/retrievers.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */
	
	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);
	
	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;
	
	    var keys = t.getBindingIdentifiers.keys[id.type];
	
	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }
	
	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }
	
	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }
	
	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }
	
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }
	
	  return ids;
	}
	
	/**
	 * Mapping of types to their identifier keys.
	 */
	
	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],
	
	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],
	
	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],
	
	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],
	
	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],
	
	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],
	
	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],
	
	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],
	
	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],
	
	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};
	
	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },

/***/ "./node_modules/babel-types/lib/validators.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;
	
	var _retrievers = __webpack_require__("./node_modules/babel-types/lib/retrievers.js");
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-types/lib/constants.js");
	
	/**
	 * Check if the input `node` is a binding identifier.
	 */
	
	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */
	
	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	    case "BindExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }
	
	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;
	
	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }
	
	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;
	
	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var param = _ref;
	
	        if (param === node) return false;
	      }
	
	      return parent.id !== node;
	
	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }
	
	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;
	
	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;
	
	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;
	
	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;
	
	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;
	
	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;
	
	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;
	
	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;
	
	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;
	
	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;
	
	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;
	
	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }
	
	  return true;
	}
	
	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */
	
	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}
	
	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */
	
	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}
	
	/**
	 * Check if the input `node` is block scoped.
	 */
	
	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}
	
	/**
	 * Check if the input `node` is a variable declaration.
	 */
	
	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}
	
	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */
	
	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}
	
	/**
	 * Check if the input `node` is a scope.
	 */
	
	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }
	
	  return t.isScopable(node);
	}
	
	/**
	 * Check if the input `node` is definitely immutable.
	 */
	
	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;
	
	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }
	
	  return false;
	}

/***/ },

/***/ "./node_modules/babel-types/lib/converters.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Number$MAX_SAFE_INTEGER = __webpack_require__("./node_modules/babel-runtime/core-js/number/max-safe-integer.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;
	
	var _lodashLangIsPlainObject = __webpack_require__("./node_modules/lodash/lang/isPlainObject.js");
	
	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);
	
	var _lodashLangIsNumber = __webpack_require__("./node_modules/lodash/lang/isNumber.js");
	
	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
	
	var _lodashLangIsRegExp = __webpack_require__("./node_modules/lodash/lang/isRegExp.js");
	
	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
	
	var _lodashLangIsString = __webpack_require__("./node_modules/lodash/lang/isString.js");
	
	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}
	
	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */
	
	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;
	
	  var declars = [];
	  var bailed = false;
	
	  var result = convert(nodes);
	  if (bailed) return;
	
	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }
	
	  return result;
	
	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];
	
	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var node = _ref;
	
	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed
	
	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var declar = _ref2;
	
	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }
	
	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }
	
	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;
	
	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }
	
	      ensureLastUndefined = false;
	    }
	
	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }
	
	    //
	
	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}
	
	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;
	
	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }
	
	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }
	
	    if (node["static"]) {
	      alias = "static:" + alias;
	    }
	
	    return alias;
	  })();
	}
	
	toKeyAlias.uid = 0;
	
	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};
	
	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";
	
	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
	
	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");
	
	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });
	
	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }
	
	  return name || "_";
	}
	
	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}
	
	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */
	
	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }
	
	  var mustHaveId = false;
	  var newType = undefined;
	
	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }
	
	  if (mustHaveId && !node.id) {
	    newType = false;
	  }
	
	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }
	
	  node.type = newType;
	
	  return node;
	}
	
	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }
	
	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }
	
	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}
	
	function toBlock(node, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }
	
	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }
	
	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }
	
	    node = [node];
	  }
	
	  return t.blockStatement(node);
	}
	
	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }
	
	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }
	
	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }
	
	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }
	
	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }
	
	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }
	
	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }
	
	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }
	
	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },

/***/ "./node_modules/babel-runtime/core-js/number/max-safe-integer.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__("./node_modules/core-js/library/fn/number/max-safe-integer.js"), __esModule: true };

/***/ },

/***/ "./node_modules/core-js/library/fn/number/max-safe-integer.js":
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__("./node_modules/core-js/library/modules/es6.number.max-safe-integer.js");
	module.exports = 0x1fffffffffffff;

/***/ },

/***/ "./node_modules/core-js/library/modules/es6.number.max-safe-integer.js":
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__("./node_modules/core-js/library/modules/$.export.js");
	
	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },

/***/ "./node_modules/babel-traverse/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Object$getOwnPropertySymbols = __webpack_require__("./node_modules/babel-runtime/core-js/object/get-own-property-symbols.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequire = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require.js")["default"];
	
	exports.__esModule = true;
	exports["default"] = traverse;
	
	var _context = __webpack_require__("./node_modules/babel-traverse/lib/context.js");
	
	var _context2 = _interopRequireDefault(_context);
	
	var _visitors = __webpack_require__("./node_modules/babel-traverse/lib/visitors.js");
	
	var visitors = _interopRequireWildcard(_visitors);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _lodashCollectionIncludes = __webpack_require__("./node_modules/lodash/collection/includes.js");
	
	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _path = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	
	exports.NodePath = _interopRequire(_path);
	
	var _scope = __webpack_require__("./node_modules/babel-traverse/lib/scope/index.js");
	
	exports.Scope = _interopRequire(_scope);
	
	var _hub = __webpack_require__("./node_modules/babel-traverse/lib/hub.js");
	
	exports.Hub = _interopRequire(_hub);
	exports.visitors = visitors;
	
	function traverse(parent /*: Object | Array<Object>*/, opts /*:: ?: Object*/, scope /*:: ?: Object*/, state /*: Object*/, parentPath /*: Object*/) {
	  if (!parent) return;
	  if (!opts) opts = {};
	
	  if (!opts.noScope && !scope) {
	    if (parent.type !== "Program" && parent.type !== "File") {
	      throw new Error(messages.get("traverseNeedsParent", parent.type));
	    }
	  }
	
	  visitors.explode(opts);
	
	  traverse.node(parent, opts, scope, state, parentPath);
	}
	
	traverse.visitors = visitors;
	traverse.verify = visitors.verify;
	traverse.explode = visitors.explode;
	
	traverse.NodePath = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	traverse.Scope = __webpack_require__("./node_modules/babel-traverse/lib/scope/index.js");
	traverse.Hub = __webpack_require__("./node_modules/babel-traverse/lib/hub.js");
	
	traverse.cheap = function (node, enter) {
	  if (!node) return;
	
	  var keys = t.VISITOR_KEYS[node.type];
	  if (!keys) return;
	
	  enter(node);
	
	  for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var key = _ref;
	
	    var subNode = node[key];
	
	    if (Array.isArray(subNode)) {
	      for (var _iterator2 = subNode, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;
	
	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }
	
	        var _node = _ref2;
	
	        traverse.cheap(_node, enter);
	      }
	    } else {
	      traverse.cheap(subNode, enter);
	    }
	  }
	};
	
	traverse.node = function (node /*: Object*/, opts /*: Object*/, scope /*: Object*/, state /*: Object*/, parentPath /*: Object*/, skipKeys /*:: ?*/) {
	  var keys /*: Array*/ = t.VISITOR_KEYS[node.type];
	  if (!keys) return;
	
	  var context = new _context2["default"](scope, opts, state, parentPath);
	  for (var _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;
	
	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }
	
	    var key = _ref3;
	
	    if (skipKeys && skipKeys[key]) continue;
	    if (context.visit(node, key)) return;
	  }
	};
	
	var CLEAR_KEYS /*: Array*/ = t.COMMENT_KEYS.concat(["tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);
	
	traverse.clearNode = function (node) {
	  for (var _iterator4 = CLEAR_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    if (node[key] != null) node[key] = undefined;
	  }
	
	  for (var key in node) {
	    if (key[0] === "_" && node[key] != null) node[key] = undefined;
	  }
	
	  var syms /*: Array<Symbol>*/ = _Object$getOwnPropertySymbols(node);
	  for (var _iterator5 = syms, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var sym = _ref5;
	
	    node[sym] = null;
	  }
	};
	
	traverse.removeProperties = function (tree) {
	  traverse.cheap(tree, traverse.clearNode);
	  return tree;
	};
	
	function hasBlacklistedType(path, state) {
	  if (path.node.type === state.type) {
	    state.has = true;
	    path.skip();
	  }
	}
	
	traverse.hasType = function (tree /*: Object*/, scope /*: Object*/, type /*: Object*/, blacklistTypes /*: Array<string>*/) /*: boolean*/ {
	  // the node we're searching in is blacklisted
	  if (_lodashCollectionIncludes2["default"](blacklistTypes, tree.type)) return false;
	
	  // the type we're looking for is the same as the passed node
	  if (tree.type === type) return true;
	
	  var state = {
	    has: false,
	    type: type
	  };
	
	  traverse(tree, {
	    blacklist: blacklistTypes,
	    enter: hasBlacklistedType
	  }, scope, state);
	
	  return state.has;
	};

/***/ },

/***/ "./node_modules/babel-runtime/core-js/object/get-own-property-symbols.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__("./node_modules/core-js/library/fn/object/get-own-property-symbols.js"), __esModule: true };

/***/ },

/***/ "./node_modules/core-js/library/fn/object/get-own-property-symbols.js":
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__("./node_modules/core-js/library/modules/es6.symbol.js");
	module.exports = __webpack_require__("./node_modules/core-js/library/modules/$.core.js").Object.getOwnPropertySymbols;

/***/ },

/***/ "./node_modules/babel-traverse/lib/context.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _path = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	
	var _path2 = _interopRequireDefault(_path);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var testing = ("production") === "test";
	
	var TraversalContext = (function () {
	  function TraversalContext(scope, opts, state, parentPath) {
	    _classCallCheck(this, TraversalContext);
	
	    this.parentPath = parentPath;
	    this.scope = scope;
	    this.state = state;
	    this.opts = opts;
	  }
	
	  /**
	   * This method does a simple check to determine whether or not we really need to attempt
	   * visit a node. This will prevent us from constructing a NodePath.
	   */
	
	  TraversalContext.prototype.shouldVisit = function shouldVisit(node) /*: boolean*/ {
	    var opts = this.opts;
	    if (opts.enter || opts.exit) return true;
	
	    // check if we have a visitor for this node
	    if (opts[node.type]) return true;
	
	    // check if we're going to traverse into this node
	    var keys /*: ?Array<string>*/ = t.VISITOR_KEYS[node.type];
	    if (!keys || !keys.length) return false;
	
	    // we need to traverse into this node so ensure that it has children to traverse into!
	    for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var key = _ref;
	
	      if (node[key]) return true;
	    }
	
	    return false;
	  };
	
	  TraversalContext.prototype.create = function create(node, obj, key, listKey) /*: NodePath*/ {
	    return _path2["default"].get({
	      parentPath: this.parentPath,
	      parent: node,
	      container: obj,
	      key: key,
	      listKey: listKey
	    });
	  };
	
	  TraversalContext.prototype.maybeQueue = function maybeQueue(path, notPriority /*:: ?: boolean*/) {
	    if (this.trap) {
	      throw new Error("Infinite cycle detected");
	    }
	
	    if (this.queue) {
	      if (notPriority) {
	        this.queue.push(path);
	      } else {
	        this.priorityQueue.push(path);
	      }
	    }
	  };
	
	  TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
	    // nothing to traverse!
	    if (container.length === 0) return false;
	
	    var queue = [];
	
	    // build up initial queue
	    for (var key = 0; key < container.length; key++) {
	      var node = container[key];
	      if (node && this.shouldVisit(node)) {
	        queue.push(this.create(parent, container, key, listKey));
	      }
	    }
	
	    return this.visitQueue(queue);
	  };
	
	  TraversalContext.prototype.visitSingle = function visitSingle(node, key) /*: boolean*/ {
	    if (this.shouldVisit(node[key])) {
	      return this.visitQueue([this.create(node, node, key)]);
	    } else {
	      return false;
	    }
	  };
	
	  TraversalContext.prototype.visitQueue = function visitQueue(queue /*: Array<NodePath>*/) {
	    // set queue
	    this.queue = queue;
	    this.priorityQueue = [];
	
	    var visited = [];
	    var stop = false;
	
	    // visit the queue
	    for (var _iterator2 = queue, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var path = _ref2;
	
	      path.resync();
	      path.pushContext(this);
	
	      if (testing && queue.length >= 1000) {
	        this.trap = true;
	      }
	
	      // ensure we don't visit the same node twice
	      if (visited.indexOf(path.node) >= 0) continue;
	      visited.push(path.node);
	
	      if (path.visit()) {
	        stop = true;
	        break;
	      }
	
	      if (this.priorityQueue.length) {
	        stop = this.visitQueue(this.priorityQueue);
	        this.priorityQueue = [];
	        this.queue = queue;
	        if (stop) break;
	      }
	    }
	
	    // clear queue
	    for (var _iterator3 = queue, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var path = _ref3;
	
	      path.popContext();
	    }
	
	    // clear queue
	    this.queue = null;
	
	    return stop;
	  };
	
	  TraversalContext.prototype.visit = function visit(node, key) {
	    var nodes = node[key];
	    if (!nodes) return false;
	
	    if (Array.isArray(nodes)) {
	      return this.visitMultiple(nodes, node, key);
	    } else {
	      return this.visitSingle(node, key);
	    }
	  };
	
	  return TraversalContext;
	})();
	
	exports["default"] = TraversalContext;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _libVirtualTypes = __webpack_require__("./node_modules/babel-traverse/lib/path/lib/virtual-types.js");
	
	var virtualTypes = _interopRequireWildcard(_libVirtualTypes);
	
	var _debug2 = __webpack_require__("./node_modules/debug/browser.js");
	
	var _debug3 = _interopRequireDefault(_debug2);
	
	var _constants = __webpack_require__("./node_modules/babel-traverse/lib/path/constants.js");
	
	var _invariant = __webpack_require__("./node_modules/invariant/browser.js");
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _lodashObjectAssign = __webpack_require__("./node_modules/lodash/object/assign.js");
	
	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);
	
	var _scope = __webpack_require__("./node_modules/babel-traverse/lib/scope/index.js");
	
	var _scope2 = _interopRequireDefault(_scope);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type Hub from "../hub";*/
	/*:: import type TraversalContext from "../context";*/
	
	var _debug = _debug3["default"]("babel");
	
	var NodePath = (function () {
	  function NodePath(hub /*: Hub*/, parent /*: Object*/) {
	    _classCallCheck(this, NodePath);
	
	    this.parent = parent;
	    this.hub = hub;
	    this.contexts = [];
	    this.data = {};
	    this.shouldSkip = false;
	    this.shouldStop = false;
	    this.removed = false;
	    this.state = null;
	    this.opts = null;
	    this.skipKeys = null;
	    this.parentPath = null;
	    this.context = null;
	    this.container = null;
	    this.listKey = null;
	    this.inList = false;
	    this.parentKey = null;
	    this.key = null;
	    this.node = null;
	    this.scope = null;
	    this.type = null;
	    this.typeAnnotation = null;
	  }
	
	  NodePath.get = function get(_ref2) /*: NodePath*/ {
	    var hub = _ref2.hub;
	    var parentPath = _ref2.parentPath;
	    var parent = _ref2.parent;
	    var container = _ref2.container;
	    var listKey = _ref2.listKey;
	    var key = _ref2.key;
	
	    if (!hub && parentPath) {
	      hub = parentPath.hub;
	    }
	
	    _invariant2["default"](parent, "To get a node path the parent needs to exist");
	
	    var targetNode = container[key];
	
	    var paths = parent[_constants.PATH_CACHE_KEY] = parent[_constants.PATH_CACHE_KEY] || [];
	    var path = undefined;
	
	    for (var i = 0; i < paths.length; i++) {
	      var pathCheck = paths[i];
	      if (pathCheck.node === targetNode) {
	        path = pathCheck;
	        break;
	      }
	    }
	
	    if (path && !(path instanceof NodePath)) {
	      if (path.constructor.name === "NodePath") {
	        // we're going to absolutley thrash the tree and allocate way too many node paths
	        // than is necessary but there's no way around this as the node module resolution
	        // algorithm is ridiculous
	        path = null;
	      } else {
	        // badly deserialised probably
	        throw new Error("We found a path that isn't a NodePath instance. Possiblly due to bad serialisation.");
	      }
	    }
	
	    if (!path) {
	      path = new NodePath(hub, parent);
	      paths.push(path);
	    }
	
	    path.setup(parentPath, container, listKey, key);
	
	    return path;
	  };
	
	  NodePath.prototype.getScope = function getScope(scope /*: Scope*/) {
	    var ourScope = scope;
	
	    // we're entering a new scope so let's construct it!
	    if (this.isScope()) {
	      ourScope = new _scope2["default"](this, scope);
	    }
	
	    return ourScope;
	  };
	
	  NodePath.prototype.setData = function setData(key /*: string*/, val /*: any*/) /*: any*/ {
	    return this.data[key] = val;
	  };
	
	  NodePath.prototype.getData = function getData(key /*: string*/, def /*:: ?: any*/) /*: any*/ {
	    var val = this.data[key];
	    if (!val && def) val = this.data[key] = def;
	    return val;
	  };
	
	  NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg /*: string*/) /*: Error*/ {
	    var Error /*: typeof Error*/ = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];
	
	    return this.hub.file.buildCodeFrameError(this.node, msg, Error);
	  };
	
	  NodePath.prototype.traverse = function traverse(visitor /*: Object*/, state /*:: ?: any*/) {
	    _index2["default"](this.node, visitor, this.scope, state, this);
	  };
	
	  NodePath.prototype.mark = function mark(type /*: string*/, message /*: string*/) {
	    this.hub.file.metadata.marked.push({
	      type: type,
	      message: message,
	      loc: this.node.loc
	    });
	  };
	
	  NodePath.prototype.set = function set(key /*: string*/, node /*: Object*/) {
	    t.validate(this.node, key, node);
	    this.node[key] = node;
	  };
	
	  NodePath.prototype.getPathLocation = function getPathLocation() /*: string*/ {
	    var parts = [];
	    var path = this;
	    do {
	      var key = path.key;
	      if (path.inList) key = path.listKey + "[" + key + "]";
	      parts.unshift(key);
	    } while (path = path.parentPath);
	    return parts.join(".");
	  };
	
	  NodePath.prototype.debug = function debug(buildMessage /*: Function*/) {
	    if (!_debug.enabled) return;
	    _debug(this.getPathLocation() + " " + this.type + ": " + buildMessage());
	  };
	
	  return NodePath;
	})();
	
	exports["default"] = NodePath;
	
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/ancestry.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/inference/index.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/replacement.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/evaluation.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/conversion.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/introspection.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/context.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/removal.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/modification.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/family.js"));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__("./node_modules/babel-traverse/lib/path/comments.js"));
	
	var _loop = function () {
	  if (_isArray) {
	    if (_i >= _iterator.length) return "break";
	    _ref = _iterator[_i++];
	  } else {
	    _i = _iterator.next();
	    if (_i.done) return "break";
	    _ref = _i.value;
	  }
	
	  var type = _ref;
	
	  var typeKey = "is" + type;
	  NodePath.prototype[typeKey] = function (opts) {
	    return t[typeKey](this.node, opts);
	  };
	
	  NodePath.prototype["assert" + type] = function (opts) {
	    if (!this[typeKey](opts)) {
	      throw new TypeError("Expected node path of type " + type);
	    }
	  };
	};
	
	for (var _iterator = (t.TYPES /*: Array<string>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	  var _ref;
	
	  var _ret = _loop();
	
	  // istanbul ignore next
	  if (_ret === "break") break;
	}
	
	var _loop2 = function (type) {
	  if (type[0] === "_") return "continue";
	  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);
	
	  var virtualType = virtualTypes[type];
	
	  NodePath.prototype["is" + type] = function (opts) {
	    return virtualType.checkPath(this, opts);
	  };
	};
	
	for (var type in virtualTypes) {
	  var _ret2 = _loop2(type);
	
	  // istanbul ignore next
	  if (_ret2 === "continue") continue;
	}
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/lib/virtual-types.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type NodePath from "../index";*/var ReferencedIdentifier = {
	  types: ["Identifier", "JSXIdentifier"],
	  checkPath: function checkPath(_ref /*: NodePath*/, opts /*:: ?: Object*/) /*: boolean*/ {
	    var node = _ref.node;
	    var parent = _ref.parent;
	
	    if (!t.isIdentifier(node, opts)) {
	      if (t.isJSXIdentifier(node, opts)) {
	        if (_babelTypes.react.isCompatTag(node.name)) return false;
	      } else {
	        // not a JSXIdentifier or an Identifier
	        return false;
	      }
	    }
	
	    // check if node is referenced
	    return t.isReferenced(node, parent);
	  }
	};
	
	exports.ReferencedIdentifier = ReferencedIdentifier;
	var ReferencedMemberExpression = {
	  types: ["MemberExpression"],
	  checkPath: function checkPath(_ref2) {
	    var node = _ref2.node;
	    var parent = _ref2.parent;
	
	    return t.isMemberExpression(node) && t.isReferenced(node, parent);
	  }
	};
	
	exports.ReferencedMemberExpression = ReferencedMemberExpression;
	var BindingIdentifier = {
	  types: ["Identifier"],
	  checkPath: function checkPath(_ref3 /*: NodePath */) /*: boolean*/ {
	    var node = _ref3.node;
	    var parent = _ref3.parent;
	
	    return t.isIdentifier(node) && t.isBinding(node, parent);
	  }
	};
	
	exports.BindingIdentifier = BindingIdentifier;
	var Statement = {
	  types: ["Statement"],
	  checkPath: function checkPath(_ref4 /*: NodePath */) /*: boolean*/ {
	    var node = _ref4.node;
	    var parent = _ref4.parent;
	
	    if (t.isStatement(node)) {
	      if (t.isVariableDeclaration(node)) {
	        if (t.isForXStatement(parent, { left: node })) return false;
	        if (t.isForStatement(parent, { init: node })) return false;
	      }
	
	      return true;
	    } else {
	      return false;
	    }
	  }
	};
	
	exports.Statement = Statement;
	var Expression = {
	  types: ["Expression"],
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    if (path.isIdentifier()) {
	      return path.isReferencedIdentifier();
	    } else {
	      return t.isExpression(path.node);
	    }
	  }
	};
	
	exports.Expression = Expression;
	var Scope = {
	  types: ["Scopable"],
	  checkPath: function checkPath(path) {
	    return t.isScope(path.node, path.parent);
	  }
	};
	
	exports.Scope = Scope;
	var Referenced = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isReferenced(path.node, path.parent);
	  }
	};
	
	exports.Referenced = Referenced;
	var BlockScoped = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isBlockScoped(path.node);
	  }
	};
	
	exports.BlockScoped = BlockScoped;
	var Var = {
	  types: ["VariableDeclaration"],
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isVar(path.node);
	  }
	};
	
	exports.Var = Var;
	var User = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return path.node && !!path.node.loc;
	  }
	};
	
	exports.User = User;
	var Generated = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return !path.isUser();
	  }
	};
	
	exports.Generated = Generated;
	var Pure = {
	  checkPath: function checkPath(path /*: NodePath*/, opts /*:: ?*/) /*: boolean*/ {
	    return path.scope.isPure(path.node, opts);
	  }
	};
	
	exports.Pure = Pure;
	var Flow = {
	  types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
	  checkPath: function checkPath(_ref5 /*: NodePath */) /*: boolean*/ {
	    var node = _ref5.node;
	
	    if (t.isFlow(node)) {
	      return true;
	    } else if (t.isImportDeclaration(node)) {
	      return node.importKind === "type" || node.importKind === "typeof";
	    } else if (t.isExportDeclaration(node)) {
	      return node.exportKind === "type";
	    } else {
	      return false;
	    }
	  }
	};
	exports.Flow = Flow;

/***/ },

/***/ "./node_modules/debug/browser.js":
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__("./node_modules/debug/debug.js");
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },

/***/ "./node_modules/babel-traverse/lib/path/constants.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	var PATH_CACHE_KEY = "_paths";exports.PATH_CACHE_KEY = PATH_CACHE_KEY;
	//Symbol();

/***/ },

/***/ "./node_modules/invariant/browser.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;


/***/ },

/***/ "./node_modules/babel-traverse/lib/scope/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _lodashCollectionIncludes = __webpack_require__("./node_modules/lodash/collection/includes.js");
	
	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
	
	var _repeating = __webpack_require__("./node_modules/repeating/index.js");
	
	var _repeating2 = _interopRequireDefault(_repeating);
	
	var _libRenamer = __webpack_require__("./node_modules/babel-traverse/lib/scope/lib/renamer.js");
	
	var _libRenamer2 = _interopRequireDefault(_libRenamer);
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _lodashObjectDefaults = __webpack_require__("./node_modules/lodash/object/defaults.js");
	
	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _binding = __webpack_require__("./node_modules/babel-traverse/lib/scope/binding.js");
	
	var _binding2 = _interopRequireDefault(_binding);
	
	var _globals = __webpack_require__("./node_modules/babel-traverse/node_modules/globals/index.js");
	
	var _globals2 = _interopRequireDefault(_globals);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	//
	
	/*:: import type NodePath from "../path";*/var CACHE_SINGLE_KEY = _Symbol();
	var CACHE_MULTIPLE_KEY = _Symbol();
	
	/**
	 * To avoid creating a new Scope instance for each traversal, we maintain a cache on the
	 * node itself containing all scopes it has been associated with.
	 *
	 * We also optimise for the case of there being only a single scope associated with a node.
	 */
	
	function getCache(node, parentScope, self) {
	  var singleCache = node[CACHE_SINGLE_KEY];
	
	  if (singleCache) {
	    // we've only ever associated one scope with this node so let's check it
	    if (matchesParent(singleCache, parentScope)) {
	      return singleCache;
	    }
	  } else if (!node[CACHE_MULTIPLE_KEY]) {
	    // no scope has ever been associated with this node
	    node[CACHE_SINGLE_KEY] = self;
	    return;
	  }
	
	  // looks like we have either a single scope association that was never matched or
	  // multiple assocations, let's find the right one!
	  return getCacheMultiple(node, parentScope, self, singleCache);
	}
	
	function matchesParent(scope, parentScope) {
	  if (scope.parent === parentScope) {
	    return true;
	  }
	}
	
	function getCacheMultiple(node, parentScope, self, singleCache) {
	  var scopes /*: Array<Scope>*/ = node[CACHE_MULTIPLE_KEY] = node[CACHE_MULTIPLE_KEY] || [];
	
	  if (singleCache) {
	    // we have a scope assocation miss so push it onto our scopes
	    scopes.push(singleCache);
	    node[CACHE_SINGLE_KEY] = null;
	  }
	
	  // loop through and check each scope to see if it matches our parent
	  for (var _iterator = scopes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var scope = _ref;
	
	    if (matchesParent(scope, parentScope)) return scope;
	  }
	
	  scopes.push(self);
	}
	
	//
	
	var collectorVisitor = {
	  For: function For(path) {
	    for (var _iterator2 = (t.FOR_INIT_KEYS /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      var declar = path.get(key);
	      if (declar.isVar()) path.scope.getFunctionParent().registerBinding("var", declar);
	    }
	  },
	
	  Declaration: function Declaration(path) {
	    // delegate block scope handling to the `blockVariableVisitor`
	    if (path.isBlockScoped()) return;
	
	    // this will be hit again once we traverse into it after this iteration
	    if (path.isExportDeclaration() && path.get("declaration").isDeclaration()) return;
	
	    // we've ran into a declaration!
	    path.scope.getFunctionParent().registerDeclaration(path);
	  },
	
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    state.references.push(path);
	  },
	
	  ForXStatement: function ForXStatement(path, state) {
	    var left = path.get("left");
	    if (left.isPattern() || left.isIdentifier()) {
	      state.constantViolations.push(left);
	    }
	  },
	
	  ExportDeclaration: {
	    exit: function exit(_ref20) {
	      var node = _ref20.node;
	      var scope = _ref20.scope;
	
	      var declar = node.declaration;
	      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
	        var _id = declar.id;
	        if (!_id) return;
	
	        var binding = scope.getBinding(_id.name);
	        if (binding) binding.reference();
	      } else if (t.isVariableDeclaration(declar)) {
	        for (var _iterator3 = (declar.declarations /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	          var _ref3;
	
	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }
	
	          var decl = _ref3;
	
	          var ids = t.getBindingIdentifiers(decl);
	          for (var _name in ids) {
	            var binding = scope.getBinding(_name);
	            if (binding) binding.reference();
	          }
	        }
	      }
	    }
	  },
	
	  LabeledStatement: function LabeledStatement(path) {
	    path.scope.getProgramParent().addGlobal(path.node);
	    path.scope.getBlockParent().registerDeclaration(path);
	  },
	
	  AssignmentExpression: function AssignmentExpression(path, state) {
	    state.assignments.push(path);
	  },
	
	  UpdateExpression: function UpdateExpression(path, state) {
	    state.constantViolations.push(path.get("argument"));
	  },
	
	  UnaryExpression: function UnaryExpression(path, state) {
	    if (path.node.operator === "delete") {
	      state.constantViolations.push(path.get("argument"));
	    }
	  },
	
	  BlockScoped: function BlockScoped(path) {
	    var scope = path.scope;
	    if (scope.path === path) scope = scope.parent;
	    scope.getBlockParent().registerDeclaration(path);
	  },
	
	  ClassDeclaration: function ClassDeclaration(path) {
	    var id = path.node.id;
	    if (!id) return;
	
	    var name = id.name;
	    path.scope.bindings[name] = path.scope.getBinding(name);
	  },
	
	  Block: function Block(path) {
	    var paths = path.get("body");
	    for (var _iterator4 = (paths /*: Array*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;
	
	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }
	
	      var bodyPath = _ref4;
	
	      if (bodyPath.isFunctionDeclaration()) {
	        path.scope.getBlockParent().registerDeclaration(bodyPath);
	      }
	    }
	  }
	};
	
	var uid = 0;
	
	var Scope = (function () {
	
	  /**
	   * This searches the current "scope" and collects all references/bindings
	   * within.
	   */
	
	  function Scope(path /*: NodePath*/, parentScope /*:: ?: Scope*/) {
	    _classCallCheck(this, Scope);
	
	    if (parentScope && parentScope.block === path.node) {
	      return parentScope;
	    }
	
	    var cached = getCache(path.node, parentScope, this);
	    if (cached) return cached;
	
	    this.uid = uid++;
	    this.parent = parentScope;
	    this.hub = path.hub;
	
	    this.parentBlock = path.parent;
	    this.block = path.node;
	    this.path = path;
	  }
	
	  /**
	   * Globals.
	   */
	
	  /**
	   * Traverse node with current scope and path.
	   */
	
	  Scope.prototype.traverse = function traverse(node /*: Object*/, opts /*: Object*/, state /*:: ?*/) {
	    _index2["default"](node, opts, this, state, this.path);
	  };
	
	  /**
	   * Generate a unique identifier and add it to the current scope.
	   */
	
	  Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
	
	    var id = this.generateUidIdentifier(name);
	    this.push({ id: id });
	    return id;
	  };
	
	  /**
	   * Generate a unique identifier.
	   */
	
	  Scope.prototype.generateUidIdentifier = function generateUidIdentifier() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
	
	    return t.identifier(this.generateUid(name));
	  };
	
	  /**
	   * Generate a unique `_id1` binding.
	   */
	
	  Scope.prototype.generateUid = function generateUid() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
	
	    name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
	
	    var uid = undefined;
	    var i = 0;
	    do {
	      uid = this._generateUid(name, i);
	      i++;
	    } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));
	
	    var program = this.getProgramParent();
	    program.references[uid] = true;
	    program.uids[uid] = true;
	
	    return uid;
	  };
	
	  /**
	   * Generate an `_id1`.
	   */
	
	  Scope.prototype._generateUid = function _generateUid(name, i) {
	    var id = name;
	    if (i > 1) id += i;
	    return "_" + id;
	  };
	
	  /**
	   * Generate a unique identifier based on a node.
	   */
	
	  Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent /*: Object*/, defaultName /*:: ?: String*/) /*:  Object*/ {
	    var node = parent;
	
	    if (t.isAssignmentExpression(parent)) {
	      node = parent.left;
	    } else if (t.isVariableDeclarator(parent)) {
	      node = parent.id;
	    } else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {
	      node = node.key;
	    }
	
	    var parts = [];
	
	    var add = function add(node) {
	      if (t.isModuleDeclaration(node)) {
	        if (node.source) {
	          add(node.source);
	        } else if (node.specifiers && node.specifiers.length) {
	          for (var _iterator5 = (node.specifiers /*: Array*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	            var _ref5;
	
	            if (_isArray5) {
	              if (_i5 >= _iterator5.length) break;
	              _ref5 = _iterator5[_i5++];
	            } else {
	              _i5 = _iterator5.next();
	              if (_i5.done) break;
	              _ref5 = _i5.value;
	            }
	
	            var specifier = _ref5;
	
	            add(specifier);
	          }
	        } else if (node.declaration) {
	          add(node.declaration);
	        }
	      } else if (t.isModuleSpecifier(node)) {
	        add(node.local);
	      } else if (t.isMemberExpression(node)) {
	        add(node.object);
	        add(node.property);
	      } else if (t.isIdentifier(node)) {
	        parts.push(node.name);
	      } else if (t.isLiteral(node)) {
	        parts.push(node.value);
	      } else if (t.isCallExpression(node)) {
	        add(node.callee);
	      } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
	        for (var _iterator6 = (node.properties /*: Array*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	          var _ref6;
	
	          if (_isArray6) {
	            if (_i6 >= _iterator6.length) break;
	            _ref6 = _iterator6[_i6++];
	          } else {
	            _i6 = _iterator6.next();
	            if (_i6.done) break;
	            _ref6 = _i6.value;
	          }
	
	          var prop = _ref6;
	
	          add(prop.key || prop.argument);
	        }
	      }
	    };
	
	    add(node);
	
	    var id = parts.join("$");
	    id = id.replace(/^_/, "") || defaultName || "ref";
	
	    return this.generateUidIdentifier(id.slice(0, 20));
	  };
	
	  /**
	   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
	   * evaluating it wont result in potentially arbitrary code from being ran. The following are
	   * whitelisted and determined not to cause side effects:
	   *
	   *  - `this` expressions
	   *  - `super` expressions
	   *  - Bound identifiers
	   */
	
	  Scope.prototype.isStatic = function isStatic(node /*: Object*/) /*: boolean*/ {
	    if (t.isThisExpression(node) || t.isSuper(node)) {
	      return true;
	    }
	
	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding) {
	        return binding.constant;
	      } else {
	        return this.hasBinding(node.name);
	      }
	    }
	
	    return false;
	  };
	
	  /**
	   * Possibly generate a memoised identifier if it is not static and has consequences.
	   */
	
	  Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node /*: Object*/, dontPush /*:: ?: boolean*/) /*: ?Object*/ {
	    if (this.isStatic(node)) {
	      return null;
	    } else {
	      var _id2 = this.generateUidIdentifierBasedOnNode(node);
	      if (!dontPush) this.push({ id: _id2 });
	      return _id2;
	    }
	  };
	
	  Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind /*: string*/, name /*: string*/, id /*: Object*/) {
	    // ignore parameters
	    if (kind === "param") return;
	
	    // ignore hoisted functions if there's also a local let
	    if (kind === "hoisted" && local.kind === "let") return;
	
	    var duplicate = false;
	
	    // don't allow duplicate bindings to exist alongside
	    if (!duplicate) duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";
	
	    // don't allow a local of param with a kind of let
	    if (!duplicate) duplicate = local.kind === "param" && (kind === "let" || kind === "const");
	
	    if (duplicate) {
	      throw this.hub.file.buildCodeFrameError(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
	    }
	  };
	
	  Scope.prototype.rename = function rename(oldName /*: string*/, newName /*: string*/, block /*:: ?*/) {
	    var binding = this.getBinding(oldName);
	    if (binding) {
	      newName = newName || this.generateUidIdentifier(oldName).name;
	      return new _libRenamer2["default"](binding, oldName, newName).rename(block);
	    }
	  };
	
	  Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
	    if (map[oldName]) {
	      map[newName] = value;
	      map[oldName] = null;
	    }
	  };
	
	  Scope.prototype.dump = function dump() {
	    var sep = _repeating2["default"]("-", 60);
	    console.log(sep);
	    var scope = this;
	    do {
	      console.log("#", scope.block.type);
	      for (var _name2 in scope.bindings) {
	        var binding = scope.bindings[_name2];
	        console.log(" -", _name2, {
	          constant: binding.constant,
	          references: binding.references,
	          violations: binding.constantViolations.length,
	          kind: binding.kind
	        });
	      }
	    } while (scope = scope.parent);
	    console.log(sep);
	  };
	
	  Scope.prototype.toArray = function toArray(node /*: Object*/, i /*:: ?: number*/) {
	    var file = this.hub.file;
	
	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding && binding.constant && binding.path.isGenericType("Array")) return node;
	    }
	
	    if (t.isArrayExpression(node)) {
	      return node;
	    }
	
	    if (t.isIdentifier(node, { name: "arguments" })) {
	      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Array"), t.identifier("prototype")), t.identifier("slice")), t.identifier("call")), [node]);
	    }
	
	    var helperName = "toArray";
	    var args = [node];
	    if (i === true) {
	      helperName = "toConsumableArray";
	    } else if (i) {
	      args.push(t.numericLiteral(i));
	      helperName = "slicedToArray";
	      // TODO if (this.hub.file.isLoose("es6.forOf")) helperName += "-loose";
	    }
	    return t.callExpression(file.addHelper(helperName), args);
	  };
	
	  Scope.prototype.registerDeclaration = function registerDeclaration(path /*: NodePath*/) {
	    if (path.isLabeledStatement()) {
	      this.registerBinding("label", path);
	    } else if (path.isFunctionDeclaration()) {
	      this.registerBinding("hoisted", path.get("id"), path);
	    } else if (path.isVariableDeclaration()) {
	      var declarations = path.get("declarations");
	      for (var _iterator7 = (declarations /*: Array*/), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
	        var _ref7;
	
	        if (_isArray7) {
	          if (_i7 >= _iterator7.length) break;
	          _ref7 = _iterator7[_i7++];
	        } else {
	          _i7 = _iterator7.next();
	          if (_i7.done) break;
	          _ref7 = _i7.value;
	        }
	
	        var declar = _ref7;
	
	        this.registerBinding(path.node.kind, declar);
	      }
	    } else if (path.isClassDeclaration()) {
	      this.registerBinding("let", path);
	    } else if (path.isImportDeclaration()) {
	      var specifiers = path.get("specifiers");
	      for (var _iterator8 = (specifiers /*: Array*/), _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _getIterator(_iterator8);;) {
	        var _ref8;
	
	        if (_isArray8) {
	          if (_i8 >= _iterator8.length) break;
	          _ref8 = _iterator8[_i8++];
	        } else {
	          _i8 = _iterator8.next();
	          if (_i8.done) break;
	          _ref8 = _i8.value;
	        }
	
	        var specifier = _ref8;
	
	        this.registerBinding("module", specifier);
	      }
	    } else if (path.isExportDeclaration()) {
	      var declar = path.get("declaration");
	      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
	        this.registerDeclaration(declar);
	      }
	    } else {
	      this.registerBinding("unknown", path);
	    }
	  };
	
	  Scope.prototype.buildUndefinedNode = function buildUndefinedNode() {
	    if (this.hasBinding("undefined")) {
	      return t.unaryExpression("void", t.numericLiteral(0), true);
	    } else {
	      return t.identifier("undefined");
	    }
	  };
	
	  Scope.prototype.registerConstantViolation = function registerConstantViolation(path /*: NodePath*/) {
	    var ids = path.getBindingIdentifiers();
	    for (var _name3 in ids) {
	      var binding = this.getBinding(_name3);
	      if (binding) binding.reassign(path);
	    }
	  };
	
	  Scope.prototype.registerBinding = function registerBinding(kind /*: string*/, path /*: NodePath*/) {
	    var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];
	    return (function () {
	      if (!kind) throw new ReferenceError("no `kind`");
	
	      if (path.isVariableDeclaration()) {
	        var declarators /*: Array<NodePath>*/ = path.get("declarations");
	        for (var _iterator9 = declarators, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _getIterator(_iterator9);;) {
	          var _ref9;
	
	          if (_isArray9) {
	            if (_i9 >= _iterator9.length) break;
	            _ref9 = _iterator9[_i9++];
	          } else {
	            _i9 = _iterator9.next();
	            if (_i9.done) break;
	            _ref9 = _i9.value;
	          }
	
	          var declar = _ref9;
	
	          this.registerBinding(kind, declar);
	        }
	        return;
	      }
	
	      var parent = this.getProgramParent();
	      var ids = path.getBindingIdentifiers(true);
	
	      for (var _name4 in ids) {
	        for (var _iterator10 = (ids[_name4] /*: Array<Object>*/), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _getIterator(_iterator10);;) {
	          var _ref10;
	
	          if (_isArray10) {
	            if (_i10 >= _iterator10.length) break;
	            _ref10 = _iterator10[_i10++];
	          } else {
	            _i10 = _iterator10.next();
	            if (_i10.done) break;
	            _ref10 = _i10.value;
	          }
	
	          var _id3 = _ref10;
	
	          var local = this.getOwnBinding(_name4);
	          if (local) {
	            // same identifier so continue safely as we're likely trying to register it
	            // multiple times
	            if (local.identifier === _id3) continue;
	
	            this.checkBlockScopedCollisions(local, kind, _name4, _id3);
	          }
	
	          parent.references[_name4] = true;
	
	          this.bindings[_name4] = new _binding2["default"]({
	            identifier: _id3,
	            existing: local,
	            scope: this,
	            path: bindingPath,
	            kind: kind
	          });
	        }
	      }
	    }).apply(this, arguments);
	  };
	
	  Scope.prototype.addGlobal = function addGlobal(node /*: Object*/) {
	    this.globals[node.name] = node;
	  };
	
	  Scope.prototype.hasUid = function hasUid(name) /*: boolean*/ {
	    var scope = this;
	
	    do {
	      if (scope.uids[name]) return true;
	    } while (scope = scope.parent);
	
	    return false;
	  };
	
	  Scope.prototype.hasGlobal = function hasGlobal(name /*: string*/) /*: boolean*/ {
	    var scope = this;
	
	    do {
	      if (scope.globals[name]) return true;
	    } while (scope = scope.parent);
	
	    return false;
	  };
	
	  Scope.prototype.hasReference = function hasReference(name /*: string*/) /*: boolean*/ {
	    var scope = this;
	
	    do {
	      if (scope.references[name]) return true;
	    } while (scope = scope.parent);
	
	    return false;
	  };
	
	  Scope.prototype.isPure = function isPure(node, constantsOnly /*:: ?: boolean*/) {
	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (!binding) return false;
	      if (constantsOnly) return binding.constant;
	      return true;
	    } else if (t.isClass(node)) {
	      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) return false;
	      return this.isPure(node.body, constantsOnly);
	    } else if (t.isClassBody(node)) {
	      for (var _iterator11 = node.body, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _getIterator(_iterator11);;) {
	        var _ref11;
	
	        if (_isArray11) {
	          if (_i11 >= _iterator11.length) break;
	          _ref11 = _iterator11[_i11++];
	        } else {
	          _i11 = _iterator11.next();
	          if (_i11.done) break;
	          _ref11 = _i11.value;
	        }
	
	        var method = _ref11;
	
	        if (!this.isPure(method, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isBinary(node)) {
	      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
	    } else if (t.isArrayExpression(node)) {
	      for (var _iterator12 = (node.elements /*: Array<Object>*/), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _getIterator(_iterator12);;) {
	        var _ref12;
	
	        if (_isArray12) {
	          if (_i12 >= _iterator12.length) break;
	          _ref12 = _iterator12[_i12++];
	        } else {
	          _i12 = _iterator12.next();
	          if (_i12.done) break;
	          _ref12 = _i12.value;
	        }
	
	        var elem = _ref12;
	
	        if (!this.isPure(elem, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isObjectExpression(node)) {
	      for (var _iterator13 = (node.properties /*: Array<Object>*/), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _getIterator(_iterator13);;) {
	        var _ref13;
	
	        if (_isArray13) {
	          if (_i13 >= _iterator13.length) break;
	          _ref13 = _iterator13[_i13++];
	        } else {
	          _i13 = _iterator13.next();
	          if (_i13.done) break;
	          _ref13 = _i13.value;
	        }
	
	        var prop = _ref13;
	
	        if (!this.isPure(prop, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isClassMethod(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      if (node.kind === "get" || node.kind === "set") return false;
	      return true;
	    } else if (t.isClassProperty(node) || t.isObjectProperty(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      return this.isPure(node.value, constantsOnly);
	    } else if (t.isUnaryExpression(node)) {
	      return this.isPure(node.argument, constantsOnly);
	    } else {
	      return t.isPureish(node);
	    }
	  };
	
	  /**
	   * Set some arbitrary data on the current scope.
	   */
	
	  Scope.prototype.setData = function setData(key, val) {
	    return this.data[key] = val;
	  };
	
	  /**
	   * Recursively walk up scope tree looking for the data `key`.
	   */
	
	  Scope.prototype.getData = function getData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) return data;
	    } while (scope = scope.parent);
	  };
	
	  /**
	   * Recursively walk up scope tree looking for the data `key` and if it exists,
	   * remove it.
	   */
	
	  Scope.prototype.removeData = function removeData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) scope.data[key] = null;
	    } while (scope = scope.parent);
	  };
	
	  Scope.prototype.init = function init() {
	    if (!this.references) this.crawl();
	  };
	
	  Scope.prototype.crawl = function crawl() {
	    var path = this.path;
	
	    //
	
	    this.references = _Object$create(null);
	    this.bindings = _Object$create(null);
	    this.globals = _Object$create(null);
	    this.uids = _Object$create(null);
	    this.data = _Object$create(null);
	
	    // ForStatement - left, init
	
	    if (path.isLoop()) {
	      for (var _iterator14 = (t.FOR_INIT_KEYS /*: Array<string>*/), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _getIterator(_iterator14);;) {
	        var _ref14;
	
	        if (_isArray14) {
	          if (_i14 >= _iterator14.length) break;
	          _ref14 = _iterator14[_i14++];
	        } else {
	          _i14 = _iterator14.next();
	          if (_i14.done) break;
	          _ref14 = _i14.value;
	        }
	
	        var key = _ref14;
	
	        var node = path.get(key);
	        if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);
	      }
	    }
	
	    // FunctionExpression - id
	
	    if (path.isFunctionExpression() && path.has("id")) {
	      if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
	        this.registerBinding("local", path.get("id"), path);
	      }
	    }
	
	    // Class
	
	    if (path.isClassExpression() && path.has("id")) {
	      if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
	        this.registerBinding("local", path);
	      }
	    }
	
	    // Function - params, rest
	
	    if (path.isFunction()) {
	      var params /*: Array<NodePath>*/ = path.get("params");
	      for (var _iterator15 = params, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _getIterator(_iterator15);;) {
	        var _ref15;
	
	        if (_isArray15) {
	          if (_i15 >= _iterator15.length) break;
	          _ref15 = _iterator15[_i15++];
	        } else {
	          _i15 = _iterator15.next();
	          if (_i15.done) break;
	          _ref15 = _i15.value;
	        }
	
	        var param = _ref15;
	
	        this.registerBinding("param", param);
	      }
	    }
	
	    // CatchClause - param
	
	    if (path.isCatchClause()) {
	      this.registerBinding("let", path);
	    }
	
	    // Program
	
	    var parent = this.getProgramParent();
	    if (parent.crawling) return;
	
	    var state = {
	      references: [],
	      constantViolations: [],
	      assignments: []
	    };
	
	    this.crawling = true;
	    path.traverse(collectorVisitor, state);
	    this.crawling = false;
	
	    // register assignments
	    for (var _iterator16 = state.assignments, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _getIterator(_iterator16);;) {
	      var _ref16;
	
	      if (_isArray16) {
	        if (_i16 >= _iterator16.length) break;
	        _ref16 = _iterator16[_i16++];
	      } else {
	        _i16 = _iterator16.next();
	        if (_i16.done) break;
	        _ref16 = _i16.value;
	      }
	
	      var _path = _ref16;
	
	      // register undeclared bindings as globals
	      var ids = _path.getBindingIdentifiers();
	      var programParent = undefined;
	      for (var _name5 in ids) {
	        if (_path.scope.getBinding(_name5)) continue;
	
	        programParent = programParent || _path.scope.getProgramParent();
	        programParent.addGlobal(ids[_name5]);
	      }
	
	      // register as constant violation
	      _path.scope.registerConstantViolation(_path);
	    }
	
	    // register references
	    for (var _iterator17 = state.references, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _getIterator(_iterator17);;) {
	      var _ref17;
	
	      if (_isArray17) {
	        if (_i17 >= _iterator17.length) break;
	        _ref17 = _iterator17[_i17++];
	      } else {
	        _i17 = _iterator17.next();
	        if (_i17.done) break;
	        _ref17 = _i17.value;
	      }
	
	      var ref = _ref17;
	
	      var binding = ref.scope.getBinding(ref.node.name);
	      if (binding) {
	        binding.reference(ref);
	      } else {
	        ref.scope.getProgramParent().addGlobal(ref.node);
	      }
	    }
	
	    // register constant violations
	    for (var _iterator18 = state.constantViolations, _isArray18 = Array.isArray(_iterator18), _i18 = 0, _iterator18 = _isArray18 ? _iterator18 : _getIterator(_iterator18);;) {
	      var _ref18;
	
	      if (_isArray18) {
	        if (_i18 >= _iterator18.length) break;
	        _ref18 = _iterator18[_i18++];
	      } else {
	        _i18 = _iterator18.next();
	        if (_i18.done) break;
	        _ref18 = _i18.value;
	      }
	
	      var _path2 = _ref18;
	
	      _path2.scope.registerConstantViolation(_path2);
	    }
	  };
	
	  Scope.prototype.push = function push(opts /*: {
	                                                id: Object;
	                                                init: ?Object;
	                                                unique: ?boolean;
	                                                _blockHoist: ?number;
	                                                kind: "var" | "let";
	                                              }*/) {
	    var path = this.path;
	
	    if (!path.isBlockStatement() && !path.isProgram()) {
	      path = this.getBlockParent().path;
	    }
	
	    if (path.isSwitchStatement()) {
	      path = this.getFunctionParent().path;
	    }
	
	    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
	      t.ensureBlock(path.node);
	      path = path.get("body");
	    }
	
	    var unique = opts.unique;
	    var kind = opts.kind || "var";
	    var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
	
	    var dataKey = "declaration:" + kind + ":" + blockHoist;
	    var declarPath = !unique && path.getData(dataKey);
	
	    if (!declarPath) {
	      var declar = t.variableDeclaration(kind, []);
	      declar._generated = true;
	      declar._blockHoist = blockHoist;
	
	      var _path$unshiftContainer = path.unshiftContainer("body", [declar]);
	
	      declarPath = _path$unshiftContainer[0];
	
	      if (!unique) path.setData(dataKey, declarPath);
	    }
	
	    var declarator = t.variableDeclarator(opts.id, opts.init);
	    declarPath.node.declarations.push(declarator);
	    this.registerBinding(kind, declarPath.get("declarations").pop());
	  };
	
	  /**
	   * Walk up to the top of the scope tree and get the `Program`.
	   */
	
	  Scope.prototype.getProgramParent = function getProgramParent() {
	    var scope = this;
	    do {
	      if (scope.path.isProgram()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };
	
	  /**
	   * Walk up the scope tree until we hit either a Function or reach the
	   * very top and hit Program.
	   */
	
	  Scope.prototype.getFunctionParent = function getFunctionParent() {
	    var scope = this;
	    do {
	      if (scope.path.isFunctionParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };
	
	  /**
	   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the
	   * very top and hit Program.
	   */
	
	  Scope.prototype.getBlockParent = function getBlockParent() {
	    var scope = this;
	    do {
	      if (scope.path.isBlockParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
	  };
	
	  /**
	   * Walks the scope tree and gathers **all** bindings.
	   */
	
	  Scope.prototype.getAllBindings = function getAllBindings() /*: Object*/ {
	    var ids = _Object$create(null);
	
	    var scope = this;
	    do {
	      _lodashObjectDefaults2["default"](ids, scope.bindings);
	      scope = scope.parent;
	    } while (scope);
	
	    return ids;
	  };
	
	  /**
	   * Walks the scope tree and gathers all declarations of `kind`.
	   */
	
	  Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() /*: Object*/ {
	    var ids = _Object$create(null);
	
	    for (var _iterator19 = (arguments /*: Array*/), _isArray19 = Array.isArray(_iterator19), _i19 = 0, _iterator19 = _isArray19 ? _iterator19 : _getIterator(_iterator19);;) {
	      var _ref19;
	
	      if (_isArray19) {
	        if (_i19 >= _iterator19.length) break;
	        _ref19 = _iterator19[_i19++];
	      } else {
	        _i19 = _iterator19.next();
	        if (_i19.done) break;
	        _ref19 = _i19.value;
	      }
	
	      var kind = _ref19;
	
	      var scope = this;
	      do {
	        for (var _name6 in scope.bindings) {
	          var binding = scope.bindings[_name6];
	          if (binding.kind === kind) ids[_name6] = binding;
	        }
	        scope = scope.parent;
	      } while (scope);
	    }
	
	    return ids;
	  };
	
	  Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name /*: string*/, node /*: Object*/) /*: boolean*/ {
	    return this.getBindingIdentifier(name) === node;
	  };
	
	  Scope.prototype.getBinding = function getBinding(name /*: string*/) {
	    var scope = this;
	
	    do {
	      var binding = scope.getOwnBinding(name);
	      if (binding) return binding;
	    } while (scope = scope.parent);
	  };
	
	  Scope.prototype.getOwnBinding = function getOwnBinding(name /*: string*/) {
	    return this.bindings[name];
	  };
	
	  Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name /*: string*/) {
	    var info = this.getBinding(name);
	    return info && info.identifier;
	  };
	
	  Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name /*: string*/) {
	    var binding = this.bindings[name];
	    return binding && binding.identifier;
	  };
	
	  Scope.prototype.hasOwnBinding = function hasOwnBinding(name /*: string*/) {
	    return !!this.getOwnBinding(name);
	  };
	
	  Scope.prototype.hasBinding = function hasBinding(name /*: string*/, noGlobals /*:: ?*/) {
	    if (!name) return false;
	    if (this.hasOwnBinding(name)) return true;
	    if (this.parentHasBinding(name, noGlobals)) return true;
	    if (this.hasUid(name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.globals, name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.contextVariables, name)) return true;
	    return false;
	  };
	
	  Scope.prototype.parentHasBinding = function parentHasBinding(name /*: string*/, noGlobals /*:: ?*/) {
	    return this.parent && this.parent.hasBinding(name, noGlobals);
	  };
	
	  /**
	   * Move a binding of `name` to another `scope`.
	   */
	
	  Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	      info.scope = scope;
	      scope.bindings[name] = info;
	    }
	  };
	
	  Scope.prototype.removeOwnBinding = function removeOwnBinding(name /*: string*/) {
	    delete this.bindings[name];
	  };
	
	  Scope.prototype.removeBinding = function removeBinding(name /*: string*/) {
	    // clear literal binding
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	    }
	
	    // clear uids with this name - https://github.com/babel/babel/issues/2101
	    var scope = this;
	    do {
	      if (scope.uids[name]) {
	        scope.uids[name] = false;
	      }
	    } while (scope = scope.parent);
	  };
	
	  return Scope;
	})();
	
	exports["default"] = Scope;
	module.exports = exports["default"];
	
	/**
	 * Variables available in current context.
	 */

/***/ },

/***/ "./node_modules/babel-traverse/lib/scope/lib/renamer.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _binding = __webpack_require__("./node_modules/babel-traverse/lib/scope/binding.js");
	
	var _binding2 = _interopRequireDefault(_binding);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var renameVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
	    var node = _ref.node;
	
	    if (node.name === state.oldName) {
	      node.name = state.newName;
	    }
	  },
	
	  Scope: function Scope(path, state) {
	    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
	      path.skip();
	    }
	  },
	
	  "AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(path, state) {
	    var ids = path.getOuterBindingIdentifiers();
	
	    for (var _name in ids) {
	      if (_name === state.oldName) ids[_name].name = state.newName;
	    }
	  }
	};
	
	var Renamer = (function () {
	  function Renamer(binding /*: Binding*/, oldName /*: string*/, newName /*: string*/) {
	    _classCallCheck(this, Renamer);
	
	    this.newName = newName;
	    this.oldName = oldName;
	    this.binding = binding;
	  }
	
	  Renamer.prototype.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(parentDeclar) {
	    var exportDeclar = parentDeclar.parentPath.isExportDeclaration() && parentDeclar.parentPath;
	    if (!exportDeclar) return;
	
	    // build specifiers that point back to this export declaration
	    var isDefault = exportDeclar.isExportDefaultDeclaration();
	
	    if (isDefault && (parentDeclar.isFunctionDeclaration() || parentDeclar.isClassDeclaration()) && !parentDeclar.node.id) {
	      // Ensure that default class and function exports have a name so they have a identifier to
	      // reference from the export specifier list.
	      parentDeclar.node.id = parentDeclar.scope.generateUidIdentifier("default");
	    }
	
	    var bindingIdentifiers = parentDeclar.getOuterBindingIdentifiers();
	    var specifiers = [];
	
	    for (var _name2 in bindingIdentifiers) {
	      var localName = _name2 === this.oldName ? this.newName : _name2;
	      var exportedName = isDefault ? "default" : _name2;
	      specifiers.push(t.exportSpecifier(t.identifier(localName), t.identifier(exportedName)));
	    }
	
	    var aliasDeclar = t.exportNamedDeclaration(null, specifiers);
	
	    // hoist to the top if it's a function
	    if (parentDeclar.isFunctionDeclaration()) {
	      aliasDeclar._blockHoist = 3;
	    }
	
	    exportDeclar.insertAfter(aliasDeclar);
	    exportDeclar.replaceWith(parentDeclar.node);
	  };
	
	  Renamer.prototype.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(path) {
	    return; // TODO
	
	    // retain the `name` of a class/function declaration
	
	    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;
	    if (this.binding.kind !== "hoisted") return;
	
	    path.node.id = t.identifier(this.oldName);
	    path.node._blockHoist = 3;
	
	    path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));
	  };
	
	  Renamer.prototype.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(path) {
	    return; // TODO
	
	    // retain the `name` of a class/function expression
	
	    if (!path.isFunctionExpression() && !path.isClassExpression()) return;
	    if (this.binding.kind !== "local") return;
	
	    path.node.id = t.identifier(this.oldName);
	
	    this.binding.scope.parent.push({
	      id: t.identifier(this.newName)
	    });
	
	    path.replaceWith(t.assignmentExpression("=", t.identifier(this.newName), path.node));
	  };
	
	  Renamer.prototype.rename = function rename(block /*:: ?*/) {
	    var binding = this.binding;
	    var oldName = this.oldName;
	    var newName = this.newName;
	    var scope = binding.scope;
	    var path = binding.path;
	
	    var parentDeclar = path.find(function (path) {
	      return path.isDeclaration() || path.isFunctionExpression();
	    });
	    if (parentDeclar) {
	      this.maybeConvertFromExportDeclaration(parentDeclar);
	    }
	
	    scope.traverse(block || scope.block, renameVisitor, this);
	
	    if (!block) {
	      scope.removeOwnBinding(oldName);
	      scope.bindings[newName] = binding;
	      this.binding.identifier.name = newName;
	    }
	
	    if (binding.type === "hoisted") {
	      // https://github.com/babel/babel/issues/2435
	      // todo: hoist and convert function to a let
	    }
	
	    if (parentDeclar) {
	      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
	      this.maybeConvertFromClassFunctionExpression(parentDeclar);
	    }
	  };
	
	  return Renamer;
	})();
	
	exports["default"] = Renamer;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/lib/scope/binding.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	exports.__esModule = true;
	
	/**
	 * This class is responsible for a binding inside of a scope.
	 *
	 * It tracks the following:
	 *
	 *  * Node path.
	 *  * Amount of times referenced by other nodes.
	 *  * Paths to nodes that reassign or modify this binding.
	 *  * The kind of binding. (Is it a parameter, declaration etc)
	 */
	
	/*:: import type NodePath from "../path";*/
	var Binding = (function () {
	  function Binding(_ref) {
	    var existing = _ref.existing;
	    var identifier = _ref.identifier;
	    var scope = _ref.scope;
	    var path = _ref.path;
	    var kind = _ref.kind;
	
	    _classCallCheck(this, Binding);
	
	    this.identifier = identifier;
	    this.scope = scope;
	    this.path = path;
	    this.kind = kind;
	
	    this.constantViolations = [];
	    this.constant = true;
	
	    this.referencePaths = [];
	    this.referenced = false;
	    this.references = 0;
	
	    this.clearValue();
	
	    if (existing) {
	      this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
	    }
	  }
	
	  Binding.prototype.deoptValue = function deoptValue() {
	    this.clearValue();
	    this.hasDeoptedValue = true;
	  };
	
	  Binding.prototype.setValue = function setValue(value /*: any*/) {
	    if (this.hasDeoptedValue) return;
	    this.hasValue = true;
	    this.value = value;
	  };
	
	  Binding.prototype.clearValue = function clearValue() {
	    this.hasDeoptedValue = false;
	    this.hasValue = false;
	    this.value = null;
	  };
	
	  /**
	   * Register a constant violation with the provided `path`.
	   */
	
	  Binding.prototype.reassign = function reassign(path /*: Object*/) {
	    this.constant = false;
	    this.constantViolations.push(path);
	  };
	
	  /**
	   * Increment the amount of references to this binding.
	   */
	
	  Binding.prototype.reference = function reference(path /*: NodePath*/) {
	    this.referenced = true;
	    this.references++;
	    this.referencePaths.push(path);
	  };
	
	  /**
	   * Decrement the amount of references to this binding.
	   */
	
	  Binding.prototype.dereference = function dereference() {
	    this.references--;
	    this.referenced = !!this.references;
	  };
	
	  return Binding;
	})();
	
	exports["default"] = Binding;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/node_modules/globals/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__("./node_modules/babel-traverse/node_modules/globals/globals.json");


/***/ },

/***/ "./node_modules/babel-traverse/node_modules/globals/globals.json":
/***/ function(module, exports) {

	module.exports = {
		"builtin": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"es5": {
			"Array": false,
			"Boolean": false,
			"constructor": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"propertyIsEnumerable": false,
			"RangeError": false,
			"ReferenceError": false,
			"RegExp": false,
			"String": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false
		},
		"es6": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"browser": {
			"addEventListener": false,
			"alert": false,
			"AnalyserNode": false,
			"AnimationEvent": false,
			"applicationCache": false,
			"ApplicationCache": false,
			"ApplicationCacheErrorEvent": false,
			"atob": false,
			"Attr": false,
			"Audio": false,
			"AudioBuffer": false,
			"AudioBufferSourceNode": false,
			"AudioContext": false,
			"AudioDestinationNode": false,
			"AudioListener": false,
			"AudioNode": false,
			"AudioParam": false,
			"AudioProcessingEvent": false,
			"AutocompleteErrorEvent": false,
			"BarProp": false,
			"BatteryManager": false,
			"BeforeUnloadEvent": false,
			"BiquadFilterNode": false,
			"Blob": false,
			"blur": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"CacheStorage": false,
			"cancelAnimationFrame": false,
			"CanvasGradient": false,
			"CanvasPattern": false,
			"CanvasRenderingContext2D": false,
			"CDATASection": false,
			"ChannelMergerNode": false,
			"ChannelSplitterNode": false,
			"CharacterData": false,
			"clearInterval": false,
			"clearTimeout": false,
			"clientInformation": false,
			"ClientRect": false,
			"ClientRectList": false,
			"ClipboardEvent": false,
			"close": false,
			"closed": false,
			"CloseEvent": false,
			"Comment": false,
			"CompositionEvent": false,
			"confirm": false,
			"console": false,
			"ConvolverNode": false,
			"crypto": false,
			"Crypto": false,
			"CryptoKey": false,
			"CSS": false,
			"CSSFontFaceRule": false,
			"CSSImportRule": false,
			"CSSKeyframeRule": false,
			"CSSKeyframesRule": false,
			"CSSMediaRule": false,
			"CSSPageRule": false,
			"CSSRule": false,
			"CSSRuleList": false,
			"CSSStyleDeclaration": false,
			"CSSStyleRule": false,
			"CSSStyleSheet": false,
			"CSSSupportsRule": false,
			"CSSUnknownRule": false,
			"CSSViewportRule": false,
			"CustomEvent": false,
			"DataTransfer": false,
			"DataTransferItem": false,
			"DataTransferItemList": false,
			"Debug": false,
			"defaultStatus": false,
			"defaultstatus": false,
			"DelayNode": false,
			"DeviceMotionEvent": false,
			"DeviceOrientationEvent": false,
			"devicePixelRatio": false,
			"dispatchEvent": false,
			"document": false,
			"Document": false,
			"DocumentFragment": false,
			"DocumentType": false,
			"DOMError": false,
			"DOMException": false,
			"DOMImplementation": false,
			"DOMParser": false,
			"DOMSettableTokenList": false,
			"DOMStringList": false,
			"DOMStringMap": false,
			"DOMTokenList": false,
			"DragEvent": false,
			"DynamicsCompressorNode": false,
			"Element": false,
			"ElementTimeControl": false,
			"ErrorEvent": false,
			"event": false,
			"Event": false,
			"EventSource": false,
			"EventTarget": false,
			"external": false,
			"fetch": false,
			"File": false,
			"FileError": false,
			"FileList": false,
			"FileReader": false,
			"find": false,
			"focus": false,
			"FocusEvent": false,
			"FontFace": false,
			"FormData": false,
			"frameElement": false,
			"frames": false,
			"GainNode": false,
			"Gamepad": false,
			"GamepadButton": false,
			"GamepadEvent": false,
			"getComputedStyle": false,
			"getSelection": false,
			"HashChangeEvent": false,
			"Headers": false,
			"history": false,
			"History": false,
			"HTMLAllCollection": false,
			"HTMLAnchorElement": false,
			"HTMLAppletElement": false,
			"HTMLAreaElement": false,
			"HTMLAudioElement": false,
			"HTMLBaseElement": false,
			"HTMLBlockquoteElement": false,
			"HTMLBodyElement": false,
			"HTMLBRElement": false,
			"HTMLButtonElement": false,
			"HTMLCanvasElement": false,
			"HTMLCollection": false,
			"HTMLContentElement": false,
			"HTMLDataListElement": false,
			"HTMLDetailsElement": false,
			"HTMLDialogElement": false,
			"HTMLDirectoryElement": false,
			"HTMLDivElement": false,
			"HTMLDListElement": false,
			"HTMLDocument": false,
			"HTMLElement": false,
			"HTMLEmbedElement": false,
			"HTMLFieldSetElement": false,
			"HTMLFontElement": false,
			"HTMLFormControlsCollection": false,
			"HTMLFormElement": false,
			"HTMLFrameElement": false,
			"HTMLFrameSetElement": false,
			"HTMLHeadElement": false,
			"HTMLHeadingElement": false,
			"HTMLHRElement": false,
			"HTMLHtmlElement": false,
			"HTMLIFrameElement": false,
			"HTMLImageElement": false,
			"HTMLInputElement": false,
			"HTMLIsIndexElement": false,
			"HTMLKeygenElement": false,
			"HTMLLabelElement": false,
			"HTMLLayerElement": false,
			"HTMLLegendElement": false,
			"HTMLLIElement": false,
			"HTMLLinkElement": false,
			"HTMLMapElement": false,
			"HTMLMarqueeElement": false,
			"HTMLMediaElement": false,
			"HTMLMenuElement": false,
			"HTMLMetaElement": false,
			"HTMLMeterElement": false,
			"HTMLModElement": false,
			"HTMLObjectElement": false,
			"HTMLOListElement": false,
			"HTMLOptGroupElement": false,
			"HTMLOptionElement": false,
			"HTMLOptionsCollection": false,
			"HTMLOutputElement": false,
			"HTMLParagraphElement": false,
			"HTMLParamElement": false,
			"HTMLPictureElement": false,
			"HTMLPreElement": false,
			"HTMLProgressElement": false,
			"HTMLQuoteElement": false,
			"HTMLScriptElement": false,
			"HTMLSelectElement": false,
			"HTMLShadowElement": false,
			"HTMLSourceElement": false,
			"HTMLSpanElement": false,
			"HTMLStyleElement": false,
			"HTMLTableCaptionElement": false,
			"HTMLTableCellElement": false,
			"HTMLTableColElement": false,
			"HTMLTableElement": false,
			"HTMLTableRowElement": false,
			"HTMLTableSectionElement": false,
			"HTMLTemplateElement": false,
			"HTMLTextAreaElement": false,
			"HTMLTitleElement": false,
			"HTMLTrackElement": false,
			"HTMLUListElement": false,
			"HTMLUnknownElement": false,
			"HTMLVideoElement": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBEnvironment": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"Image": false,
			"ImageBitmap": false,
			"ImageData": false,
			"indexedDB": false,
			"innerHeight": false,
			"innerWidth": false,
			"InputEvent": false,
			"InputMethodContext": false,
			"Intl": false,
			"KeyboardEvent": false,
			"length": false,
			"localStorage": false,
			"location": false,
			"Location": false,
			"locationbar": false,
			"matchMedia": false,
			"MediaElementAudioSourceNode": false,
			"MediaEncryptedEvent": false,
			"MediaError": false,
			"MediaKeyError": false,
			"MediaKeyEvent": false,
			"MediaKeyMessageEvent": false,
			"MediaKeys": false,
			"MediaKeySession": false,
			"MediaKeyStatusMap": false,
			"MediaKeySystemAccess": false,
			"MediaList": false,
			"MediaQueryList": false,
			"MediaQueryListEvent": false,
			"MediaSource": false,
			"MediaStreamAudioDestinationNode": false,
			"MediaStreamAudioSourceNode": false,
			"MediaStreamEvent": false,
			"MediaStreamTrack": false,
			"menubar": false,
			"MessageChannel": false,
			"MessageEvent": false,
			"MessagePort": false,
			"MIDIAccess": false,
			"MIDIConnectionEvent": false,
			"MIDIInput": false,
			"MIDIInputMap": false,
			"MIDIMessageEvent": false,
			"MIDIOutput": false,
			"MIDIOutputMap": false,
			"MIDIPort": false,
			"MimeType": false,
			"MimeTypeArray": false,
			"MouseEvent": false,
			"moveBy": false,
			"moveTo": false,
			"MutationEvent": false,
			"MutationObserver": false,
			"MutationRecord": false,
			"name": false,
			"NamedNodeMap": false,
			"navigator": false,
			"Navigator": false,
			"Node": false,
			"NodeFilter": false,
			"NodeIterator": false,
			"NodeList": false,
			"Notification": false,
			"OfflineAudioCompletionEvent": false,
			"OfflineAudioContext": false,
			"offscreenBuffering": false,
			"onbeforeunload": true,
			"onblur": true,
			"onerror": true,
			"onfocus": true,
			"onload": true,
			"onresize": true,
			"onunload": true,
			"open": false,
			"openDatabase": false,
			"opener": false,
			"opera": false,
			"Option": false,
			"OscillatorNode": false,
			"outerHeight": false,
			"outerWidth": false,
			"PageTransitionEvent": false,
			"pageXOffset": false,
			"pageYOffset": false,
			"parent": false,
			"Path2D": false,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"PeriodicWave": false,
			"Permissions": false,
			"PermissionStatus": false,
			"personalbar": false,
			"Plugin": false,
			"PluginArray": false,
			"PopStateEvent": false,
			"postMessage": false,
			"print": false,
			"ProcessingInstruction": false,
			"ProgressEvent": false,
			"prompt": false,
			"PushManager": false,
			"PushSubscription": false,
			"RadioNodeList": false,
			"Range": false,
			"ReadableByteStream": false,
			"ReadableStream": false,
			"removeEventListener": false,
			"Request": false,
			"requestAnimationFrame": false,
			"resizeBy": false,
			"resizeTo": false,
			"Response": false,
			"RTCIceCandidate": false,
			"RTCSessionDescription": false,
			"screen": false,
			"Screen": false,
			"screenLeft": false,
			"ScreenOrientation": false,
			"screenTop": false,
			"screenX": false,
			"screenY": false,
			"ScriptProcessorNode": false,
			"scroll": false,
			"scrollbars": false,
			"scrollBy": false,
			"scrollTo": false,
			"scrollX": false,
			"scrollY": false,
			"SecurityPolicyViolationEvent": false,
			"Selection": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerRegistration": false,
			"sessionStorage": false,
			"setInterval": false,
			"setTimeout": false,
			"ShadowRoot": false,
			"SharedWorker": false,
			"showModalDialog": false,
			"speechSynthesis": false,
			"SpeechSynthesisEvent": false,
			"SpeechSynthesisUtterance": false,
			"status": false,
			"statusbar": false,
			"stop": false,
			"Storage": false,
			"StorageEvent": false,
			"styleMedia": false,
			"StyleSheet": false,
			"StyleSheetList": false,
			"SubtleCrypto": false,
			"SVGAElement": false,
			"SVGAltGlyphDefElement": false,
			"SVGAltGlyphElement": false,
			"SVGAltGlyphItemElement": false,
			"SVGAngle": false,
			"SVGAnimateColorElement": false,
			"SVGAnimatedAngle": false,
			"SVGAnimatedBoolean": false,
			"SVGAnimatedEnumeration": false,
			"SVGAnimatedInteger": false,
			"SVGAnimatedLength": false,
			"SVGAnimatedLengthList": false,
			"SVGAnimatedNumber": false,
			"SVGAnimatedNumberList": false,
			"SVGAnimatedPathData": false,
			"SVGAnimatedPoints": false,
			"SVGAnimatedPreserveAspectRatio": false,
			"SVGAnimatedRect": false,
			"SVGAnimatedString": false,
			"SVGAnimatedTransformList": false,
			"SVGAnimateElement": false,
			"SVGAnimateMotionElement": false,
			"SVGAnimateTransformElement": false,
			"SVGAnimationElement": false,
			"SVGCircleElement": false,
			"SVGClipPathElement": false,
			"SVGColor": false,
			"SVGColorProfileElement": false,
			"SVGColorProfileRule": false,
			"SVGComponentTransferFunctionElement": false,
			"SVGCSSRule": false,
			"SVGCursorElement": false,
			"SVGDefsElement": false,
			"SVGDescElement": false,
			"SVGDiscardElement": false,
			"SVGDocument": false,
			"SVGElement": false,
			"SVGElementInstance": false,
			"SVGElementInstanceList": false,
			"SVGEllipseElement": false,
			"SVGEvent": false,
			"SVGExternalResourcesRequired": false,
			"SVGFEBlendElement": false,
			"SVGFEColorMatrixElement": false,
			"SVGFEComponentTransferElement": false,
			"SVGFECompositeElement": false,
			"SVGFEConvolveMatrixElement": false,
			"SVGFEDiffuseLightingElement": false,
			"SVGFEDisplacementMapElement": false,
			"SVGFEDistantLightElement": false,
			"SVGFEDropShadowElement": false,
			"SVGFEFloodElement": false,
			"SVGFEFuncAElement": false,
			"SVGFEFuncBElement": false,
			"SVGFEFuncGElement": false,
			"SVGFEFuncRElement": false,
			"SVGFEGaussianBlurElement": false,
			"SVGFEImageElement": false,
			"SVGFEMergeElement": false,
			"SVGFEMergeNodeElement": false,
			"SVGFEMorphologyElement": false,
			"SVGFEOffsetElement": false,
			"SVGFEPointLightElement": false,
			"SVGFESpecularLightingElement": false,
			"SVGFESpotLightElement": false,
			"SVGFETileElement": false,
			"SVGFETurbulenceElement": false,
			"SVGFilterElement": false,
			"SVGFilterPrimitiveStandardAttributes": false,
			"SVGFitToViewBox": false,
			"SVGFontElement": false,
			"SVGFontFaceElement": false,
			"SVGFontFaceFormatElement": false,
			"SVGFontFaceNameElement": false,
			"SVGFontFaceSrcElement": false,
			"SVGFontFaceUriElement": false,
			"SVGForeignObjectElement": false,
			"SVGGElement": false,
			"SVGGeometryElement": false,
			"SVGGlyphElement": false,
			"SVGGlyphRefElement": false,
			"SVGGradientElement": false,
			"SVGGraphicsElement": false,
			"SVGHKernElement": false,
			"SVGICCColor": false,
			"SVGImageElement": false,
			"SVGLangSpace": false,
			"SVGLength": false,
			"SVGLengthList": false,
			"SVGLinearGradientElement": false,
			"SVGLineElement": false,
			"SVGLocatable": false,
			"SVGMarkerElement": false,
			"SVGMaskElement": false,
			"SVGMatrix": false,
			"SVGMetadataElement": false,
			"SVGMissingGlyphElement": false,
			"SVGMPathElement": false,
			"SVGNumber": false,
			"SVGNumberList": false,
			"SVGPaint": false,
			"SVGPathElement": false,
			"SVGPathSeg": false,
			"SVGPathSegArcAbs": false,
			"SVGPathSegArcRel": false,
			"SVGPathSegClosePath": false,
			"SVGPathSegCurvetoCubicAbs": false,
			"SVGPathSegCurvetoCubicRel": false,
			"SVGPathSegCurvetoCubicSmoothAbs": false,
			"SVGPathSegCurvetoCubicSmoothRel": false,
			"SVGPathSegCurvetoQuadraticAbs": false,
			"SVGPathSegCurvetoQuadraticRel": false,
			"SVGPathSegCurvetoQuadraticSmoothAbs": false,
			"SVGPathSegCurvetoQuadraticSmoothRel": false,
			"SVGPathSegLinetoAbs": false,
			"SVGPathSegLinetoHorizontalAbs": false,
			"SVGPathSegLinetoHorizontalRel": false,
			"SVGPathSegLinetoRel": false,
			"SVGPathSegLinetoVerticalAbs": false,
			"SVGPathSegLinetoVerticalRel": false,
			"SVGPathSegList": false,
			"SVGPathSegMovetoAbs": false,
			"SVGPathSegMovetoRel": false,
			"SVGPatternElement": false,
			"SVGPoint": false,
			"SVGPointList": false,
			"SVGPolygonElement": false,
			"SVGPolylineElement": false,
			"SVGPreserveAspectRatio": false,
			"SVGRadialGradientElement": false,
			"SVGRect": false,
			"SVGRectElement": false,
			"SVGRenderingIntent": false,
			"SVGScriptElement": false,
			"SVGSetElement": false,
			"SVGStopElement": false,
			"SVGStringList": false,
			"SVGStylable": false,
			"SVGStyleElement": false,
			"SVGSVGElement": false,
			"SVGSwitchElement": false,
			"SVGSymbolElement": false,
			"SVGTests": false,
			"SVGTextContentElement": false,
			"SVGTextElement": false,
			"SVGTextPathElement": false,
			"SVGTextPositioningElement": false,
			"SVGTitleElement": false,
			"SVGTransform": false,
			"SVGTransformable": false,
			"SVGTransformList": false,
			"SVGTRefElement": false,
			"SVGTSpanElement": false,
			"SVGUnitTypes": false,
			"SVGURIReference": false,
			"SVGUseElement": false,
			"SVGViewElement": false,
			"SVGViewSpec": false,
			"SVGVKernElement": false,
			"SVGZoomAndPan": false,
			"SVGZoomEvent": false,
			"Text": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"TextEvent": false,
			"TextMetrics": false,
			"TextTrack": false,
			"TextTrackCue": false,
			"TextTrackCueList": false,
			"TextTrackList": false,
			"TimeEvent": false,
			"TimeRanges": false,
			"toolbar": false,
			"top": false,
			"Touch": false,
			"TouchEvent": false,
			"TouchList": false,
			"TrackEvent": false,
			"TransitionEvent": false,
			"TreeWalker": false,
			"UIEvent": false,
			"URL": false,
			"ValidityState": false,
			"VTTCue": false,
			"WaveShaperNode": false,
			"WebGLActiveInfo": false,
			"WebGLBuffer": false,
			"WebGLContextEvent": false,
			"WebGLFramebuffer": false,
			"WebGLProgram": false,
			"WebGLRenderbuffer": false,
			"WebGLRenderingContext": false,
			"WebGLShader": false,
			"WebGLShaderPrecisionFormat": false,
			"WebGLTexture": false,
			"WebGLUniformLocation": false,
			"WebSocket": false,
			"WheelEvent": false,
			"window": false,
			"Window": false,
			"Worker": false,
			"XDomainRequest": false,
			"XMLDocument": false,
			"XMLHttpRequest": false,
			"XMLHttpRequestEventTarget": false,
			"XMLHttpRequestProgressEvent": false,
			"XMLHttpRequestUpload": false,
			"XMLSerializer": false,
			"XPathEvaluator": false,
			"XPathException": false,
			"XPathExpression": false,
			"XPathNamespace": false,
			"XPathNSResolver": false,
			"XPathResult": false,
			"XSLTProcessor": false
		},
		"worker": {
			"applicationCache": false,
			"atob": false,
			"Blob": false,
			"BroadcastChannel": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"clearInterval": false,
			"clearTimeout": false,
			"close": true,
			"console": false,
			"fetch": false,
			"FileReaderSync": false,
			"FormData": false,
			"Headers": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"ImageData": false,
			"importScripts": true,
			"indexedDB": false,
			"location": false,
			"MessageChannel": false,
			"MessagePort": false,
			"name": false,
			"navigator": false,
			"Notification": false,
			"onclose": true,
			"onconnect": true,
			"onerror": true,
			"onlanguagechange": true,
			"onmessage": true,
			"onoffline": true,
			"ononline": true,
			"onrejectionhandled": true,
			"onunhandledrejection": true,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"postMessage": true,
			"Promise": false,
			"Request": false,
			"Response": false,
			"self": true,
			"ServiceWorkerRegistration": false,
			"setInterval": false,
			"setTimeout": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"WebSocket": false,
			"Worker": false,
			"XMLHttpRequest": false
		},
		"node": {
			"__dirname": false,
			"__filename": false,
			"arguments": false,
			"Buffer": false,
			"clearImmediate": false,
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"exports": true,
			"GLOBAL": false,
			"global": false,
			"module": false,
			"process": false,
			"require": false,
			"root": false,
			"setImmediate": false,
			"setInterval": false,
			"setTimeout": false
		},
		"commonjs": {
			"exports": true,
			"module": false,
			"require": false,
			"global": false
		},
		"amd": {
			"define": false,
			"require": false
		},
		"mocha": {
			"after": false,
			"afterEach": false,
			"before": false,
			"beforeEach": false,
			"context": false,
			"describe": false,
			"it": false,
			"mocha": false,
			"setup": false,
			"specify": false,
			"suite": false,
			"suiteSetup": false,
			"suiteTeardown": false,
			"teardown": false,
			"test": false,
			"xcontext": false,
			"xdescribe": false,
			"xit": false,
			"xspecify": false
		},
		"jasmine": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fail": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jasmine": false,
			"pending": false,
			"runs": false,
			"spyOn": false,
			"waits": false,
			"waitsFor": false,
			"xdescribe": false,
			"xit": false
		},
		"jest": {
			"afterEach": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"it": false,
			"jest": false,
			"pit": false,
			"require": false,
			"xdescribe": false,
			"xit": false
		},
		"qunit": {
			"asyncTest": false,
			"deepEqual": false,
			"equal": false,
			"expect": false,
			"module": false,
			"notDeepEqual": false,
			"notEqual": false,
			"notOk": false,
			"notPropEqual": false,
			"notStrictEqual": false,
			"ok": false,
			"propEqual": false,
			"QUnit": false,
			"raises": false,
			"start": false,
			"stop": false,
			"strictEqual": false,
			"test": false,
			"throws": false
		},
		"phantomjs": {
			"console": true,
			"exports": true,
			"phantom": true,
			"require": true,
			"WebPage": true
		},
		"couch": {
			"emit": false,
			"exports": false,
			"getRow": false,
			"log": false,
			"module": false,
			"provides": false,
			"require": false,
			"respond": false,
			"send": false,
			"start": false,
			"sum": false
		},
		"rhino": {
			"defineClass": false,
			"deserialize": false,
			"gc": false,
			"help": false,
			"importClass": false,
			"importPackage": false,
			"java": false,
			"load": false,
			"loadClass": false,
			"Packages": false,
			"print": false,
			"quit": false,
			"readFile": false,
			"readUrl": false,
			"runCommand": false,
			"seal": false,
			"serialize": false,
			"spawn": false,
			"sync": false,
			"toint32": false,
			"version": false
		},
		"nashorn": {
			"__DIR__": false,
			"__FILE__": false,
			"__LINE__": false,
			"com": false,
			"edu": false,
			"exit": false,
			"Java": false,
			"java": false,
			"javafx": false,
			"JavaImporter": false,
			"javax": false,
			"JSAdapter": false,
			"load": false,
			"loadWithNewGlobal": false,
			"org": false,
			"Packages": false,
			"print": false,
			"quit": false
		},
		"wsh": {
			"ActiveXObject": true,
			"Enumerator": true,
			"GetObject": true,
			"ScriptEngine": true,
			"ScriptEngineBuildVersion": true,
			"ScriptEngineMajorVersion": true,
			"ScriptEngineMinorVersion": true,
			"VBArray": true,
			"WScript": true,
			"WSH": true,
			"XDomainRequest": true
		},
		"jquery": {
			"$": false,
			"jQuery": false
		},
		"yui": {
			"Y": false,
			"YUI": false,
			"YUI_config": false
		},
		"shelljs": {
			"cat": false,
			"cd": false,
			"chmod": false,
			"config": false,
			"cp": false,
			"dirs": false,
			"echo": false,
			"env": false,
			"error": false,
			"exec": false,
			"exit": false,
			"find": false,
			"grep": false,
			"ls": false,
			"ln": false,
			"mkdir": false,
			"mv": false,
			"popd": false,
			"pushd": false,
			"pwd": false,
			"rm": false,
			"sed": false,
			"target": false,
			"tempdir": false,
			"test": false,
			"which": false
		},
		"prototypejs": {
			"$": false,
			"$$": false,
			"$A": false,
			"$break": false,
			"$continue": false,
			"$F": false,
			"$H": false,
			"$R": false,
			"$w": false,
			"Abstract": false,
			"Ajax": false,
			"Autocompleter": false,
			"Builder": false,
			"Class": false,
			"Control": false,
			"Draggable": false,
			"Draggables": false,
			"Droppables": false,
			"Effect": false,
			"Element": false,
			"Enumerable": false,
			"Event": false,
			"Field": false,
			"Form": false,
			"Hash": false,
			"Insertion": false,
			"ObjectRange": false,
			"PeriodicalExecuter": false,
			"Position": false,
			"Prototype": false,
			"Scriptaculous": false,
			"Selector": false,
			"Sortable": false,
			"SortableObserver": false,
			"Sound": false,
			"Template": false,
			"Toggle": false,
			"Try": false
		},
		"meteor": {
			"$": false,
			"_": false,
			"Accounts": false,
			"App": false,
			"Assets": false,
			"Blaze": false,
			"check": false,
			"Cordova": false,
			"DDP": false,
			"DDPServer": false,
			"Deps": false,
			"EJSON": false,
			"Email": false,
			"HTTP": false,
			"Log": false,
			"Match": false,
			"Meteor": false,
			"Mongo": false,
			"MongoInternals": false,
			"Npm": false,
			"Package": false,
			"Plugin": false,
			"process": false,
			"Random": false,
			"ReactiveDict": false,
			"ReactiveVar": false,
			"Router": false,
			"Session": false,
			"share": false,
			"Spacebars": false,
			"Template": false,
			"Tinytest": false,
			"Tracker": false,
			"UI": false,
			"Utils": false,
			"WebApp": false,
			"WebAppInternals": false
		},
		"mongo": {
			"_isWindows": false,
			"_rand": false,
			"BulkWriteResult": false,
			"cat": false,
			"cd": false,
			"connect": false,
			"db": false,
			"getHostName": false,
			"getMemInfo": false,
			"hostname": false,
			"listFiles": false,
			"load": false,
			"ls": false,
			"md5sumFile": false,
			"mkdir": false,
			"Mongo": false,
			"ObjectId": false,
			"PlanCache": false,
			"print": false,
			"printjson": false,
			"pwd": false,
			"quit": false,
			"removeFile": false,
			"rs": false,
			"sh": false,
			"UUID": false,
			"version": false,
			"WriteResult": false
		},
		"applescript": {
			"$": false,
			"Application": false,
			"Automation": false,
			"console": false,
			"delay": false,
			"Library": false,
			"ObjC": false,
			"ObjectSpecifier": false,
			"Path": false,
			"Progress": false,
			"Ref": false
		},
		"serviceworker": {
			"caches": false,
			"Cache": false,
			"CacheStorage": false,
			"Client": false,
			"clients": false,
			"Clients": false,
			"ExtendableEvent": false,
			"ExtendableMessageEvent": false,
			"FetchEvent": false,
			"importScripts": false,
			"registration": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerGlobalScope": false,
			"ServiceWorkerMessageEvent": false,
			"ServiceWorkerRegistration": false,
			"skipWaiting": false,
			"WindowClient": false
		},
		"atomtest": {
			"advanceClock": false,
			"fakeClearInterval": false,
			"fakeClearTimeout": false,
			"fakeSetInterval": false,
			"fakeSetTimeout": false,
			"resetTimeouts": false,
			"waitsForPromise": false
		},
		"embertest": {
			"andThen": false,
			"click": false,
			"currentPath": false,
			"currentRouteName": false,
			"currentURL": false,
			"fillIn": false,
			"find": false,
			"findWithAssert": false,
			"keyEvent": false,
			"pauseTest": false,
			"triggerEvent": false,
			"visit": false
		},
		"protractor": {
			"$": false,
			"$$": false,
			"browser": false,
			"By": false,
			"by": false,
			"DartObject": false,
			"element": false,
			"protractor": false
		},
		"shared-node-browser": {
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"setInterval": false,
			"setTimeout": false
		},
		"webextensions": {
			"browser": false,
			"chrome": false,
			"opr": false
		},
		"greasemonkey": {
			"GM_addStyle": false,
			"GM_deleteValue": false,
			"GM_getResourceText": false,
			"GM_getResourceURL": false,
			"GM_getValue": false,
			"GM_info": false,
			"GM_listValues": false,
			"GM_log": false,
			"GM_openInTab": false,
			"GM_registerMenuCommand": false,
			"GM_setClipboard": false,
			"GM_setValue": false,
			"GM_xmlhttpRequest": false,
			"unsafeWindow": false
		}
	};

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/ancestry.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains that retrieve or validate anything related to the current paths ancestry.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	exports.findParent = findParent;
	exports.find = find;
	exports.getFunctionParent = getFunctionParent;
	exports.getStatementParent = getStatementParent;
	exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
	exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
	exports.getAncestry = getAncestry;
	exports.inType = inType;
	exports.inShadow = inShadow;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	/**
	 * Call the provided `callback` with the `NodePath`s of all the parents.
	 * When the `callback` returns a truthy value, we return that node path.
	 */
	
	function findParent(callback) {
	  var path = this;
	  while (path = path.parentPath) {
	    if (callback(path)) return path;
	  }
	  return null;
	}
	
	/**
	 * Description
	 */
	
	function find(callback) {
	  var path = this;
	  do {
	    if (callback(path)) return path;
	  } while (path = path.parentPath);
	  return null;
	}
	
	/**
	 * Get the parent function of the current path.
	 */
	
	function getFunctionParent() {
	  return this.findParent(function (path) {
	    return path.isFunction() || path.isProgram();
	  });
	}
	
	/**
	 * Walk up the tree until we hit a parent node path in a list.
	 */
	
	function getStatementParent() {
	  var path = this;
	  do {
	    if (Array.isArray(path.container)) {
	      return path;
	    }
	  } while (path = path.parentPath);
	}
	
	/**
	 * Get the deepest common ancestor and then from it, get the earliest relationship path
	 * to that ancestor.
	 *
	 * Earliest is defined as being "before" all the other nodes in terms of list container
	 * position and visiting key.
	 */
	
	function getEarliestCommonAncestorFrom(paths /*: Array<NodePath>*/) /*: NodePath*/ {
	  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
	    var earliest = undefined;
	    var keys = t.VISITOR_KEYS[deepest.type];
	
	    for (var _iterator = (ancestries /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var ancestry = _ref;
	
	      var path = ancestry[i + 1];
	
	      // first path
	      if (!earliest) {
	        earliest = path;
	        continue;
	      }
	
	      // handle containers
	      if (path.listKey && earliest.listKey === path.listKey) {
	        // we're in the same container so check if we're earlier
	        if (path.key < earliest.key) {
	          earliest = path;
	          continue;
	        }
	      }
	
	      // handle keys
	      var earliestKeyIndex = keys.indexOf(earliest.parentKey);
	      var currentKeyIndex = keys.indexOf(path.parentKey);
	      if (earliestKeyIndex > currentKeyIndex) {
	        // key appears before so it's earlier
	        earliest = path;
	      }
	    }
	
	    return earliest;
	  });
	}
	
	/**
	 * Get the earliest path in the tree where the provided `paths` intersect.
	 *
	 * TODO: Possible optimisation target.
	 */
	
	function getDeepestCommonAncestorFrom(paths /*: Array<NodePath>*/, filter /*:: ?: Function*/) /*: NodePath*/ {
	  // istanbul ignore next
	
	  var _this = this;
	
	  if (!paths.length) {
	    return this;
	  }
	
	  if (paths.length === 1) {
	    return paths[0];
	  }
	
	  // minimum depth of the tree so we know the highest node
	  var minDepth = Infinity;
	
	  // last common ancestor
	  var lastCommonIndex = undefined,
	      lastCommon = undefined;
	
	  // get the ancestors of the path, breaking when the parent exceeds ourselves
	  var ancestries = paths.map(function (path) {
	    var ancestry = [];
	
	    do {
	      ancestry.unshift(path);
	    } while ((path = path.parentPath) && path !== _this);
	
	    // save min depth to avoid going too far in
	    if (ancestry.length < minDepth) {
	      minDepth = ancestry.length;
	    }
	
	    return ancestry;
	  });
	
	  // get the first ancestry so we have a seed to assess all other ancestries with
	  var first = ancestries[0];
	
	  // check ancestor equality
	  depthLoop: for (var i = 0; i < minDepth; i++) {
	    var shouldMatch = first[i];
	
	    for (var _iterator2 = (ancestries /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var ancestry = _ref2;
	
	      if (ancestry[i] !== shouldMatch) {
	        // we've hit a snag
	        break depthLoop;
	      }
	    }
	
	    // next iteration may break so store these so they can be returned
	    lastCommonIndex = i;
	    lastCommon = shouldMatch;
	  }
	
	  if (lastCommon) {
	    if (filter) {
	      return filter(lastCommon, lastCommonIndex, ancestries);
	    } else {
	      return lastCommon;
	    }
	  } else {
	    throw new Error("Couldn't find intersection");
	  }
	}
	
	/**
	 * Build an array of node paths containing the entire ancestry of the current node path.
	 *
	 * NOTE: The current node path is included in this.
	 */
	
	function getAncestry() {
	  var path = this;
	  var paths = [];
	  do {
	    paths.push(path);
	  } while (path = path.parentPath);
	  return paths;
	}
	
	function inType() {
	  var path = this;
	  while (path) {
	    for (var _iterator3 = (arguments /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var type = _ref3;
	
	      if (path.node.type === type) return true;
	    }
	    path = path.parentPath;
	  }
	
	  return false;
	}
	
	/**
	 * Check if we're inside a shadowed function.
	 */
	
	function inShadow(key /*:: ?*/) {
	  var path = this;
	  do {
	    if (path.isFunction()) {
	      var shadow = path.node.shadow;
	      if (shadow) {
	        // this is because sometimes we may have a `shadow` value of:
	        //
	        //   { this: false }
	        //
	        // we need to catch this case if `inShadow` has been passed a `key`
	        if (!key || shadow[key] !== false) {
	          return path;
	        }
	      } else if (path.isArrowFunctionExpression()) {
	        return path;
	      }
	
	      // normal function, we've found our function context
	      return null;
	    }
	  } while (path = path.parentPath);
	  return null;
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/inference/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getTypeAnnotation = getTypeAnnotation;
	exports._getTypeAnnotation = _getTypeAnnotation;
	exports.isBaseType = isBaseType;
	exports.couldBeBaseType = couldBeBaseType;
	exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
	exports.isGenericType = isGenericType;
	
	var _inferers = __webpack_require__("./node_modules/babel-traverse/lib/path/inference/inferers.js");
	
	var inferers = _interopRequireWildcard(_inferers);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/**
	 * Infer the type of the current `NodePath`.
	 */
	
	/*:: import type NodePath from "./index";*/
	function getTypeAnnotation() /*: Object*/ {
	  if (this.typeAnnotation) return this.typeAnnotation;
	
	  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
	  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
	  return this.typeAnnotation = type;
	}
	
	/**
	 * todo: split up this method
	 */
	
	function _getTypeAnnotation() /*: ?Object*/ {
	  var node = this.node;
	
	  if (!node) {
	    // handle initializerless variables, add in checks for loop initializers too
	    if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
	      var declar = this.parentPath.parentPath;
	      var declarParent = declar.parentPath;
	
	      // for (let NODE in bar) {}
	      if (declar.key === "left" && declarParent.isForInStatement()) {
	        return t.stringTypeAnnotation();
	      }
	
	      // for (let NODE of bar) {}
	      if (declar.key === "left" && declarParent.isForOfStatement()) {
	        return t.anyTypeAnnotation();
	      }
	
	      return t.voidTypeAnnotation();
	    } else {
	      return;
	    }
	  }
	
	  if (node.typeAnnotation) {
	    return node.typeAnnotation;
	  }
	
	  var inferer = inferers[node.type];
	  if (inferer) {
	    return inferer.call(this, node);
	  }
	
	  inferer = inferers[this.parentPath.type];
	  if (inferer && inferer.validParent) {
	    return this.parentPath.getTypeAnnotation();
	  }
	}
	
	function isBaseType(baseName /*: string*/, soft /*:: ?: boolean*/) /*: boolean*/ {
	  return _isBaseType(baseName, this.getTypeAnnotation(), soft);
	}
	
	function _isBaseType(baseName /*: string*/, type, /*:: ?*/soft /*:: ?*/) /*: boolean*/ {
	  if (baseName === "string") {
	    return t.isStringTypeAnnotation(type);
	  } else if (baseName === "number") {
	    return t.isNumberTypeAnnotation(type);
	  } else if (baseName === "boolean") {
	    return t.isBooleanTypeAnnotation(type);
	  } else if (baseName === "any") {
	    return t.isAnyTypeAnnotation(type);
	  } else if (baseName === "mixed") {
	    return t.isMixedTypeAnnotation(type);
	  } else if (baseName === "void") {
	    return t.isVoidTypeAnnotation(type);
	  } else {
	    if (soft) {
	      return false;
	    } else {
	      throw new Error("Unknown base type " + baseName);
	    }
	  }
	}
	
	function couldBeBaseType(name /*: string*/) /*: boolean*/ {
	  var type = this.getTypeAnnotation();
	  if (t.isAnyTypeAnnotation(type)) return true;
	
	  if (t.isUnionTypeAnnotation(type)) {
	    for (var _iterator = (type.types /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var type2 = _ref;
	
	      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
	        return true;
	      }
	    }
	    return false;
	  } else {
	    return _isBaseType(name, type, true);
	  }
	}
	
	function baseTypeStrictlyMatches(right /*: NodePath*/) {
	  var left = this.getTypeAnnotation();
	  right = right.getTypeAnnotation();
	
	  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
	    return right.type === left.type;
	  }
	}
	
	function isGenericType(genericName /*: string*/) /*: boolean*/ {
	  var type = this.getTypeAnnotation();
	  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/inference/inferers.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequire = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require.js")["default"];
	
	exports.__esModule = true;
	exports.VariableDeclarator = VariableDeclarator;
	exports.TypeCastExpression = TypeCastExpression;
	exports.NewExpression = NewExpression;
	exports.TemplateLiteral = TemplateLiteral;
	exports.UnaryExpression = UnaryExpression;
	exports.BinaryExpression = BinaryExpression;
	exports.LogicalExpression = LogicalExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.AssignmentExpression = AssignmentExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.StringLiteral = StringLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.RegExpLiteral = RegExpLiteral;
	exports.ObjectExpression = ObjectExpression;
	exports.ArrayExpression = ArrayExpression;
	exports.RestElement = RestElement;
	exports.CallExpression = CallExpression;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _infererReference = __webpack_require__("./node_modules/babel-traverse/lib/path/inference/inferer-reference.js");
	
	exports.Identifier = _interopRequire(_infererReference);
	
	function VariableDeclarator() {
	  var id = this.get("id");
	
	  if (id.isIdentifier()) {
	    return this.get("init").getTypeAnnotation();
	  } else {
	    return;
	  }
	}
	
	function TypeCastExpression(node) {
	  return node.typeAnnotation;
	}
	
	TypeCastExpression.validParent = true;
	
	function NewExpression(node) {
	  if (this.get("callee").isIdentifier()) {
	    // only resolve identifier callee
	    return t.genericTypeAnnotation(node.callee);
	  }
	}
	
	function TemplateLiteral() {
	  return t.stringTypeAnnotation();
	}
	
	function UnaryExpression(node) {
	  var operator = node.operator;
	
	  if (operator === "void") {
	    return t.voidTypeAnnotation();
	  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.stringTypeAnnotation();
	  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  }
	}
	
	function BinaryExpression(node) {
	  var operator = node.operator;
	
	  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  } else if (operator === "+") {
	    var right = this.get("right");
	    var left = this.get("left");
	
	    if (left.isBaseType("number") && right.isBaseType("number")) {
	      // both numbers so this will be a number
	      return t.numberTypeAnnotation();
	    } else if (left.isBaseType("string") || right.isBaseType("string")) {
	      // one is a string so the result will be a string
	      return t.stringTypeAnnotation();
	    }
	
	    // unsure if left and right are strings or numbers so stay on the safe side
	    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
	  }
	}
	
	function LogicalExpression() {
	  return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
	}
	
	function ConditionalExpression() {
	  return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
	}
	
	function SequenceExpression() {
	  return this.get("expressions").pop().getTypeAnnotation();
	}
	
	function AssignmentExpression() {
	  return this.get("right").getTypeAnnotation();
	}
	
	function UpdateExpression(node) {
	  var operator = node.operator;
	  if (operator === "++" || operator === "--") {
	    return t.numberTypeAnnotation();
	  }
	}
	
	function StringLiteral() {
	  return t.stringTypeAnnotation();
	}
	
	function NumericLiteral() {
	  return t.numberTypeAnnotation();
	}
	
	function BooleanLiteral() {
	  return t.booleanTypeAnnotation();
	}
	
	function NullLiteral() {
	  return t.nullLiteralTypeAnnotation();
	}
	
	function RegExpLiteral() {
	  return t.genericTypeAnnotation(t.identifier("RegExp"));
	}
	
	function ObjectExpression() {
	  return t.genericTypeAnnotation(t.identifier("Object"));
	}
	
	function ArrayExpression() {
	  return t.genericTypeAnnotation(t.identifier("Array"));
	}
	
	function RestElement() {
	  return ArrayExpression();
	}
	
	RestElement.validParent = true;
	
	function Func() {
	  return t.genericTypeAnnotation(t.identifier("Function"));
	}
	
	exports.Function = Func;
	exports.Class = Func;
	
	function CallExpression() {
	  return resolveCall(this.get("callee"));
	}
	
	function TaggedTemplateExpression() {
	  return resolveCall(this.get("tag"));
	}
	
	function resolveCall(callee) {
	  callee = callee.resolve();
	
	  if (callee.isFunction()) {
	    if (callee.is("async")) {
	      if (callee.is("generator")) {
	        return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
	      } else {
	        return t.genericTypeAnnotation(t.identifier("Promise"));
	      }
	    } else {
	      if (callee.node.returnType) {
	        return callee.node.returnType;
	      } else {
	        // todo: get union type of all return arguments
	      }
	    }
	  }
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/inference/inferer-reference.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type NodePath from "../index";*/
	exports["default"] = function (node /*: Object*/) {
	  if (!this.isReferenced()) return;
	
	  // check if a binding exists of this value and if so then return a union type of all
	  // possible types that the binding could be
	  var binding = this.scope.getBinding(node.name);
	  if (binding) {
	    if (binding.identifier.typeAnnotation) {
	      return binding.identifier.typeAnnotation;
	    } else {
	      return getTypeAnnotationBindingConstantViolations(this, node.name);
	    }
	  }
	
	  // built-in values
	  if (node.name === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (node.name === "NaN" || node.name === "Infinity") {
	    return t.numberTypeAnnotation();
	  } else if (node.name === "arguments") {
	    // todo
	  }
	};
	
	function getTypeAnnotationBindingConstantViolations(path, name) {
	  var binding = path.scope.getBinding(name);
	
	  var types = [];
	  path.typeAnnotation = t.unionTypeAnnotation(types);
	
	  var functionConstantViolations = [];
	  var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
	
	  var testType = getConditionalAnnotation(path, name);
	  if (testType) {
	    (function () {
	      var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
	
	      // remove constant violations observed before the IfStatement
	      constantViolations = constantViolations.filter(function (path) {
	        return testConstantViolations.indexOf(path) < 0;
	      });
	
	      // clear current types and add in observed test type
	      types.push(testType.typeAnnotation);
	    })();
	  }
	
	  if (constantViolations.length) {
	    // pick one constant from each scope which will represent the last possible
	    // control flow path that it could've taken/been
	    /* This code is broken for the following problems:
	     * It thinks that assignments can only happen in scopes.
	     * What about conditionals, if statements without block,
	     * or guarded assignments.
	     * It also checks to see if one of the assignments is in the
	     * same scope and uses that as the only "violation". However,
	     * the binding is returned by `getConstantViolationsBefore` so we for
	     * sure always going to return that as the only "violation".
	    let rawConstantViolations = constantViolations.reverse();
	    let visitedScopes = [];
	    constantViolations = [];
	    for (let violation of (rawConstantViolations: Array<NodePath>)) {
	      let violationScope = violation.scope;
	      if (visitedScopes.indexOf(violationScope) >= 0) continue;
	       visitedScopes.push(violationScope);
	      constantViolations.push(violation);
	       if (violationScope === path.scope) {
	        constantViolations = [violation];
	        break;
	      }
	    }*/
	
	    // add back on function constant violations since we can't track calls
	    constantViolations = constantViolations.concat(functionConstantViolations);
	
	    // push on inferred types of violated paths
	    for (var _iterator = (constantViolations /*: Array<NodePath>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var violation = _ref;
	
	      types.push(violation.getTypeAnnotation());
	    }
	  }
	
	  if (types.length) {
	    return t.createUnionTypeAnnotation(types);
	  }
	}
	
	function getConstantViolationsBefore(binding, path, functions) {
	  var violations = binding.constantViolations.slice();
	  violations.unshift(binding.path);
	  return violations.filter(function (violation) {
	    violation = violation.resolve();
	    var status = violation._guessExecutionStatusRelativeTo(path);
	    if (functions && status === "function") functions.push(violation);
	    return status === "before";
	  });
	}
	
	function inferAnnotationFromBinaryExpression(name, path) {
	  var operator = path.node.operator;
	
	  var right = path.get("right").resolve();
	  var left = path.get("left").resolve();
	
	  var target = undefined;
	  if (left.isIdentifier({ name: name })) {
	    target = right;
	  } else if (right.isIdentifier({ name: name })) {
	    target = left;
	  }
	  if (target) {
	    if (operator === "===") {
	      return target.getTypeAnnotation();
	    } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	      return t.numberTypeAnnotation();
	    } else {
	      return;
	    }
	  } else {
	    if (operator !== "===") return;
	  }
	
	  //
	  var typeofPath = undefined;
	  var typePath = undefined;
	  if (left.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = left;
	    typePath = right;
	  } else if (right.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = right;
	    typePath = left;
	  }
	  if (!typePath && !typeofPath) return;
	
	  // ensure that the type path is a Literal
	  typePath = typePath.resolve();
	  if (!typePath.isLiteral()) return;
	
	  // and that it's a string so we can infer it
	  var typeValue = typePath.node.value;
	  if (typeof typeValue !== "string") return;
	
	  // and that the argument of the typeof path references us!
	  if (!typeofPath.get("argument").isIdentifier({ name: name })) return;
	
	  // turn type value into a type annotation
	  return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
	}
	
	function getParentConditionalPath(path) {
	  var parentPath = undefined;
	  while (parentPath = path.parentPath) {
	    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
	      if (path.key === "test") {
	        return;
	      } else {
	        return parentPath;
	      }
	    } else {
	      path = parentPath;
	    }
	  }
	}
	
	function getConditionalAnnotation(path, name) {
	  var ifStatement = getParentConditionalPath(path);
	  if (!ifStatement) return;
	
	  var test = ifStatement.get("test");
	  var paths = [test];
	  var types = [];
	
	  do {
	    var _path = paths.shift().resolve();
	
	    if (_path.isLogicalExpression()) {
	      paths.push(_path.get("left"));
	      paths.push(_path.get("right"));
	    }
	
	    if (_path.isBinaryExpression()) {
	      var type = inferAnnotationFromBinaryExpression(name, _path);
	      if (type) types.push(type);
	    }
	  } while (paths.length);
	
	  if (types.length) {
	    return {
	      typeAnnotation: t.createUnionTypeAnnotation(types),
	      ifStatement: ifStatement
	    };
	  } else {
	    return getConditionalAnnotation(ifStatement, name);
	  }
	}
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/replacement.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods responsible for replacing a node with another.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.replaceWithMultiple = replaceWithMultiple;
	exports.replaceWithSourceString = replaceWithSourceString;
	exports.replaceWith = replaceWith;
	exports._replaceWith = _replaceWith;
	exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
	exports.replaceInline = replaceInline;
	
	var _babelCodeFrame = __webpack_require__("./node_modules/babel-code-frame/lib/index.js");
	
	var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _index3 = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	
	var _index4 = _interopRequireDefault(_index3);
	
	var _babylon = __webpack_require__("./node_modules/babel-traverse/node_modules/babylon/index.js");
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var hoistVariablesVisitor = {
	  Function: function Function(path) {
	    path.skip();
	  },
	
	  VariableDeclaration: function VariableDeclaration(path) {
	    if (path.node.kind !== "var") return;
	
	    var bindings = path.getBindingIdentifiers();
	    for (var key in bindings) {
	      path.scope.push({ id: bindings[key] });
	    }
	
	    var exprs = [];
	
	    for (var _iterator = (path.node.declarations /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var declar = _ref;
	
	      if (declar.init) {
	        exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
	      }
	    }
	
	    path.replaceWithMultiple(exprs);
	  }
	};
	
	/**
	 * Replace a node with an array of multiple. This method performs the following steps:
	 *
	 *  - Inherit the comments of first provided node with that of the current node.
	 *  - Insert the provided nodes after the current node.
	 *  - Remove the current node.
	 */
	
	function replaceWithMultiple(nodes /*: Array<Object>*/) {
	  this.resync();
	
	  nodes = this._verifyNodeList(nodes);
	  t.inheritLeadingComments(nodes[0], this.node);
	  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
	  this.node = this.container[this.key] = null;
	  this.insertAfter(nodes);
	
	  if (this.node) {
	    this.requeue();
	  } else {
	    this.remove();
	  }
	}
	
	/**
	 * Parse a string as an expression and replace the current node with the result.
	 *
	 * NOTE: This is typically not a good idea to use. Building source strings when
	 * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
	 * easier to use, your transforms will be extremely brittle.
	 */
	
	function replaceWithSourceString(replacement) {
	  this.resync();
	
	  try {
	    replacement = "(" + replacement + ")";
	    replacement = _babylon.parse(replacement);
	  } catch (err) {
	    var loc = err.loc;
	    if (loc) {
	      err.message += " - make sure this is an expression.";
	      err.message += "\n" + _babelCodeFrame2["default"](replacement, loc.line, loc.column + 1);
	    }
	    throw err;
	  }
	
	  replacement = replacement.program.body[0].expression;
	  _index2["default"].removeProperties(replacement);
	  return this.replaceWith(replacement);
	}
	
	/**
	 * Replace the current node with another.
	 */
	
	function replaceWith(replacement) {
	  this.resync();
	
	  if (this.removed) {
	    throw new Error("You can't replace this node, we've already removed it");
	  }
	
	  if (replacement instanceof _index4["default"]) {
	    replacement = replacement.node;
	  }
	
	  if (!replacement) {
	    throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
	  }
	
	  if (this.node === replacement) {
	    return;
	  }
	
	  if (this.isProgram() && !t.isProgram(replacement)) {
	    throw new Error("You can only replace a Program root node with another Program node");
	  }
	
	  if (Array.isArray(replacement)) {
	    throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
	  }
	
	  if (typeof replacement === "string") {
	    throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
	  }
	
	  // replacing a statement with an expression so wrap it in an expression statement
	  if (this.isNodeType("Statement") && t.isExpression(replacement) && !this.canHaveVariableDeclarationOrExpression()) {
	    replacement = t.expressionStatement(replacement);
	  }
	
	  // replacing an expression with a statement so let's explode it
	  if (this.isNodeType("Expression") && t.isStatement(replacement)) {
	    return this.replaceExpressionWithStatements([replacement]);
	  }
	
	  var oldNode = this.node;
	  if (oldNode) {
	    t.inheritsComments(replacement, oldNode);
	    t.removeComments(oldNode);
	  }
	
	  // replace the node
	  this._replaceWith(replacement);
	  this.type = replacement.type;
	
	  // potentially create new scope
	  this.setScope();
	
	  // requeue for visiting
	  this.requeue();
	}
	
	/**
	 * Description
	 */
	
	function _replaceWith(node) {
	  if (!this.container) {
	    throw new ReferenceError("Container is falsy");
	  }
	
	  if (this.inList) {
	    t.validate(this.parent, this.key, [node]);
	  } else {
	    t.validate(this.parent, this.key, node);
	  }
	
	  this.debug(function () {
	    return "Replace with " + (node && node.type);
	  });
	
	  this.node = this.container[this.key] = node;
	}
	
	/**
	 * This method takes an array of statements nodes and then explodes it
	 * into expressions. This method retains completion records which is
	 * extremely important to retain original semantics.
	 */
	
	function replaceExpressionWithStatements(nodes /*: Array<Object>*/) {
	  this.resync();
	
	  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);
	
	  if (t.isSequenceExpression(toSequenceExpression)) {
	    var exprs = toSequenceExpression.expressions;
	
	    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {
	      this._maybePopFromStatements(exprs);
	    }
	
	    // could be just one element due to the previous maybe popping
	    if (exprs.length === 1) {
	      this.replaceWith(exprs[0]);
	    } else {
	      this.replaceWith(toSequenceExpression);
	    }
	  } else if (toSequenceExpression) {
	    this.replaceWith(toSequenceExpression);
	  } else {
	    var container = t.functionExpression(null, [], t.blockStatement(nodes));
	    container.shadow = true;
	
	    this.replaceWith(t.callExpression(container, []));
	    this.traverse(hoistVariablesVisitor);
	
	    // add implicit returns to all ending expression statements
	    var completionRecords /*: Array<NodePath>*/ = this.get("callee").getCompletionRecords();
	    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var path = _ref2;
	
	      if (!path.isExpressionStatement()) continue;
	
	      var loop = path.findParent(function (path) {
	        return path.isLoop();
	      });
	      if (loop) {
	        var callee = this.get("callee");
	
	        var uid = callee.scope.generateDeclaredUidIdentifier("ret");
	        callee.get("body").pushContainer("body", t.returnStatement(uid));
	
	        path.get("expression").replaceWith(t.assignmentExpression("=", uid, path.node.expression));
	      } else {
	        path.replaceWith(t.returnStatement(path.node.expression));
	      }
	    }
	
	    return this.node;
	  }
	}
	
	function replaceInline(nodes /*: Object | Array<Object>*/) {
	  this.resync();
	
	  if (Array.isArray(nodes)) {
	    if (Array.isArray(this.container)) {
	      nodes = this._verifyNodeList(nodes);
	      this._containerInsertAfter(nodes);
	      return this.remove();
	    } else {
	      return this.replaceWithMultiple(nodes);
	    }
	  } else {
	    return this.replaceWith(nodes);
	  }
	}

/***/ },

/***/ "./node_modules/babel-code-frame/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _lineNumbers = __webpack_require__("./node_modules/line-numbers/index.js");
	
	var _lineNumbers2 = _interopRequireDefault(_lineNumbers);
	
	var _repeating = __webpack_require__("./node_modules/repeating/index.js");
	
	var _repeating2 = _interopRequireDefault(_repeating);
	
	var _jsTokens = __webpack_require__("./node_modules/js-tokens/index.js");
	
	var _jsTokens2 = _interopRequireDefault(_jsTokens);
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _chalk = __webpack_require__("./node_modules/chalk/index.js");
	
	var _chalk2 = _interopRequireDefault(_chalk);
	
	/**
	 * Chalk styles for token types.
	 */
	
	var defs = {
	  string: _chalk2["default"].red,
	  punctuator: _chalk2["default"].bold,
	  curly: _chalk2["default"].green,
	  parens: _chalk2["default"].blue.bold,
	  square: _chalk2["default"].yellow,
	  keyword: _chalk2["default"].cyan,
	  number: _chalk2["default"].magenta,
	  regex: _chalk2["default"].magenta,
	  comment: _chalk2["default"].grey,
	  invalid: _chalk2["default"].inverse
	};
	
	/**
	 * RegExp to test for newlines in terminal.
	 */
	
	var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
	
	/**
	 * Get the type of token, specifying punctuator type.
	 */
	
	function getTokenType(match) {
	  var token = _jsTokens2["default"].matchToToken(match);
	  if (token.type === "name" && _esutils2["default"].keyword.isReservedWordES6(token.value)) {
	    return "keyword";
	  }
	
	  if (token.type === "punctuator") {
	    switch (token.value) {
	      case "{":
	      case "}":
	        return "curly";
	      case "(":
	      case ")":
	        return "parens";
	      case "[":
	      case "]":
	        return "square";
	    }
	  }
	
	  return token.type;
	}
	
	/**
	 * Highlight `text`.
	 */
	
	function highlight(text /*: string*/) {
	  return text.replace(_jsTokens2["default"], function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var type = getTokenType(args);
	    var colorize = defs[type];
	    if (colorize) {
	      return args[0].split(NEWLINE).map(function (str) {
	        return colorize(str);
	      }).join("\n");
	    } else {
	      return args[0];
	    }
	  });
	}
	
	/**
	 * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.
	 */
	
	exports["default"] = function (rawLines /*: string*/, lineNumber /*: number*/, colNumber /*: number*/) /*: string*/ {
	  var opts /*: Object*/ = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	  colNumber = Math.max(colNumber, 0);
	
	  var highlighted = opts.highlightCode && _chalk2["default"].supportsColor;
	  if (highlighted) rawLines = highlight(rawLines);
	
	  var lines = rawLines.split(NEWLINE);
	  var start = Math.max(lineNumber - 3, 0);
	  var end = Math.min(lines.length, lineNumber + 3);
	
	  if (!lineNumber && !colNumber) {
	    start = 0;
	    end = lines.length;
	  }
	
	  var frame = _lineNumbers2["default"](lines.slice(start, end), {
	    start: start + 1,
	    before: "  ",
	    after: " | ",
	    transform: function transform(params) {
	      if (params.number !== lineNumber) {
	        return;
	      }
	
	      if (colNumber) {
	        params.line += "\n" + params.before + _repeating2["default"](" ", params.width) + params.after + _repeating2["default"](" ", colNumber - 1) + "^";
	      }
	
	      params.before = params.before.replace(/^./, ">");
	    }
	  }).join("\n");
	
	  if (highlighted) {
	    return _chalk2["default"].reset(frame);
	  } else {
	    return frame;
	  }
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/node_modules/babylon/index.js":
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.babylon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	exports.parse = parse;
	
	var _parser = require("./parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	require("./parser/util");
	
	require("./parser/statement");
	
	require("./parser/lval");
	
	require("./parser/expression");
	
	require("./parser/node");
	
	require("./parser/location");
	
	require("./parser/comments");
	
	var _tokenizerTypes = require("./tokenizer/types");
	
	require("./tokenizer");
	
	require("./tokenizer/context");
	
	var _pluginsFlow = require("./plugins/flow");
	
	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);
	
	var _pluginsJsx = require("./plugins/jsx");
	
	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);
	
	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];
	
	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}
	
	exports.tokTypes = _tokenizerTypes.types;
	},{"./parser":5,"./parser/comments":3,"./parser/expression":4,"./parser/location":6,"./parser/lval":7,"./parser/node":8,"./parser/statement":9,"./parser/util":10,"./plugins/flow":11,"./plugins/jsx":12,"./tokenizer":15,"./tokenizer/context":14,"./tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],2:[function(require,module,exports){
	/* @flow */
	// A second optional argument can be given to further configure
	"use strict";
	
	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions /*: {
	                     sourceType: string,
	                     allowReturnOutsideFunction: boolean,
	                     allowImportExportEverywhere: boolean,
	                     allowSuperOutsideMethod: boolean,
	                     plugins: Array<string>,
	                     strictMode: any
	                   }*/ = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // TODO
	  allowSuperOutsideMethod: false,
	  // An array of plugins to enable
	  plugins: [],
	  // TODO
	  strictMode: null
	};
	
	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object
	
	function getOptions(opts /*:: ?: Object*/) /*: Object*/ {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}
	
	// the parser process. These options are recognized:
	},{}],3:[function(require,module,exports){
	/* @flow */
	
	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	function last(stack) {
	  return stack[stack.length - 1];
	}
	
	var pp = _index2["default"].prototype;
	
	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};
	
	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;
	
	  var stack = this.state.commentStack;
	
	  var lastChild = undefined,
	      trailingComments = undefined,
	      i = undefined;
	
	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }
	
	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }
	
	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first ClassMethod,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }
	
	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }
	
	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }
	
	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }
	
	  stack.push(node);
	};
	},{"./index":5,"babel-runtime/helpers/interop-require-default":26}],4:[function(require,module,exports){
	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
	
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = require("../util/identifier");
	
	var pp = _index2["default"].prototype;
	
	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.
	
	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed) return;
	
	  var key = prop.key;
	  var name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;
	      break;
	
	    case "StringLiteral":
	    case "NumericLiteral":
	      name = String(key.value);
	      break;
	
	    default:
	      return;
	  }
	
	  if (name === "__proto__" && prop.kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};
	
	// ### Expression parsing
	
	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.
	
	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).
	
	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};
	
	// Parse an assignment expression. This includes applications of
	// operators like `+=`.
	
	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }
	
	  var failOnShorthandAssign = undefined;
	  if (refShorthandDefaultPos) {
	    failOnShorthandAssign = false;
	  } else {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  }
	
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	
	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }
	
	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly
	
	    this.checkLVal(left);
	
	    if (left.extra && left.extra.parenthesized) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }
	
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	
	  return left;
	};
	
	// Parse a ternary conditional (`?:`) operator.
	
	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};
	
	// Start the precedence parser.
	
	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};
	
	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.
	
	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;
	
	      if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
	        this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
	      }
	
	      var op = this.state.type;
	      this.next();
	
	      var startPos = this.state.start;
	      var startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
	
	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};
	
	// Parse unary operators, both prefix and postfix.
	
	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode();
	    var update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();
	
	    var argType = this.state.type;
	    this.addExtra(node, "parenthesizedArgument", argType === _tokenizerTypes.types.parenL);
	    node.argument = this.parseMaybeUnary();
	
	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	      this.unexpected(refShorthandDefaultPos.start);
	    }
	
	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }
	
	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }
	
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};
	
	// Parse call, dot, and `[]`-subscript expressions.
	
	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var potentialArrowAt = this.state.potentialArrowAt;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);
	
	  if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
	    return expr;
	  }
	
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  }
	
	  return this.parseSubscripts(expr, startPos, startLoc);
	};
	
	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdentifier(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();
	
	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
	      base = this.finishNode(node, "CallExpression");
	
	      if (possibleAsync && this.shouldParseAsyncArrow()) {
	        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};
	
	pp.parseCallExpressionArguments = function (close, allowTrailingComma, possibleAsyncArrow) {
	  var innerParenStart = undefined;
	
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
	    if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	      innerParenStart = this.state.start;
	    }
	
	    elts.push(this.parseExprListItem());
	  }
	
	  // we found an async arrow function so let's not allow any inner parens
	  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
	    this.unexpected();
	  }
	
	  return elts;
	};
	
	pp.shouldParseAsyncArrow = function () {
	  return this.match(_tokenizerTypes.types.arrow);
	};
	
	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.hasPlugin("asyncFunctions")) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};
	
	// Parse a no-call expression (like argument of `new` or `::` operators).
	
	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};
	
	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.
	
	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
	        this.raise(this.state.start, "'super' outside of function or class");
	      }
	
	      node = this.startNode();
	      this.next();
	      if (!this.match(_tokenizerTypes.types.parenL) && !this.match(_tokenizerTypes.types.bracketL) && !this.match(_tokenizerTypes.types.dot)) {
	        this.unexpected();
	      }
	      if (this.match(_tokenizerTypes.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
	        this.raise(node.start, "super() outside of class constructor");
	      }
	      return this.finishNode(node, "Super");
	
	    case _tokenizerTypes.types._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");
	
	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
	      var allowYield = this.shouldAllowYieldIdentifier();
	      var id = this.parseIdentifier(allowAwait || allowYield);
	
	      if (this.hasPlugin("asyncFunctions")) {
	        if (id.name === "await") {
	          if (this.state.inAsync || this.inModule) {
	            return this.parseAwait(node);
	          }
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdentifier()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // let foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }
	
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }
	
	      return id;
	
	    case _tokenizerTypes.types._do:
	      if (this.hasPlugin("doExpressions")) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock(false, true);
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }
	
	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value, "RegExpLiteral");
	      node.pattern = value.pattern;
	      node.flags = value.flags;
	      return node;
	
	    case _tokenizerTypes.types.num:
	      return this.parseLiteral(this.state.value, "NumericLiteral");
	
	    case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value, "StringLiteral");
	
	    case _tokenizerTypes.types._null:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "NullLiteral");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteral");
	
	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);
	
	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);
	
	    case _tokenizerTypes.types._function:
	      return this.parseFunctionExpression();
	
	    case _tokenizerTypes.types.at:
	      this.parseDecorators();
	
	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);
	
	    case _tokenizerTypes.types._new:
	      return this.parseNew();
	
	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();
	
	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseFunctionExpression = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	  if (this.state.inGenerator && this.eat(_tokenizerTypes.types.dot) && this.hasPlugin("functionSent")) {
	    return this.parseMetaProperty(node, meta, "sent");
	  } else {
	    return this.parseFunction(node, false);
	  }
	};
	
	pp.parseMetaProperty = function (node, meta, propertyName) {
	  node.meta = meta;
	  node.property = this.parseIdentifier(true);
	
	  if (node.property.name !== propertyName) {
	    this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
	  }
	
	  return this.finishNode(node, "MetaProperty");
	};
	
	pp.parseLiteral = function (value, type) {
	  var node = this.startNode();
	  this.addExtra(node, "rawValue", value);
	  this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	  node.value = value;
	  this.next();
	  return this.finishNode(node, type);
	};
	
	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};
	
	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;
	
	  var val = undefined;
	  this.next();
	
	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }
	
	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }
	
	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);
	
	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    for (var _i = 0; _i < exprList.length; _i++) {
	      var param = exprList[_i];
	      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
	    }
	
	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }
	
	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	
	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }
	
	  this.addExtra(val, "parenthesized", true);
	  this.addExtra(val, "parenStart", startPos);
	
	  return val;
	};
	
	pp.parseParenItem = function (node) {
	  return node;
	};
	
	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the
	
	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	
	  if (this.eat(_tokenizerTypes.types.dot)) {
	    return this.parseMetaProperty(node, meta, "target");
	  }
	
	  node.callee = this.parseNoCallExpr();
	
	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"));
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }
	
	  return this.finishNode(node, "NewExpression");
	};
	
	// Parse template expression.
	
	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};
	
	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};
	
	// Parse an object literal or binding pattern.
	
	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var decorators = [];
	  var propHash = _Object$create(null);
	  var first = true;
	  var node = this.startNode();
	
	  node.properties = [];
	  this.next();
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }
	
	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }
	
	    if (this.hasPlugin("objectRestSpread") && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = isPattern ? "RestProperty" : "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }
	
	    prop.method = false;
	    prop.shorthand = false;
	
	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }
	
	    if (!isPattern) {
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	    }
	
	    if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();
	
	      var asyncId = this.parseIdentifier();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_tokenizerTypes.types.star);
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }
	
	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);
	
	    if (prop.shorthand) {
	      this.addExtra(prop, "shorthand", true);
	    }
	
	    node.properties.push(prop);
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }
	
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};
	
	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (isAsync || isGenerator || this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "method";
	    prop.method = true;
	    this.parseMethod(prop, isGenerator, isAsync);
	    return this.finishNode(prop, "ObjectMethod");
	  }
	
	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    return this.finishNode(prop, "ObjectProperty");
	  }
	
	  if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    this.parseMethod(prop, false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.params.length !== paramCount) {
	      var start = prop.start;
	      if (prop.kind === "get") {
	        this.raise(start, "getter should have no params");
	      } else {
	        this.raise(start, "setter should have exactly one param");
	      }
	    }
	    return this.finishNode(prop, "ObjectMethod");
	  }
	
	  if (!prop.computed && prop.key.type === "Identifier") {
	    if (isPattern) {
	      var illegalBinding = this.isKeyword(prop.key.name);
	      if (!illegalBinding && this.state.strict) {
	        illegalBinding = _utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name);
	      }
	      if (illegalBinding) {
	        this.raise(prop.key.start, "Binding " + prop.key.name);
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) {
	        refShorthandDefaultPos.start = this.state.start;
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	    return this.finishNode(prop, "ObjectProperty");
	  }
	
	  this.unexpected();
	};
	
	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }
	};
	
	// Initialize empty function node.
	
	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.hasPlugin("asyncFunctions")) {
	    node.async = !!isAsync;
	  }
	};
	
	// Parse object or class method.
	
	pp.parseMethod = function (node, isGenerator, isAsync) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = node.kind || true;
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  this.state.inMethod = oldInMethod;
	  return node;
	};
	
	// Parse arrow function expression with given parameters.
	
	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};
	
	// Parse function body and check parameters.
	
	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);
	
	  var oldInAsync = this.state.inAsync;
	  this.state.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.state.inAsync = oldInAsync;
	
	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  var checkLVal = this.state.strict;
	  var checkLValStrict = false;
	  var isStrict = false;
	
	  // arrow function
	  if (allowExpression) checkLVal = true;
	
	  // normal function
	  if (!isExpression && node.body.directives.length) {
	    for (var _iterator = (node.body.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i2 >= _iterator.length) break;
	        _ref = _iterator[_i2++];
	      } else {
	        _i2 = _iterator.next();
	        if (_i2.done) break;
	        _ref = _i2.value;
	      }
	
	      var directive = _ref;
	
	      if (directive.value.value === "use strict") {
	        isStrict = true;
	        checkLVal = true;
	        checkLValStrict = true;
	        break;
	      }
	    }
	  }
	
	  //
	  if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
	    this.raise(node.id.start, "Binding yield in strict mode");
	  }
	
	  if (checkLVal) {
	    var nameHash = _Object$create(null);
	    var oldStrict = this.state.strict;
	    if (checkLValStrict) this.state.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    for (var _iterator2 = (node.params /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i3 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i3++];
	      } else {
	        _i3 = _iterator2.next();
	        if (_i3.done) break;
	        _ref2 = _i3.value;
	      }
	
	      var param = _ref2;
	
	      this.checkLVal(param, true, nameHash);
	    }
	    this.state.strict = oldStrict;
	  }
	};
	
	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).
	
	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};
	
	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};
	
	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.
	
	pp.parseIdentifier = function (liberal) {
	  var node = this.startNode();
	
	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && this.state.strict && _utilIdentifier.reservedWords.strict(this.state.value)) {
	      this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    }
	
	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	
	  if (!liberal && node.name === "await" && this.state.inAsync) {
	    this.raise(node.start, "invalid use of await inside of an async function");
	  }
	
	  this.next();
	  return this.finishNode(node, "Identifier");
	};
	
	// Parses await expression inside async function.
	
	pp.parseAwait = function (node) {
	  if (!this.state.inAsync) {
	    this.unexpected();
	  }
	  if (this.isLineTerminator()) {
	    this.unexpected();
	  }
	  if (this.match(_tokenizerTypes.types.star)) {
	    this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
	  }
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};
	
	// Parses yield expression inside generator.
	
	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],5:[function(require,module,exports){
	/* @noflow */
	
	"use strict";
	
	var _inherits = require("babel-runtime/helpers/inherits")["default"];
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _utilIdentifier = require("../util/identifier");
	
	var _options = require("../options");
	
	var _tokenizer = require("../tokenizer");
	
	var _tokenizer2 = _interopRequireDefault(_tokenizer);
	
	var plugins = {};
	
	exports.plugins = plugins;
	
	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);
	
	  function Parser(options, input /*: string*/) {
	    _classCallCheck(this, Parser);
	
	    options = _options.getOptions(options);
	    _Tokenizer.call(this, options, input);
	
	    this.options = options;
	    this.inModule = this.options.sourceType === "module";
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.plugins = this.loadPlugins(this.options.plugins);
	
	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }
	
	  Parser.prototype.hasPlugin = function hasPlugin(name /*: string*/) /*: boolean*/ {
	    return !!(this.plugins["*"] || this.plugins[name]);
	  };
	
	  Parser.prototype.extend = function extend(name /*: string*/, f /*: Function*/) {
	    this[name] = f(this[name]);
	  };
	
	  Parser.prototype.loadPlugins = function loadPlugins(plugins /*: Array<string>*/) {
	    var pluginMap = {};
	
	    if (plugins.indexOf("flow") >= 0) {
	      // ensure flow plugin loads last
	      plugins = plugins.filter(function (plugin) {
	        return plugin !== "flow";
	      });
	      plugins.push("flow");
	    }
	
	    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var _name = _ref;
	
	      if (!pluginMap[_name]) {
	        pluginMap[_name] = true;
	
	        var plugin = exports.plugins[_name];
	        if (plugin) plugin(this);
	      }
	    }
	
	    return pluginMap;
	  };
	
	  Parser.prototype.parse = function parse() /*: {
	                                                type: "File",
	                                                program: {
	                                                  type: "Program",
	                                                  body: Array<Object>
	                                                }
	                                              }*/ {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };
	
	  return Parser;
	})(_tokenizer2["default"]);
	
	exports["default"] = Parser;
	},{"../options":2,"../tokenizer":15,"../util/identifier":18,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/inherits":25,"babel-runtime/helpers/interop-require-default":26}],6:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _utilLocation = require("../util/location");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var pp = _index2["default"].prototype;
	
	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.
	
	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/interop-require-default":26}],7:[function(require,module,exports){
	"use strict";
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = require("../util/identifier");
	
	var pp = _index2["default"].prototype;
	
	// Convert existing expression atom to assignable pattern
	// if possible.
	
	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;
	
	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var prop = _ref;
	
	          if (prop.type === "ObjectMethod") {
	            if (prop.kind === "get" || prop.kind === "set") {
	              this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	            } else {
	              this.raise(prop.key.start, "Object pattern can't contain methods");
	            }
	          } else {
	            this.toAssignable(prop, isBinding);
	          }
	        }
	        break;
	
	      case "ObjectProperty":
	        this.toAssignable(node.value, isBinding);
	        break;
	
	      case "SpreadProperty":
	        node.type = "RestProperty";
	        break;
	
	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;
	
	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;
	
	      case "MemberExpression":
	        if (!isBinding) break;
	
	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};
	
	// Convert list of expression atoms to binding list.
	
	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};
	
	// Convert list of expression atoms to a list of
	
	pp.toReferencedList = function (exprList) {
	  return exprList;
	};
	
	// Parses spread element.
	
	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};
	
	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseBindingIdentifier();
	  return this.finishNode(node, "RestElement");
	};
	
	pp.shouldAllowYieldIdentifier = function () {
	  return this.match(_tokenizerTypes.types._yield) && !this.state.strict && !this.state.inGenerator;
	};
	
	pp.parseBindingIdentifier = function () {
	  return this.parseIdentifier(this.shouldAllowYieldIdentifier());
	};
	
	// Parses lvalue (assignable) atom.
	
	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types._yield:
	      if (this.state.strict || this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types.name:
	      return this.parseIdentifier(true);
	
	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [];
	  var first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};
	
	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};
	
	// Parses assignment pattern around given atom if possible.
	
	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};
	
	// Verify that a node is an lval — something that can be assigned
	// to.
	
	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.state.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) {
	        this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      }
	
	      if (checkClashes) {
	        // we need to prefix this with an underscore for the cases where we have a key of
	        // `__proto__`. there's a bug in old V8 where the following wouldn't work:
	        //
	        //   > var obj = Object.create(null);
	        //   undefined
	        //   > obj.__proto__
	        //   null
	        //   > obj.__proto__ = true;
	        //   true
	        //   > obj.__proto__
	        //   null
	        var key = "_" + expr.name;
	
	        if (checkClashes[key]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[key] = true;
	        }
	      }
	      break;
	
	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;
	
	    case "ObjectPattern":
	      for (var _iterator2 = (expr.properties /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;
	
	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }
	
	        var prop = _ref2;
	
	        if (prop.type === "ObjectProperty") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;
	
	    case "ArrayPattern":
	      for (var _iterator3 = (expr.elements /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;
	
	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }
	
	        var elem = _ref3;
	
	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;
	
	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;
	
	    case "RestProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;
	
	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/interop-require-default":26}],8:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilLocation = require("../util/location");
	
	// Start an AST node, attaching a start offset.
	
	var pp = _index2["default"].prototype;
	
	var Node = (function () {
	  function Node(pos /*:: ?: number*/, loc /*:: ?: SourceLocation*/) {
	    _classCallCheck(this, Node);
	
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }
	
	  Node.prototype.__clone = function __clone() /*: Node*/ {
	    var node2 = new Node();
	    for (var key in this) {
	      node2[key] = this[key];
	    }return node2;
	  };
	
	  return Node;
	})();
	
	pp.startNode = function () {
	  return new Node(this.state.start, this.state.startLoc);
	};
	
	pp.startNodeAt = function (pos, loc) {
	  return new Node(pos, loc);
	};
	
	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}
	
	// Finish an AST node, adding `type` and `end` properties.
	
	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};
	
	// Finish node at given position
	
	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],9:[function(require,module,exports){
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = require("../util/whitespace");
	
	var pp = _index2["default"].prototype;
	
	// ### Statement parsing
	
	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.
	
	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;
	
	  this.parseBlockBody(program, true, true, _tokenizerTypes.types.eof);
	
	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;
	
	  return this.finishNode(file, "File");
	};
	
	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };
	
	// TODO
	
	pp.stmtToDirective = function (stmt) {
	  var expr = stmt.expression;
	
	  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
	  var directive = this.startNodeAt(stmt.start, stmt.loc.start);
	
	  var raw = this.input.slice(expr.start, expr.end);
	  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes
	
	  this.addExtra(directiveLiteral, "raw", raw);
	  this.addExtra(directiveLiteral, "rawValue", val);
	
	  directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);
	
	  return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
	};
	
	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.
	
	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }
	
	  var starttype = this.state.type,
	      node = this.startNode();
	
	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.
	
	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);
	
	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);
	
	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);
	
	    case _tokenizerTypes.types._let:
	    case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var
	
	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);
	
	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	        }
	
	        if (!this.inModule) {
	          this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	        }
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);
	
	    case _tokenizerTypes.types.name:
	      if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	  }
	
	  // If the statement does not start with a statement keyword or a
	  // brace, it's an ExpressionStatement or LabeledStatement. We
	  // simply start parsing an expression, and afterwards, if the
	  // next token is a colon and the expression was a simple
	  // Identifier node, we switch to interpreting it as a label.
	  var maybeName = this.state.value;
	  var expr = this.parseExpression();
	
	  if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	    return this.parseLabeledStatement(node, maybeName, expr);
	  } else {
	    return this.parseExpressionStatement(node, expr);
	  }
	};
	
	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};
	
	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }
	
	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }
	
	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};
	
	pp.parseDecorator = function () {
	  if (!this.hasPlugin("decorators")) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};
	
	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();
	
	  if (this.isLineTerminator()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdentifier();
	    this.semicolon();
	  }
	
	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = undefined;
	  for (i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};
	
	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};
	
	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};
	
	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.
	
	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);
	
	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }
	
	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");
	
	    if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	      if (_init.declarations.length === 1 && !_init.declarations[0].init) {
	        return this.parseForIn(node, _init);
	      }
	    }
	
	    return this.parseFor(node, _init);
	  }
	
	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};
	
	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};
	
	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};
	
	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }
	
	  this.next();
	
	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.
	
	  if (this.isLineTerminator()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }
	
	  return this.finishNode(node, "ReturnStatement");
	};
	
	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);
	
	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.
	
	  var cur = undefined;
	  for (var sawDefault = undefined; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (cur) {
	        cur.consequent.push(this.parseStatement(true));
	      } else {
	        this.unexpected();
	      }
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};
	
	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};
	
	// Reused empty array added for node fields that are always empty.
	
	var empty = [];
	
	pp.parseTryStatement = function (node) {
	  this.next();
	
	  node.block = this.parseBlock();
	  node.handler = null;
	
	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();
	
	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true, _Object$create(null));
	    this.expect(_tokenizerTypes.types.parenR);
	
	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }
	
	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;
	
	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }
	
	  return this.finishNode(node, "TryStatement");
	};
	
	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};
	
	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};
	
	pp.parseWithStatement = function (node) {
	  if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};
	
	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};
	
	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var _iterator = (this.state.labels /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var label = _ref;
	
	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }
	
	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }
	
	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};
	
	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};
	
	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).
	
	pp.parseBlock = function (allowDirectives /*:: ?*/) {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types.braceL);
	  this.parseBlockBody(node, allowDirectives, false, _tokenizerTypes.types.braceR);
	  return this.finishNode(node, "BlockStatement");
	};
	
	// TODO
	
	pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
	  node.body = [];
	  node.directives = [];
	
	  var parsedNonDirective = false;
	  var oldStrict = undefined;
	  var octalPosition = undefined;
	
	  while (!this.eat(end)) {
	    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
	      octalPosition = this.state.octalPosition;
	    }
	
	    var stmt = this.parseStatement(true, topLevel);
	
	    if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
	      var directive = this.stmtToDirective(stmt);
	      node.directives.push(directive);
	
	      if (oldStrict === undefined && directive.value.value === "use strict") {
	        oldStrict = this.state.strict;
	        this.setStrict(true);
	
	        if (octalPosition) {
	          this.raise(octalPosition, "Octal literal in strict mode");
	        }
	      }
	
	      continue;
	    }
	
	    parsedNonDirective = true;
	    node.body.push(stmt);
	  }
	
	  if (oldStrict === false) {
	    this.setStrict(false);
	  }
	};
	
	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.
	
	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};
	
	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.
	
	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};
	
	// Parse a list of variable declarations.
	
	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};
	
	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};
	
	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = false;
	
	  this.initFunction(node, isAsync);
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    if (node.async && !this.hasPlugin("asyncGenerators")) {
	      this.unexpected();
	    } else {
	      node.generator = true;
	      this.next();
	    }
	  }
	
	  if (isStatement && !optionalId && !this.match(_tokenizerTypes.types.name) && !this.match(_tokenizerTypes.types._yield)) {
	    this.unexpected();
	  }
	
	  if (this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._yield)) {
	    node.id = this.parseBindingIdentifier();
	  }
	
	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	
	  this.state.inMethod = oldInMethod;
	
	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};
	
	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	};
	
	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseClass = function (node, isStatement, optionalId) {
	  this.next();
	  this.parseClassId(node, isStatement, optionalId);
	  this.parseClassSuper(node);
	  this.parseClassBody(node);
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};
	
	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	pp.parseClassBody = function (node) {
	  // class bodies are implicitly strict
	  var oldStrict = this.state.strict;
	  this.state.strict = true;
	
	  var hadConstructorCall = false;
	  var hadConstructor = false;
	  var decorators = [];
	  var classBody = this.startNode();
	
	  classBody.body = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) {
	      continue;
	    }
	
	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }
	
	    var method = this.startNode();
	
	    // steal the decorators if there are any
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }
	
	    var isConstructorCall = false;
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star);
	    var isGetSet = false;
	    var isAsync = false;
	
	    this.parsePropertyName(method);
	
	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }
	
	    if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
	      if (this.isClassProperty()) {
	        classBody.body.push(this.parseClassProperty(method));
	        continue;
	      }
	
	      if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_tokenizerTypes.types.name) && this.state.value === "constructor") {
	        isConstructorCall = true;
	        this.parsePropertyName(method);
	      }
	    }
	
	    var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
	    if (isAsyncMethod) {
	      if (this.hasPlugin("asyncGenerators") && this.eat(_tokenizerTypes.types.star)) isGenerator = true;
	      isAsync = true;
	      this.parsePropertyName(method);
	    }
	
	    method.kind = "method";
	
	    if (!method.computed) {
	      var key = method.key;
	
	      // handle get/set methods
	      // eg. class Foo { get bar() {} set bar() {} }
	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }
	
	      // disallow invalid constructors
	      var isConstructor = !isConstructorCall && !method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
	      if (isConstructor) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }
	
	      // disallow static prototype method
	      var isStaticPrototype = method["static"] && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
	      if (isStaticPrototype) {
	        this.raise(key.start, "Classes may not have static property named prototype");
	      }
	    }
	
	    // convert constructor to a constructor call
	    if (isConstructorCall) {
	      if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
	      method.kind = "constructorCall";
	      hadConstructorCall = true;
	    }
	
	    // disallow decorators on class constructors
	    if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }
	
	    this.parseClassMethod(classBody, method, isGenerator, isAsync);
	
	    // get methods aren't allowed to have any parameters
	    // set methods must have exactly 1 parameter
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.params.length !== paramCount) {
	        var start = method.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }
	
	  node.body = this.finishNode(classBody, "ClassBody");
	
	  this.state.strict = oldStrict;
	};
	
	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.hasPlugin("classProperties")) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  if (!this.eat(_tokenizerTypes.types.semi)) {
	    this.raise(node.value && node.value.end || node.key.end, "A semicolon is required after a class property");
	  }
	  return this.finishNode(node, "ClassProperty");
	};
	
	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  this.parseMethod(method, isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "ClassMethod"));
	};
	
	pp.parseClassId = function (node, isStatement, optionalId) {
	  if (this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdentifier();
	  } else {
	    if (optionalId || !isStatement) {
	      node.id = null;
	    } else {
	      this.unexpected();
	    }
	  }
	};
	
	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};
	
	// Parses module export declaration.
	
	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
	      specifier.exported = this.parseIdentifier();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdentifier(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdentifier();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var expr = this.startNode();
	    var needsSemi = false;
	    if (this.eat(_tokenizerTypes.types._function)) {
	      expr = this.parseFunction(expr, true, false, false, true);
	    } else if (this.match(_tokenizerTypes.types._class)) {
	      expr = this.parseClass(expr, true, true);
	    } else {
	      needsSemi = true;
	      expr = this.parseMaybeAssign();
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};
	
	pp.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};
	
	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
	  }
	
	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }
	
	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};
	
	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};
	
	pp.parseExportFrom = function (node, expect /*:: ?*/) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }
	
	  this.semicolon();
	};
	
	pp.shouldParseExportDeclaration = function () {
	  return this.hasPlugin("asyncFunctions") && this.isContextual("async");
	};
	
	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};
	
	// Parses a comma-separated list of module exports.
	
	pp.parseExportSpecifiers = function () {
	  var nodes = [];
	  var first = true;
	  var needsFrom = undefined;
	
	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var isDefault = this.match(_tokenizerTypes.types._default);
	    if (isDefault && !needsFrom) needsFrom = true;
	
	    var node = this.startNode();
	    node.local = this.parseIdentifier(isDefault);
	    node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }
	
	  // https://github.com/ember-cli/ember-cli/pull/3739
	  if (needsFrom && !this.isContextual("from")) {
	    this.unexpected();
	  }
	
	  return nodes;
	};
	
	// Parses import declaration.
	
	pp.parseImport = function (node) {
	  this.next();
	
	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};
	
	// Parses a comma-separated list of module imports.
	
	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }
	
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var specifier = this.startNode();
	    specifier.imported = this.parseIdentifier(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdentifier() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};
	
	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],10:[function(require,module,exports){
	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = require("../util/whitespace");
	
	var pp = _index2["default"].prototype;
	
	// ## Parser utilities
	
	// TODO
	
	pp.addExtra = function (node, key, val) {
	  if (!node) return;
	
	  var extra = node.extra = node.extra || {};
	  extra[key] = val;
	};
	
	// TODO
	
	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};
	
	// TODO
	
	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};
	
	// Tests whether parsed token is a contextual keyword.
	
	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};
	
	// Consumes contextual keyword if possible.
	
	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};
	
	// Asserts that following token is given contextual keyword.
	
	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};
	
	// Test whether a semicolon can be inserted at the current position.
	
	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};
	
	// TODO
	
	pp.isLineTerminator = function () {
	  return this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.
	
	pp.semicolon = function () {
	  if (!this.isLineTerminator()) this.unexpected();
	};
	
	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.
	
	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};
	
	// Raise an unexpected token error.
	
	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/helpers/interop-require-default":26}],11:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _parser = require("../parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var pp = _parser2["default"].prototype;
	
	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};
	
	pp.flowParseDeclareFunction = function (node) {
	  this.next();
	
	  var id = node.id = this.parseIdentifier();
	
	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();
	
	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();
	
	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	
	  this.finishNode(id, id.type);
	
	  this.semicolon();
	
	  return this.finishNode(node, "DeclareFunction");
	};
	
	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else if (this.isContextual("type")) {
	    return this.flowParseDeclareTypeAlias(node);
	  } else if (this.isContextual("interface")) {
	    return this.flowParseDeclareInterface(node);
	  } else {
	    this.unexpected();
	  }
	};
	
	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};
	
	pp.flowParseDeclareModule = function (node) {
	  this.next();
	
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdentifier();
	  }
	
	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();
	
	    // todo: declare check
	    this.next();
	
	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	
	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};
	
	pp.flowParseDeclareTypeAlias = function (node) {
	  this.next();
	  this.flowParseTypeAlias(node);
	  return this.finishNode(node, "DeclareTypeAlias");
	};
	
	pp.flowParseDeclareInterface = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node);
	  return this.finishNode(node, "DeclareInterface");
	};
	
	// Interfaces
	
	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdentifier();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node["extends"] = [];
	  node.mixins = [];
	
	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  if (this.isContextual("mixins")) {
	    this.next();
	    do {
	      node.mixins.push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  node.body = this.flowParseObjectType(allowStatic);
	};
	
	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();
	
	  node.id = this.parseIdentifier();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }
	
	  return this.finishNode(node, "InterfaceExtends");
	};
	
	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};
	
	// Type aliases
	
	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdentifier();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();
	
	  return this.finishNode(node, "TypeAlias");
	};
	
	// Type annotations
	
	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  return this.finishNode(node, "TypeParameterDeclaration");
	};
	
	pp.flowParseExistentialTypeParam = function () {
	  if (this.match(_tokenizerTypes.types.star)) {
	    var node = this.startNode();
	    this.next();
	    return this.finishNode(node, "ExistentialTypeParam");
	  }
	};
	
	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];
	
	  this.state.inType = true;
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  this.state.inType = oldInType;
	
	  return this.finishNode(node, "TypeParameterInstantiation");
	};
	
	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	};
	
	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;
	
	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();
	
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};
	
	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();
	
	  return this.finishNode(node, "FunctionTypeAnnotation");
	};
	
	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};
	
	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};
	
	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node = undefined;
	  var propertyKey = undefined;
	  var isStatic = undefined;
	
	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var optional = false;
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }
	
	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdentifier();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }
	
	  this.expect(_tokenizerTypes.types.braceR);
	
	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};
	
	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};
	
	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);
	
	  node.typeParameters = null;
	  node.id = id;
	
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdentifier();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }
	
	  return this.finishNode(node, "GenericTypeAnnotation");
	};
	
	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};
	
	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};
	
	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdentifier();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};
	
	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};
	
	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");
	
	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");
	
	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");
	
	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");
	
	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");
	
	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");
	
	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};
	
	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp = undefined;
	  var type = undefined;
	  var isGroupedType = false;
	
	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
	
	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();
	
	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();
	
	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);
	
	        this.expect(_tokenizerTypes.types.arrow);
	
	        node.returnType = this.flowParseType();
	
	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }
	
	    case _tokenizerTypes.types.parenL:
	      this.next();
	
	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }
	
	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);
	
	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }
	
	        return type;
	      }
	
	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;
	
	      this.expect(_tokenizerTypes.types.parenR);
	
	      this.expect(_tokenizerTypes.types.arrow);
	
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	
	      return this.finishNode(node, "FunctionTypeAnnotation");
	
	    case _tokenizerTypes.types.string:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types.num:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "NumericLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._null:
	      node.value = this.match(_tokenizerTypes.types._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._this:
	      node.value = this.match(_tokenizerTypes.types._this);
	      this.next();
	      return this.finishNode(node, "ThisTypeAnnotation");
	
	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }
	
	  this.unexpected();
	};
	
	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};
	
	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};
	
	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};
	
	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};
	
	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};
	
	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdentifier();
	  var isOptionalParam = false;
	
	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }
	
	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }
	
	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }
	
	  return ident;
	};
	
	exports["default"] = function (instance) {
	  // plain function return types: function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, allowExpression);
	    };
	  });
	
	  // interfaces
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.state.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });
	
	  // declares, interfaces and type aliases
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }
	
	      return inner.call(this, node, expr);
	    };
	  });
	
	  // export type
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
	    };
	  });
	
	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow /*:: ?*/) {
	      var canBeArrow = this.state.potentialArrowAt = startPos;
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	
	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }
	
	        if (canBeArrow && this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var params = node.type === "SequenceExpression" ? node.expressions : [node];
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });
	
	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";
	
	        var declarationNode = this.startNode();
	        this.next();
	
	        if (this.match(_tokenizerTypes.types.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else if (this.isContextual("interface")) {
	        node.exportKind = "type";
	        var declarationNode = this.startNode();
	        this.next();
	        return this.flowParseInterface(declarationNode);
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });
	
	  instance.extend("parseClassId", function (inner) {
	    return function (node) {
	      inner.apply(this, arguments);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });
	
	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });
	
	  // ensure that inside flow types, we bypass the jsx parser plugin
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });
	
	  // don't lex any token as a jsx one inside a flow type
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });
	
	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }
	
	  instance.extend("toAssignable", function (inner) {
	    return function (node) {
	      if (node.type === "TypeCastExpression") {
	        return typeCastToParameter(node);
	      } else {
	        return inner.apply(this, arguments);
	      }
	    };
	  });
	
	  // turn type casts that we found in function parameter head into type annotated params
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });
	
	  // this is a list of nodes, from something like a call expression, we need to filter the
	  // type casts that we've found that are illegal in this context
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }
	
	      return exprList;
	    };
	  });
	
	  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
	  // the position where this function is cal;ed
	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("checkLVal", function (inner) {
	    return function (node) {
	      if (node.type !== "TypeCastExpression") {
	        return inner.apply(this, arguments);
	      }
	    };
	  });
	
	  // parse class property type annotations
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });
	
	  // determine whether or not we're currently in the position where a class property would appear
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  // parse type parameters for class methods
	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      if (this.isRelational("<")) {
	        method.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      this.parseMethod(method, isGenerator, isAsync);
	      classBody.body.push(this.finishNode(method, "ClassMethod"));
	    };
	  });
	
	  // parse a the super class type parameters and implements
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdentifier();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });
	
	  // parse type parameters for object method shorthand
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters = undefined;
	
	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }
	
	      inner.apply(this, arguments);
	
	      // add typeParameters if we found them
	      if (typeParameters) {
	        (prop.value || prop).typeParameters = typeParameters;
	      }
	    };
	  });
	
	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });
	
	  // parse typeof and type imports
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";
	
	      var kind = null;
	      if (this.match(_tokenizerTypes.types._typeof)) {
	        kind = "typeof";
	      } else if (this.isContextual("type")) {
	        kind = "type";
	      }
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }
	
	      inner.call(this, node);
	    };
	  });
	
	  // parse function type parameters - function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });
	
	  // parse flow type annotations on variable declarator heads - let foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });
	
	  // parse the return type of an async arrow function - let foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, call);
	    };
	  });
	
	  // todo description
	  instance.extend("shouldParseAsyncArrow", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  // handle return types for arrow functions
	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;
	
	      if (canBeArrow && this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // let foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);
	
	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // let foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);
	
	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];
	},{"../parser":5,"../tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],12:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _xhtml = require("./xhtml");
	
	var _xhtml2 = _interopRequireDefault(_xhtml);
	
	var _tokenizerTypes = require("../../tokenizer/types");
	
	var _tokenizerContext = require("../../tokenizer/context");
	
	var _parser = require("../../parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var _utilIdentifier = require("../../util/identifier");
	
	var _utilWhitespace = require("../../util/whitespace");
	
	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;
	
	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);
	
	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");
	
	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};
	
	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};
	
	var pp = _parser2["default"].prototype;
	
	// Reads inline JSX contents token.
	
	pp.jsxReadToken = function () {
	  var out = "";
	  var chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	
	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);
	
	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;
	
	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};
	
	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out = undefined;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;
	
	  return out;
	};
	
	pp.jsxReadString = function (quote) {
	  var out = "";
	  var chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};
	
	pp.jsxReadEntity = function () {
	  var str = "";
	  var count = 0;
	  var entity = undefined;
	  var ch = this.input[this.state.pos];
	
	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};
	
	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.
	
	pp.jsxReadWord = function () {
	  var ch = undefined;
	  var start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};
	
	// Transforms JSX element name to string.
	
	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }
	
	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }
	
	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}
	
	// Parse next token as JSX identifier
	
	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};
	
	// Parse namespaced identifier.
	
	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};
	
	// Parses element name in any form - namespaced, member
	// or single identifier.
	
	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};
	
	// Parses any type of JSX attribute value.
	
	pp.jsxParseAttributeValue = function () {
	  var node = undefined;
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }
	
	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      node = this.parseExprAtom();
	      node.extra = null;
	      return node;
	
	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};
	
	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).
	
	pp.jsxParseEmptyExpression = function () {
	  var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
	  return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
	};
	
	// Parses JSX expression enclosed into curly brackets.
	
	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};
	
	// Parses following JSX attribute name-value pair.
	
	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};
	
	// Parses JSX opening tag starting after "<".
	
	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};
	
	// Parses JSX closing tag starting after "</".
	
	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};
	
	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.
	
	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;
	
	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;
	
	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;
	
	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;
	
	        default:
	          this.unexpected();
	      }
	    }
	
	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }
	
	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};
	
	// Parses entire JSX element from current position.
	
	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};
	
	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value, "JSXText");
	        // https://github.com/babel/babel/issues/2078
	        node.extra = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });
	
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();
	
	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }
	
	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }
	
	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }
	
	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }
	
	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }
	
	      return inner.call(this, code);
	    };
	  });
	
	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];
	},{"../../parser":5,"../../tokenizer/context":14,"../../tokenizer/types":17,"../../util/identifier":18,"../../util/whitespace":20,"./xhtml":13,"babel-runtime/helpers/interop-require-default":26}],13:[function(require,module,exports){
	"use strict";
	
	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];
	},{}],14:[function(require,module,exports){
	/* @flow */
	
	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design
	
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var _types = require("./types");
	
	var _utilWhitespace = require("../util/whitespace");
	
	var TokContext = function TokContext(token /*: string*/, isExpr /*:: ?: boolean*/, preserveSpace /*:: ?: boolean*/, override /*:: ?: Function*/) {
	  _classCallCheck(this, TokContext);
	
	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};
	
	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};
	
	exports.types = types;
	// Token-specific context update code
	
	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }
	
	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};
	
	_types.types.name.updateContext = function (prevType) {
	  this.state.exprAllowed = false;
	
	  if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
	    if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.end))) {
	      this.state.exprAllowed = true;
	    }
	  }
	};
	
	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};
	
	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};
	
	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }
	
	  this.state.exprAllowed = false;
	};
	
	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};
	},{"../util/whitespace":20,"./types":17,"babel-runtime/helpers/class-call-check":24}],15:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _utilIdentifier = require("../util/identifier");
	
	var _types = require("./types");
	
	var _context = require("./context");
	
	var _utilLocation = require("../util/location");
	
	var _utilWhitespace = require("../util/whitespace");
	
	var _state = require("./state");
	
	var _state2 = _interopRequireDefault(_state);
	
	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.
	
	/*:: import type { TokenType } from "./types";*/
	var Token = function Token(state) {
	  _classCallCheck(this, Token);
	
	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}
	
	// ## Tokenizer
	
	;
	
	exports.Token = Token;
	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  } else {
	    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	  }
	}
	
	var Tokenizer = (function () {
	  function Tokenizer(options, input) {
	    _classCallCheck(this, Tokenizer);
	
	    this.state = new _state2["default"]();
	    this.state.init(options, input);
	  }
	
	  // Move to the next token
	
	  Tokenizer.prototype.next = function next() {
	    if (!this.isLookahead) {
	      this.state.tokens.push(new Token(this.state));
	    }
	
	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };
	
	  // TODO
	
	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  // TODO
	
	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };
	
	  // TODO
	
	  Tokenizer.prototype.isKeyword = function isKeyword(word) {
	    return _utilIdentifier.isKeyword(word);
	  };
	
	  // TODO
	
	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone(true);
	
	    this.isLookahead = true;
	    this.next();
	    this.isLookahead = false;
	
	    var curr = this.state.clone(true);
	    this.state = old;
	    return curr;
	  };
	
	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).
	
	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.state.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };
	
	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };
	
	  // Read a single token, updating the parser object's token-related
	  // properties.
	
	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();
	
	    this.state.containsOctal = false;
	    this.state.octalPosition = null;
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);
	
	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };
	
	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code) || code === 92 /* '\' */) {
	        return this.readWord();
	      } else {
	      return this.getTokenFromCode(code);
	    }
	  };
	
	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };
	
	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc)
	    };
	
	    if (!this.isLookahead) {
	      this.state.tokens.push(comment);
	      this.state.comments.push(comment);
	    }
	
	    this.addComment(comment);
	  };
	
	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");
	
	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }
	
	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }
	
	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.
	
	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;
	
	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }
	
	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;
	
	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;
	
	            case 47:
	              this.skipLineComment(2);
	              break;
	
	            default:
	              break loop;
	          }
	          break;
	
	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };
	
	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.
	
	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;
	
	    this.updateContext(prevType);
	  };
	
	  // ### Token reading
	
	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //
	
	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }
	
	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };
	
	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === 42 && this.hasPlugin("exponentiationOperator")) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }
	
	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }
	
	    return this.finishOp(type, width);
	  };
	
	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };
	
	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }
	
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;
	
	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }
	
	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }
	
	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }
	
	    return this.finishOp(_types.types.relational, size);
	  };
	
	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };
	
	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();
	
	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);
	
	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }
	
	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);
	
	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);
	
	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);
	
	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);
	
	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.
	
	      case 47:
	        // '/'
	        return this.readToken_slash();
	
	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);
	
	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);
	
	      case 94:
	        // '^'
	        return this.readToken_caret();
	
	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);
	
	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);
	
	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);
	
	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }
	
	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };
	
	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };
	
	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  };
	
	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.
	
	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;
	
	    return total;
	  };
	
	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read an integer, octal integer, or floating-point number.
	
	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	
	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.state.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read a string value, interpreting backslash-escapes.
	
	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;
	
	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };
	
	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };
	
	  // Reads template string tokens.
	
	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };
	
	  // Used to read escaped characters
	
	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0) {
	            if (!this.state.containsOctal) {
	              this.state.containsOctal = true;
	              this.state.octalPosition = this.state.pos - 2;
	            }
	            if (this.state.strict || inTemplate) {
	              this.raise(this.state.pos - 2, "Octal literal in strict mode");
	            }
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };
	
	  // Used to read character escape sequences ('\x', '\u', '\U').
	
	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };
	
	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.
	
	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;
	
	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;
	
	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }
	
	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }
	
	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };
	
	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.
	
	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) {
	      type = _types.keywords[word];
	    }
	    return this.finishToken(type, word);
	  };
	
	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }
	
	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }
	
	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
	      return true;
	    }
	
	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }
	
	    return !this.state.exprAllowed;
	  };
	
	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };
	
	  return Tokenizer;
	})();
	
	exports["default"] = Tokenizer;
	},{"../util/identifier":18,"../util/location":19,"../util/whitespace":20,"./context":14,"./state":16,"./types":17,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],16:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var _utilLocation = require("../util/location");
	
	var _context = require("./context");
	
	var _types = require("./types");
	
	/*:: import type { TokContext } from "./context";*/
	/*:: import type { Token } from "./index";*/
	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }
	
	  State.prototype.init = function init(options /*: Object*/, input /*: string*/) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";
	
	    this.input = input;
	
	    this.potentialArrowAt = -1;
	
	    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;
	
	    this.labels = [];
	
	    this.decorators = [];
	
	    this.tokens = [];
	
	    this.comments = [];
	
	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];
	
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;
	
	    this.type = _types.types.eof;
	    this.value = null;
	    this.start = this.end = this.pos;
	    this.startLoc = this.endLoc = this.curPosition();
	
	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;
	
	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;
	
	    this.containsEsc = this.containsOctal = false;
	    this.octalPosition = null;
	
	    return this;
	  };
	
	  // TODO
	
	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };
	
	  State.prototype.clone = function clone(skipArrays /*:: ?*/) {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];
	
	      if ((!skipArrays || key === "context") && Array.isArray(val)) {
	        val = val.slice();
	      }
	
	      state[key] = val;
	    }
	    return state;
	  };
	
	  return State;
	})();
	
	exports["default"] = State;
	module.exports = exports["default"];
	
	// TODO
	
	// Used to signify the start of a potential arrow function
	
	// Flags to track whether we are in a function, a generator.
	
	// Labels in scope.
	
	// Leading decorators.
	
	// Token store.
	
	// Comment store.
	
	// Comment attachment store
	
	// The current position of the tokenizer in the input.
	
	// Properties of the current token:
	// Its type
	
	// For tokens that include more information than their type, the value
	
	// Its start and end offset
	
	// And, if locations are used, the {line, column} object
	// corresponding to those offsets
	
	// Position information for the previous token
	
	// The context stack is used to superficially track syntactic
	// context to predict whether a regular expression is allowed in a
	// given position.
	
	// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.
	
	// TODO
	},{"../util/location":19,"./context":14,"./types":17,"babel-runtime/helpers/class-call-check":24}],17:[function(require,module,exports){
	// ## Token types
	
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.
	
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  _classCallCheck(this, TokenType);
	
	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};
	
	exports.TokenType = TokenType;
	
	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };
	
	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),
	
	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),
	
	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.
	
	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};
	
	exports.types = types;
	// Map keyword names to token types.
	
	var keywords = {};
	
	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}
	
	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true, beforeExpr: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });
	},{"babel-runtime/helpers/class-call-check":24}],18:[function(require,module,exports){
	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}
	
	// Reserved word lists for various dialects of the language
	
	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};
	
	exports.reservedWords = reservedWords;
	// And the keywords
	
	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");
	
	exports.isKeyword = isKeyword;
	// ## Character categories
	
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.
	
	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";
	
	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	
	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];
	
	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}
	
	// Test whether a given character code starts an identifier.
	
	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}
	
	// Test whether a given character is part of an identifier.
	
	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}
	},{}],19:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;
	
	var _whitespace = require("./whitespace");
	
	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.
	
	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);
	
	  this.line = line;
	  this.column = col;
	};
	
	exports.Position = Position;
	
	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);
	
	  this.start = start;
	  this.end = end;
	}
	
	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.
	
	;
	
	exports.SourceLocation = SourceLocation;
	
	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}
	},{"./whitespace":20,"babel-runtime/helpers/class-call-check":24}],20:[function(require,module,exports){
	/* @flow */
	
	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");
	
	exports.lineBreakG = lineBreakG;
	
	function isNewLine(code /*: number*/) /*: boolean*/ {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}
	
	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;
	},{}],21:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
	},{"core-js/library/fn/get-iterator":27}],22:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
	},{"core-js/library/fn/object/create":28}],23:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
	},{"core-js/library/fn/object/set-prototype-of":29}],24:[function(require,module,exports){
	"use strict";
	
	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	exports.__esModule = true;
	},{}],25:[function(require,module,exports){
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];
	
	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }
	
	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	exports.__esModule = true;
	},{"babel-runtime/core-js/object/create":22,"babel-runtime/core-js/object/set-prototype-of":23}],26:[function(require,module,exports){
	"use strict";
	
	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};
	
	exports.__esModule = true;
	},{}],27:[function(require,module,exports){
	require('../modules/web.dom.iterable');
	require('../modules/es6.string.iterator');
	module.exports = require('../modules/core.get-iterator');
	},{"../modules/core.get-iterator":63,"../modules/es6.string.iterator":66,"../modules/web.dom.iterable":67}],28:[function(require,module,exports){
	var $ = require('../../modules/$');
	module.exports = function create(P, D){
	  return $.create(P, D);
	};
	},{"../../modules/$":50}],29:[function(require,module,exports){
	require('../../modules/es6.object.set-prototype-of');
	module.exports = require('../../modules/$.core').Object.setPrototypeOf;
	},{"../../modules/$.core":35,"../../modules/es6.object.set-prototype-of":65}],30:[function(require,module,exports){
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	},{}],31:[function(require,module,exports){
	module.exports = function(){ /* empty */ };
	},{}],32:[function(require,module,exports){
	var isObject = require('./$.is-object');
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	},{"./$.is-object":45}],33:[function(require,module,exports){
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = require('./$.cof')
	  , TAG = require('./$.wks')('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	},{"./$.cof":34,"./$.wks":61}],34:[function(require,module,exports){
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	},{}],35:[function(require,module,exports){
	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	},{}],36:[function(require,module,exports){
	// optional / simple context binding
	var aFunction = require('./$.a-function');
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	},{"./$.a-function":30}],37:[function(require,module,exports){
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	},{}],38:[function(require,module,exports){
	// Thank's IE8 for his funny defineProperty
	module.exports = !require('./$.fails')(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	},{"./$.fails":40}],39:[function(require,module,exports){
	var global    = require('./$.global')
	  , core      = require('./$.core')
	  , ctx       = require('./$.ctx')
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;
	},{"./$.core":35,"./$.ctx":36,"./$.global":41}],40:[function(require,module,exports){
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	},{}],41:[function(require,module,exports){
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	},{}],42:[function(require,module,exports){
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	},{}],43:[function(require,module,exports){
	var $          = require('./$')
	  , createDesc = require('./$.property-desc');
	module.exports = require('./$.descriptors') ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	},{"./$":50,"./$.descriptors":38,"./$.property-desc":52}],44:[function(require,module,exports){
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = require('./$.cof');
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	},{"./$.cof":34}],45:[function(require,module,exports){
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	},{}],46:[function(require,module,exports){
	'use strict';
	var $              = require('./$')
	  , descriptor     = require('./$.property-desc')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	},{"./$":50,"./$.hide":43,"./$.property-desc":52,"./$.set-to-string-tag":55,"./$.wks":61}],47:[function(require,module,exports){
	'use strict';
	var LIBRARY        = require('./$.library')
	  , $export        = require('./$.export')
	  , redefine       = require('./$.redefine')
	  , hide           = require('./$.hide')
	  , has            = require('./$.has')
	  , Iterators      = require('./$.iterators')
	  , $iterCreate    = require('./$.iter-create')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , getProto       = require('./$').getProto
	  , ITERATOR       = require('./$.wks')('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	},{"./$":50,"./$.export":39,"./$.has":42,"./$.hide":43,"./$.iter-create":46,"./$.iterators":49,"./$.library":51,"./$.redefine":53,"./$.set-to-string-tag":55,"./$.wks":61}],48:[function(require,module,exports){
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	},{}],49:[function(require,module,exports){
	module.exports = {};
	},{}],50:[function(require,module,exports){
	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};
	},{}],51:[function(require,module,exports){
	module.exports = true;
	},{}],52:[function(require,module,exports){
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	},{}],53:[function(require,module,exports){
	module.exports = require('./$.hide');
	},{"./$.hide":43}],54:[function(require,module,exports){
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = require('./$').getDesc
	  , isObject = require('./$.is-object')
	  , anObject = require('./$.an-object');
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};
	},{"./$":50,"./$.an-object":32,"./$.ctx":36,"./$.is-object":45}],55:[function(require,module,exports){
	var def = require('./$').setDesc
	  , has = require('./$.has')
	  , TAG = require('./$.wks')('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	},{"./$":50,"./$.has":42,"./$.wks":61}],56:[function(require,module,exports){
	var global = require('./$.global')
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	},{"./$.global":41}],57:[function(require,module,exports){
	var toInteger = require('./$.to-integer')
	  , defined   = require('./$.defined');
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	},{"./$.defined":37,"./$.to-integer":58}],58:[function(require,module,exports){
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	},{}],59:[function(require,module,exports){
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = require('./$.iobject')
	  , defined = require('./$.defined');
	module.exports = function(it){
	  return IObject(defined(it));
	};
	},{"./$.defined":37,"./$.iobject":44}],60:[function(require,module,exports){
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	},{}],61:[function(require,module,exports){
	var store  = require('./$.shared')('wks')
	  , uid    = require('./$.uid')
	  , Symbol = require('./$.global').Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};
	},{"./$.global":41,"./$.shared":56,"./$.uid":60}],62:[function(require,module,exports){
	var classof   = require('./$.classof')
	  , ITERATOR  = require('./$.wks')('iterator')
	  , Iterators = require('./$.iterators');
	module.exports = require('./$.core').getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	},{"./$.classof":33,"./$.core":35,"./$.iterators":49,"./$.wks":61}],63:[function(require,module,exports){
	var anObject = require('./$.an-object')
	  , get      = require('./core.get-iterator-method');
	module.exports = require('./$.core').getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};
	},{"./$.an-object":32,"./$.core":35,"./core.get-iterator-method":62}],64:[function(require,module,exports){
	'use strict';
	var addToUnscopables = require('./$.add-to-unscopables')
	  , step             = require('./$.iter-step')
	  , Iterators        = require('./$.iterators')
	  , toIObject        = require('./$.to-iobject');
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	},{"./$.add-to-unscopables":31,"./$.iter-define":47,"./$.iter-step":48,"./$.iterators":49,"./$.to-iobject":59}],65:[function(require,module,exports){
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = require('./$.export');
	$export($export.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
	},{"./$.export":39,"./$.set-proto":54}],66:[function(require,module,exports){
	'use strict';
	var $at  = require('./$.string-at')(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	require('./$.iter-define')(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	},{"./$.iter-define":47,"./$.string-at":57}],67:[function(require,module,exports){
	require('./es6.array.iterator');
	var Iterators = require('./$.iterators');
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
	},{"./$.iterators":49,"./es6.array.iterator":64}]},{},[1])(1)
	});

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/evaluation.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	exports.evaluateTruthy = evaluateTruthy;
	exports.evaluate = evaluate;
	
	// This file contains Babels metainterpreter that can evaluate static code.
	
	/* eslint eqeqeq: 0 */
	
	/*:: import type NodePath from "./index";*/var VALID_CALLEES = ["String", "Number", "Math"];
	var INVALID_METHODS = ["random"];
	
	/**
	 * Walk the input `node` and statically evaluate if it's truthy.
	 *
	 * Returning `true` when we're sure that the expression will evaluate to a
	 * truthy value, `false` if we're sure that it will evaluate to a falsy
	 * value and `undefined` if we aren't sure. Because of this please do not
	 * rely on coercion when using this method and check with === if it's false.
	 *
	 * For example do:
	 *
	 *   if (t.evaluateTruthy(node) === false) falsyLogic();
	 *
	 * **AND NOT**
	 *
	 *   if (!t.evaluateTruthy(node)) falsyLogic();
	 *
	 */
	
	function evaluateTruthy() /*: boolean*/ {
	  var res = this.evaluate();
	  if (res.confident) return !!res.value;
	}
	
	/**
	 * Walk the input `node` and statically evaluate it.
	 *
	 * Returns an object in the form `{ confident, value }`. `confident` indicates
	 * whether or not we had to drop out of evaluating the expression because of
	 * hitting an unknown node that we couldn't confidently find the value of.
	 *
	 * Example:
	 *
	 *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
	 *   t.evaluate(parse("!true")) // { confident: true, value: false }
	 *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined }
	 *
	 */
	
	function evaluate() /*: { confident: boolean; value: any }*/ {
	  var confident = true;
	  var deoptPath /*: ?NodePath*/ = undefined;
	
	  function deopt(path) {
	    if (!confident) return;
	    deoptPath = path;
	    confident = false;
	  }
	
	  var value = evaluate(this);
	  if (!confident) value = undefined;
	  return {
	    confident: confident,
	    deopt: deoptPath,
	    value: value
	  };
	
	  function evaluate(path) {
	    if (!confident) return;
	
	    var node = path.node;
	
	    if (path.isSequenceExpression()) {
	      var exprs = path.get("expressions");
	      return evaluate(exprs[exprs.length - 1]);
	    }
	
	    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
	      return node.value;
	    }
	
	    if (path.isNullLiteral()) {
	      return null;
	    }
	
	    if (path.isTemplateLiteral()) {
	      var str = "";
	
	      var i = 0;
	      var exprs = path.get("expressions");
	
	      for (var _iterator = (node.quasis /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var elem = _ref;
	
	        // not confident, evaluated an expression we don't like
	        if (!confident) break;
	
	        // add on cooked element
	        str += elem.value.cooked;
	
	        // add on interpolated expression if it's present
	        var expr = exprs[i++];
	        if (expr) str += String(evaluate(expr));
	      }
	
	      if (!confident) return;
	      return str;
	    }
	
	    if (path.isConditionalExpression()) {
	      var testResult = evaluate(path.get("test"));
	      if (!confident) return;
	      if (testResult) {
	        return evaluate(path.get("consequent"));
	      } else {
	        return evaluate(path.get("alternate"));
	      }
	    }
	
	    if (path.isExpressionWrapper()) {
	      // TypeCastExpression, ExpressionStatement etc
	      return evaluate(path.get("expression"));
	    }
	
	    // "foo".length
	    if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {
	      var property = path.get("property");
	      var object = path.get("object");
	
	      if (object.isLiteral() && property.isIdentifier()) {
	        var _value = object.node.value;
	        var type = typeof _value;
	        if (type === "number" || type === "string") {
	          return _value[property.node.name];
	        }
	      }
	    }
	
	    if (path.isReferencedIdentifier()) {
	      var binding = path.scope.getBinding(node.name);
	      if (binding && binding.hasValue) {
	        return binding.value;
	      } else {
	        if (node.name === "undefined") {
	          return undefined;
	        } else if (node.name === "Infinity") {
	          return Infinity;
	        } else if (node.name === "NaN") {
	          return NaN;
	        }
	
	        var resolved = path.resolve();
	        if (resolved === path) {
	          return deopt(path);
	        } else {
	          return evaluate(resolved);
	        }
	      }
	    }
	
	    if (path.isUnaryExpression({ prefix: true })) {
	      if (node.operator === "void") {
	        // we don't need to evaluate the argument to know what this will return
	        return undefined;
	      }
	
	      var argument = path.get("argument");
	      if (node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
	        return "function";
	      }
	
	      var arg = evaluate(argument);
	      if (!confident) return;
	      switch (node.operator) {
	        case "!":
	          return !arg;
	        case "+":
	          return +arg;
	        case "-":
	          return -arg;
	        case "~":
	          return ~arg;
	        case "typeof":
	          return typeof arg;
	      }
	    }
	
	    if (path.isArrayExpression()) {
	      var arr = [];
	      var elems /*: Array<NodePath>*/ = path.get("elements");
	      for (var _iterator2 = elems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;
	
	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }
	
	        var elem = _ref2;
	
	        elem = elem.evaluate();
	
	        if (elem.confident) {
	          arr.push(elem.value);
	        } else {
	          return deopt(elem);
	        }
	      }
	      return arr;
	    }
	
	    if (path.isObjectExpression()) {
	      // todo
	    }
	
	    if (path.isLogicalExpression()) {
	      // If we are confident that one side of an && is false, or the left
	      // side of an || is true, we can be confident about the entire expression
	      var wasConfident = confident;
	      var left = evaluate(path.get("left"));
	      var leftConfident = confident;
	      confident = wasConfident;
	      var right = evaluate(path.get("right"));
	      var rightConfident = confident;
	      confident = leftConfident && rightConfident;
	
	      switch (node.operator) {
	        case "||":
	          // TODO consider having a "truthy type" that doesn't bail on
	          // left uncertainity but can still evaluate to truthy.
	          if (left && leftConfident) {
	            confident = true;
	            return left;
	          }
	
	          if (!confident) return;
	
	          return left || right;
	        case "&&":
	          if (!left && leftConfident || !right && rightConfident) {
	            confident = true;
	          }
	
	          if (!confident) return;
	
	          return left && right;
	      }
	    }
	
	    if (path.isBinaryExpression()) {
	      var left = evaluate(path.get("left"));
	      if (!confident) return;
	      var right = evaluate(path.get("right"));
	      if (!confident) return;
	
	      switch (node.operator) {
	        case "-":
	          return left - right;
	        case "+":
	          return left + right;
	        case "/":
	          return left / right;
	        case "*":
	          return left * right;
	        case "%":
	          return left % right;
	        case "**":
	          return Math.pow(left, right);
	        case "<":
	          return left < right;
	        case ">":
	          return left > right;
	        case "<=":
	          return left <= right;
	        case ">=":
	          return left >= right;
	        case "==":
	          return left == right;
	        case "!=":
	          return left != right;
	        case "===":
	          return left === right;
	        case "!==":
	          return left !== right;
	        case "|":
	          return left | right;
	        case "&":
	          return left & right;
	        case "^":
	          return left ^ right;
	        case "<<":
	          return left << right;
	        case ">>":
	          return left >> right;
	        case ">>>":
	          return left >>> right;
	      }
	    }
	
	    if (path.isCallExpression()) {
	      var callee = path.get("callee");
	      var context = undefined;
	      var func = undefined;
	
	      // Number(1);
	      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
	        func = global[node.callee.name];
	      }
	
	      if (callee.isMemberExpression()) {
	        var object = callee.get("object");
	        var property = callee.get("property");
	
	        // Math.min(1, 2)
	        if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0 && INVALID_METHODS.indexOf(property.node.name) < 0) {
	          context = global[object.node.name];
	          func = context[property.node.name];
	        }
	
	        // "abc".charCodeAt(4)
	        if (object.isLiteral() && property.isIdentifier()) {
	          var type = typeof object.node.value;
	          if (type === "string" || type === "number") {
	            context = object.node.value;
	            func = context[property.node.name];
	          }
	        }
	      }
	
	      if (func) {
	        var args = path.get("arguments").map(evaluate);
	        if (!confident) return;
	
	        return func.apply(context, args);
	      }
	    }
	
	    deopt(path);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/conversion.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods that convert the path node into another node or some other type of data.
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.ensureBlock = ensureBlock;
	exports.arrowFunctionToShadowed = arrowFunctionToShadowed;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function toComputedKey() /*: Object*/ {
	  var node = this.node;
	
	  var key = undefined;
	  if (this.isMemberExpression()) {
	    key = node.property;
	  } else if (this.isProperty() || this.isMethod()) {
	    key = node.key;
	  } else {
	    throw new ReferenceError("todo");
	  }
	
	  if (!node.computed) {
	    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	  }
	
	  return key;
	}
	
	function ensureBlock() {
	  return t.ensureBlock(this.node);
	}
	
	function arrowFunctionToShadowed() {
	  // todo: maybe error
	  if (!this.isArrowFunctionExpression()) return;
	
	  this.ensureBlock();
	
	  var node = this.node;
	
	  node.expression = false;
	  node.type = "FunctionExpression";
	  node.shadow = node.shadow || true;
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/introspection.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods responsible for introspecting the current path for certain values.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.matchesPattern = matchesPattern;
	exports.has = has;
	exports.isStatic = isStatic;
	exports.isnt = isnt;
	exports.equals = equals;
	exports.isNodeType = isNodeType;
	exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
	exports.isCompletionRecord = isCompletionRecord;
	exports.isStatementOrBlock = isStatementOrBlock;
	exports.referencesImport = referencesImport;
	exports.getSource = getSource;
	exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
	exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
	exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
	exports.resolve = resolve;
	exports._resolve = _resolve;
	
	var _lodashCollectionIncludes = __webpack_require__("./node_modules/lodash/collection/includes.js");
	
	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/**
	 * Match the current node if it matches the provided `pattern`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */
	
	/*:: import type NodePath from "./index";*/
	function matchesPattern(pattern /*: string*/, allowPartial /*:: ?: boolean*/) /*: boolean*/ {
	  // not a member expression
	  if (!this.isMemberExpression()) return false;
	
	  var parts = pattern.split(".");
	  var search = [this.node];
	  var i = 0;
	
	  function matches(name) {
	    var part = parts[i];
	    return part === "*" || name === part;
	  }
	
	  while (search.length) {
	    var node = search.shift();
	
	    if (allowPartial && i === parts.length) {
	      return true;
	    }
	
	    if (t.isIdentifier(node)) {
	      // this part doesn't match
	      if (!matches(node.name)) return false;
	    } else if (t.isLiteral(node)) {
	      // this part doesn't match
	      if (!matches(node.value)) return false;
	    } else if (t.isMemberExpression(node)) {
	      if (node.computed && !t.isLiteral(node.property)) {
	        // we can't deal with this
	        return false;
	      } else {
	        search.unshift(node.property);
	        search.unshift(node.object);
	        continue;
	      }
	    } else if (t.isThisExpression(node)) {
	      if (!matches("this")) return false;
	    } else {
	      // we can't deal with this
	      return false;
	    }
	
	    // too many parts
	    if (++i > parts.length) {
	      return false;
	    }
	  }
	
	  return i === parts.length;
	}
	
	/**
	 * Check whether we have the input `key`. If the `key` references an array then we check
	 * if the array has any items, otherwise we just check if it's falsy.
	 */
	
	function has(key) /*: boolean*/ {
	  var val = this.node && this.node[key];
	  if (val && Array.isArray(val)) {
	    return !!val.length;
	  } else {
	    return !!val;
	  }
	}
	
	/**
	 * Description
	 */
	
	function isStatic() {
	  return this.scope.isStatic(this.node);
	}
	
	/**
	 * Alias of `has`.
	 */
	
	var is = has;
	
	exports.is = is;
	/**
	 * Opposite of `has`.
	 */
	
	function isnt(key) /*: boolean*/ {
	  return !this.has(key);
	}
	
	/**
	 * Check whether the path node `key` strict equals `value`.
	 */
	
	function equals(key, value) /*: boolean*/ {
	  return this.node[key] === value;
	}
	
	/**
	 * Check the type against our stored internal type of the node. This is handy when a node has
	 * been removed yet we still internally know the type and need it to calculate node replacement.
	 */
	
	function isNodeType(type /*: string*/) /*: boolean*/ {
	  return t.isType(this.type, type);
	}
	
	/**
	 * This checks whether or now we're in one of the following positions:
	 *
	 *   for (KEY in right);
	 *   for (KEY;;);
	 *
	 * This is because these spots allow VariableDeclarations AND normal expressions so we need
	 * to tell the path replacement that it's ok to replace this with an expression.
	 */
	
	function canHaveVariableDeclarationOrExpression() {
	  return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
	}
	
	/**
	 * Check whether the current path references a completion record
	 */
	
	function isCompletionRecord(allowInsideFunction /*:: ?*/) {
	  var path = this;
	  var first = true;
	
	  do {
	    var container = path.container;
	
	    // we're in a function so can't be a completion record
	    if (path.isFunction() && !first) {
	      return !!allowInsideFunction;
	    }
	
	    first = false;
	
	    // check to see if we're the last item in the container and if we are
	    // we're a completion record!
	    if (Array.isArray(container) && path.key !== container.length - 1) {
	      return false;
	    }
	  } while ((path = path.parentPath) && !path.isProgram());
	
	  return true;
	}
	
	/**
	 * Check whether or not the current `key` allows either a single statement or block statement
	 * so we can explode it if necessary.
	 */
	
	function isStatementOrBlock() {
	  if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
	    return false;
	  } else {
	    return _lodashCollectionIncludes2["default"](t.STATEMENT_OR_BLOCK_KEYS, this.key);
	  }
	}
	
	/**
	 * Check if the currently assigned path references the `importName` of `moduleSource`.
	 */
	
	function referencesImport(moduleSource, importName) {
	  if (!this.isReferencedIdentifier()) return false;
	
	  var binding = this.scope.getBinding(this.node.name);
	  if (!binding || binding.kind !== "module") return false;
	
	  var path = binding.path;
	  var parent = path.parentPath;
	  if (!parent.isImportDeclaration()) return false;
	
	  // check moduleSource
	  if (parent.node.source.value === moduleSource) {
	    if (!importName) return true;
	  } else {
	    return false;
	  }
	
	  if (path.isImportDefaultSpecifier() && importName === "default") {
	    return true;
	  }
	
	  if (path.isImportNamespaceSpecifier() && importName === "*") {
	    return true;
	  }
	
	  if (path.isImportSpecifier() && path.node.imported.name === importName) {
	    return true;
	  }
	
	  return false;
	}
	
	/**
	 * Get the source code associated with this node.
	 */
	
	function getSource() {
	  var node = this.node;
	  if (node.end) {
	    return this.hub.file.code.slice(node.start, node.end);
	  } else {
	    return "";
	  }
	}
	
	function willIMaybeExecuteBefore(target) {
	  return this._guessExecutionStatusRelativeTo(target) !== "after";
	}
	
	/**
	 * Given a `target` check the execution status of it relative to the current path.
	 *
	 * "Execution status" simply refers to where or not we **think** this will execuete
	 * before or after the input `target` element.
	 */
	
	function _guessExecutionStatusRelativeTo(target) {
	  // check if the two paths are in different functions, we can't track execution of these
	  var targetFuncParent = target.scope.getFunctionParent();
	  var selfFuncParent = this.scope.getFunctionParent();
	
	  // here we check the `node` equality as sometimes we may have different paths for the
	  // same node due to path thrashing
	  if (targetFuncParent.node !== selfFuncParent.node) {
	    var _status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);
	    if (_status) {
	      return _status;
	    } else {
	      target = targetFuncParent.path;
	    }
	  }
	
	  var targetPaths = target.getAncestry();
	  if (targetPaths.indexOf(this) >= 0) return "after";
	
	  var selfPaths = this.getAncestry();
	
	  // get ancestor where the branches intersect
	  var commonPath = undefined;
	  var targetIndex = undefined;
	  var selfIndex = undefined;
	  for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
	    var selfPath = selfPaths[selfIndex];
	    targetIndex = targetPaths.indexOf(selfPath);
	    if (targetIndex >= 0) {
	      commonPath = selfPath;
	      break;
	    }
	  }
	  if (!commonPath) {
	    return "before";
	  }
	
	  // get the relationship paths that associate these nodes to their common ancestor
	  var targetRelationship = targetPaths[targetIndex - 1];
	  var selfRelationship = selfPaths[selfIndex - 1];
	  if (!targetRelationship || !selfRelationship) {
	    return "before";
	  }
	
	  // container list so let's see which one is after the other
	  if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
	    return targetRelationship.key > selfRelationship.key ? "before" : "after";
	  }
	
	  // otherwise we're associated by a parent node, check which key comes before the other
	  var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
	  var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
	  return targetKeyPosition > selfKeyPosition ? "before" : "after";
	}
	
	function _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {
	  var targetFuncPath = targetFuncParent.path;
	  if (!targetFuncPath.isFunctionDeclaration()) return;
	
	  // so we're in a completely different function, if this is a function declaration
	  // then we can be a bit smarter and handle cases where the function is either
	  // a. not called at all (part of an export)
	  // b. called directly
	  var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);
	
	  // no references!
	  if (!binding.references) return "before";
	
	  var referencePaths /*: Array<NodePath>*/ = binding.referencePaths;
	
	  // verify that all of the references are calls
	  for (var _iterator = referencePaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var path = _ref;
	
	    if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
	      return;
	    }
	  }
	
	  var allStatus = undefined;
	
	  // verify that all the calls have the same execution status
	  for (var _iterator2 = referencePaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;
	
	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }
	
	    var path = _ref2;
	
	    // if a reference is a child of the function we're checking against then we can
	    // safelty ignore it
	    var childOfFunction = !!path.find(function (path) {
	      return path.node === targetFuncPath.node;
	    });
	    if (childOfFunction) continue;
	
	    var _status2 = this._guessExecutionStatusRelativeTo(path);
	
	    if (allStatus) {
	      if (allStatus !== _status2) return;
	    } else {
	      allStatus = _status2;
	    }
	  }
	
	  return allStatus;
	}
	
	/**
	 * Resolve a "pointer" `NodePath` to it's absolute path.
	 */
	
	function resolve(dangerous, resolved) {
	  return this._resolve(dangerous, resolved) || this;
	}
	
	function _resolve(dangerous, /*:: ?*/resolved /*:: ?*/) /*: ?NodePath*/ {
	  // istanbul ignore next
	
	  var _this = this;
	
	  // detect infinite recursion
	  // todo: possibly have a max length on this just to be safe
	  if (resolved && resolved.indexOf(this) >= 0) return;
	
	  // we store all the paths we've "resolved" in this array to prevent infinite recursion
	  resolved = resolved || [];
	  resolved.push(this);
	
	  if (this.isVariableDeclarator()) {
	    if (this.get("id").isIdentifier()) {
	      return this.get("init").resolve(dangerous, resolved);
	    } else {
	      // otherwise it's a request for a pattern and that's a bit more tricky
	    }
	  } else if (this.isReferencedIdentifier()) {
	      var binding = this.scope.getBinding(this.node.name);
	      if (!binding) return;
	
	      // reassigned so we can't really resolve it
	      if (!binding.constant) return;
	
	      // todo - lookup module in dependency graph
	      if (binding.kind === "module") return;
	
	      if (binding.path !== this) {
	        var _ret = (function () {
	          var ret = binding.path.resolve(dangerous, resolved);
	          // If the identifier resolves to parent node then we can't really resolve it.
	          if (_this.find(function (parent) {
	            return parent.node === ret.node;
	          })) return {
	              v: undefined
	            };
	          return {
	            v: ret
	          };
	        })();
	
	        // istanbul ignore next
	        if (typeof _ret === "object") return _ret.v;
	      }
	    } else if (this.isTypeCastExpression()) {
	      return this.get("expression").resolve(dangerous, resolved);
	    } else if (dangerous && this.isMemberExpression()) {
	      // this is dangerous, as non-direct target assignments will mutate it's state
	      // making this resolution inaccurate
	
	      var targetKey = this.toComputedKey();
	      if (!t.isLiteral(targetKey)) return;
	
	      var targetName = targetKey.value;
	
	      var target = this.get("object").resolve(dangerous, resolved);
	
	      if (target.isObjectExpression()) {
	        var props = target.get("properties");
	        for (var _iterator3 = (props /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	          var _ref3;
	
	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }
	
	          var prop = _ref3;
	
	          if (!prop.isProperty()) continue;
	
	          var key = prop.get("key");
	
	          // { foo: obj }
	          var match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
	
	          // { "foo": "obj" } or { ["foo"]: "obj" }
	          match = match || key.isLiteral({ value: targetName });
	
	          if (match) return prop.get("value").resolve(dangerous, resolved);
	        }
	      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
	        var elems = target.get("elements");
	        var elem = elems[targetName];
	        if (elem) return elem.resolve(dangerous, resolved);
	      }
	    }
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/context.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods responsible for maintaining a TraversalContext.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	exports.call = call;
	exports._call = _call;
	exports.isBlacklisted = isBlacklisted;
	exports.visit = visit;
	exports.skip = skip;
	exports.skipKey = skipKey;
	exports.stop = stop;
	exports.setScope = setScope;
	exports.setContext = setContext;
	exports.resync = resync;
	exports._resyncParent = _resyncParent;
	exports._resyncKey = _resyncKey;
	exports._resyncList = _resyncList;
	exports._resyncRemoved = _resyncRemoved;
	exports.popContext = popContext;
	exports.pushContext = pushContext;
	exports.setup = setup;
	exports.setKey = setKey;
	exports.requeue = requeue;
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	function call(key) /*: boolean*/ {
	  var opts = this.opts;
	
	  this.debug(function () {
	    return key;
	  });
	
	  if (this.node) {
	    if (this._call(opts[key])) return true;
	  }
	
	  if (this.node) {
	    return this._call(opts[this.node.type] && opts[this.node.type][key]);
	  }
	
	  return false;
	}
	
	function _call(fns /*:: ?: Array<Function>*/) /*: boolean*/ {
	  if (!fns) return false;
	
	  for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var fn = _ref;
	
	    if (!fn) continue;
	
	    var node = this.node;
	    if (!node) return true;
	
	    var ret = fn.call(this.state, this, this.state);
	    if (ret) throw new Error("Unexpected return value from visitor method " + fn);
	
	    // node has been replaced, it will have been requeued
	    if (this.node !== node) return true;
	
	    if (this.shouldStop || this.shouldSkip || this.removed) return true;
	  }
	
	  return false;
	}
	
	function isBlacklisted() /*: boolean*/ {
	  var blacklist = this.opts.blacklist;
	  return blacklist && blacklist.indexOf(this.node.type) > -1;
	}
	
	function visit() /*: boolean*/ {
	  if (!this.node) {
	    return false;
	  }
	
	  if (this.isBlacklisted()) {
	    return false;
	  }
	
	  if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
	    return false;
	  }
	
	  if (this.call("enter") || this.shouldSkip) {
	    this.debug(function () {
	      return "Skip...";
	    });
	    return this.shouldStop;
	  }
	
	  this.debug(function () {
	    return "Recursing into...";
	  });
	  _index2["default"].node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
	
	  this.call("exit");
	
	  return this.shouldStop;
	}
	
	function skip() {
	  this.shouldSkip = true;
	}
	
	function skipKey(key) {
	  this.skipKeys[key] = true;
	}
	
	function stop() {
	  this.shouldStop = true;
	  this.shouldSkip = true;
	}
	
	function setScope() {
	  if (this.opts && this.opts.noScope) return;
	
	  var target = this.context && this.context.scope;
	
	  if (!target) {
	    var path = this.parentPath;
	    while (path && !target) {
	      if (path.opts && path.opts.noScope) return;
	
	      target = path.scope;
	      path = path.parentPath;
	    }
	  }
	
	  this.scope = this.getScope(target);
	  if (this.scope) this.scope.init();
	}
	
	function setContext(context) {
	  this.shouldSkip = false;
	  this.shouldStop = false;
	  this.removed = false;
	  this.skipKeys = {};
	
	  if (context) {
	    this.context = context;
	    this.state = context.state;
	    this.opts = context.opts;
	  }
	
	  this.setScope();
	
	  return this;
	}
	
	/**
	 * Here we resync the node paths `key` and `container`. If they've changed according
	 * to what we have stored internally then we attempt to resync by crawling and looking
	 * for the new values.
	 */
	
	function resync() {
	  if (this.removed) return;
	
	  this._resyncParent();
	  this._resyncList();
	  this._resyncKey();
	  //this._resyncRemoved();
	}
	
	function _resyncParent() {
	  if (this.parentPath) {
	    this.parent = this.parentPath.node;
	  }
	}
	
	function _resyncKey() {
	  if (!this.container) return;
	
	  if (this.node === this.container[this.key]) return;
	
	  // grrr, path key is out of sync. this is likely due to a modification to the AST
	  // not done through our path APIs
	
	  if (Array.isArray(this.container)) {
	    for (var i = 0; i < this.container.length; i++) {
	      if (this.container[i] === this.node) {
	        return this.setKey(i);
	      }
	    }
	  } else {
	    for (var key in this.container) {
	      if (this.container[key] === this.node) {
	        return this.setKey(key);
	      }
	    }
	  }
	
	  // ¯\_(ツ)_/¯ who knows where it's gone lol
	  this.key = null;
	}
	
	function _resyncList() {
	  if (!this.parent || !this.inList) return;
	
	  var newContainer = this.parent[this.listKey];
	  if (this.container === newContainer) return;
	
	  // container is out of sync. this is likely the result of it being reassigned
	  this.container = newContainer || null;
	}
	
	function _resyncRemoved() {
	  if (this.key == null || !this.container || this.container[this.key] !== this.node) {
	    this._markRemoved();
	  }
	}
	
	function popContext() {
	  this.contexts.pop();
	  this.setContext(this.contexts[this.contexts.length - 1]);
	}
	
	function pushContext(context) {
	  this.contexts.push(context);
	  this.setContext(context);
	}
	
	function setup(parentPath, container, listKey, key) {
	  this.inList = !!listKey;
	  this.listKey = listKey;
	  this.parentKey = listKey || key;
	  this.container = container;
	
	  this.parentPath = parentPath || this.parentPath;
	  this.setKey(key);
	}
	
	function setKey(key) {
	  this.key = key;
	  this.node = this.container[this.key];
	  this.type = this.node && this.node.type;
	}
	
	function requeue() {
	  var path = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];
	
	  if (path.removed) return;
	
	  for (var _iterator2 = this.contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;
	
	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }
	
	    var context = _ref2;
	
	    context.maybeQueue(path);
	  }
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/removal.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods responsible for removing a node.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	exports.remove = remove;
	exports._callRemovalHooks = _callRemovalHooks;
	exports._remove = _remove;
	exports._markRemoved = _markRemoved;
	exports._assertUnremoved = _assertUnremoved;
	
	var _libRemovalHooks = __webpack_require__("./node_modules/babel-traverse/lib/path/lib/removal-hooks.js");
	
	function remove() {
	  this._assertUnremoved();
	
	  this.resync();
	
	  if (this._callRemovalHooks()) {
	    this._markRemoved();
	    return;
	  }
	
	  this.shareCommentsWithSiblings();
	  this._remove();
	  this._markRemoved();
	}
	
	function _callRemovalHooks() {
	  for (var _iterator = (_libRemovalHooks.hooks /*: Array<Function>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var fn = _ref;
	
	    if (fn(this, this.parentPath)) return true;
	  }
	}
	
	function _remove() {
	  if (Array.isArray(this.container)) {
	    this.container.splice(this.key, 1);
	    this.updateSiblingKeys(this.key, -1);
	  } else {
	    this._replaceWith(null);
	  }
	}
	
	function _markRemoved() {
	  this.shouldSkip = true;
	  this.removed = true;
	  this.node = null;
	}
	
	function _assertUnremoved() {
	  if (this.removed) {
	    throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
	  }
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/lib/removal-hooks.js":
/***/ function(module, exports) {

	// this file contains hooks that handle ancestry cleanup of parent nodes when removing children
	
	/**
	 * Pre hooks should be used for either rejecting removal or delegating removal
	 */
	
	"use strict";
	
	exports.__esModule = true;
	var hooks = [function (self, parent) {
	  if (self.key === "body" && parent.isArrowFunctionExpression()) {
	    self.replaceWith(self.scope.buildUndefinedNode());
	    return true;
	  }
	}, function (self, parent) {
	  var removeParent = false;
	
	  // while (NODE);
	  // removing the test of a while/switch, we can either just remove it entirely *or* turn the `test` into `true`
	  // unlikely that the latter will ever be what's wanted so we just remove the loop to avoid infinite recursion
	  removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());
	
	  // export NODE;
	  // just remove a declaration for an export as this is no longer valid
	  removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();
	
	  // label: NODE
	  // stray labeled statement with no body
	  removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();
	
	  // let NODE;
	  // remove an entire declaration if there are no declarators left
	  removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1;
	
	  // NODE;
	  // remove the entire expression statement if there's no expression
	  removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();
	
	  if (removeParent) {
	    parent.remove();
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
	    // (node, NODE);
	    // we've just removed the second element of a sequence expression so let's turn that sequence
	    // expression into a regular expression
	    parent.replaceWith(parent.node.expressions[0]);
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isBinary()) {
	    // left + NODE;
	    // NODE + right;
	    // we're in a binary expression, better remove it and replace it with the last expression
	    if (self.key === "left") {
	      parent.replaceWith(parent.node.right);
	    } else {
	      // key === "right"
	      parent.replaceWith(parent.node.left);
	    }
	    return true;
	  }
	}];
	exports.hooks = hooks;

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/modification.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods that modify the path/node in some ways.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.insertBefore = insertBefore;
	exports._containerInsert = _containerInsert;
	exports._containerInsertBefore = _containerInsertBefore;
	exports._containerInsertAfter = _containerInsertAfter;
	exports._maybePopFromStatements = _maybePopFromStatements;
	exports.insertAfter = insertAfter;
	exports.updateSiblingKeys = updateSiblingKeys;
	exports._verifyNodeList = _verifyNodeList;
	exports.unshiftContainer = unshiftContainer;
	exports.pushContainer = pushContainer;
	exports.hoist = hoist;
	
	var _constants = __webpack_require__("./node_modules/babel-traverse/lib/path/constants.js");
	
	var _libHoister = __webpack_require__("./node_modules/babel-traverse/lib/path/lib/hoister.js");
	
	var _libHoister2 = _interopRequireDefault(_libHoister);
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/**
	 * Insert the provided nodes before the current one.
	 */
	
	function insertBefore(nodes) {
	  this._assertUnremoved();
	
	  nodes = this._verifyNodeList(nodes);
	
	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertBefore(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) nodes.push(this.node);
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertBefore(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.push(this.node);
	      this._replaceWith(t.blockStatement(nodes));
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }
	
	  return [this];
	}
	
	function _containerInsert(from, nodes) {
	  this.updateSiblingKeys(from, nodes.length);
	
	  var paths = [];
	
	  for (var i = 0; i < nodes.length; i++) {
	    var to = from + i;
	    var node = nodes[i];
	    this.container.splice(to, 0, node);
	
	    if (this.context) {
	      var _path = this.context.create(this.parent, this.container, to, this.listKey);
	      paths.push(_path);
	    } else {
	      paths.push(_index2["default"].get({
	        parentPath: this.parentPath,
	        parent: this.parent,
	        container: this.container,
	        listKey: this.listKey,
	        key: to
	      }));
	    }
	  }
	
	  var contexts = this.contexts;
	  var path = this;
	  while (!contexts.length) {
	    path = path.parentPath;
	    contexts = path.contexts;
	  }
	
	  for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var _path2 = _ref;
	
	    _path2.setScope();
	    _path2.debug(function () {
	      return "Inserted.";
	    });
	
	    for (var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var context = _ref2;
	
	      context.maybeQueue(_path2, true);
	    }
	  }
	
	  return paths;
	}
	
	function _containerInsertBefore(nodes) {
	  return this._containerInsert(this.key, nodes);
	}
	
	function _containerInsertAfter(nodes) {
	  return this._containerInsert(this.key + 1, nodes);
	}
	
	function _maybePopFromStatements(nodes) {
	  var last = nodes[nodes.length - 1];
	  var isIdentifier = t.isIdentifier(last) || t.isExpressionStatement(last) && t.isIdentifier(last.expression);
	
	  if (isIdentifier && !this.isCompletionRecord()) {
	    nodes.pop();
	  }
	}
	
	/**
	 * Insert the provided nodes after the current one. When inserting nodes after an
	 * expression, ensure that the completion record is correct by pushing the current node.
	 */
	
	function insertAfter(nodes) {
	  this._assertUnremoved();
	
	  nodes = this._verifyNodeList(nodes);
	
	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertAfter(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) {
	      var temp = this.scope.generateDeclaredUidIdentifier();
	      nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
	      nodes.push(t.expressionStatement(temp));
	    }
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertAfter(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.unshift(this.node);
	      this._replaceWith(t.blockStatement(nodes));
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }
	
	  return [this];
	}
	
	/**
	 * Update all sibling node paths after `fromIndex` by `incrementBy`.
	 */
	
	function updateSiblingKeys(fromIndex, incrementBy) {
	  if (!this.parent) return;
	
	  var paths = this.parent[_constants.PATH_CACHE_KEY];
	  for (var i = 0; i < paths.length; i++) {
	    var path = paths[i];
	    if (path.key >= fromIndex) {
	      path.key += incrementBy;
	    }
	  }
	}
	
	function _verifyNodeList(nodes) {
	  if (!nodes) {
	    return [];
	  }
	
	  if (nodes.constructor !== Array) {
	    nodes = [nodes];
	  }
	
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var msg = undefined;
	
	    if (!node) {
	      msg = "has falsy node";
	    } else if (typeof node !== "object") {
	      msg = "contains a non-object node";
	    } else if (!node.type) {
	      msg = "without a type";
	    } else if (node instanceof _index2["default"]) {
	      msg = "has a NodePath when it expected a raw object";
	    }
	
	    if (msg) {
	      var type = Array.isArray(node) ? "array" : typeof node;
	      throw new Error("Node list " + msg + " with the index of " + i + " and type of " + type);
	    }
	  }
	
	  return nodes;
	}
	
	function unshiftContainer(listKey, nodes) {
	  this._assertUnremoved();
	
	  nodes = this._verifyNodeList(nodes);
	
	  // get the first path and insert our nodes before it, if it doesn't exist then it
	  // doesn't matter, our nodes will be inserted anyway
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: this.node[listKey],
	    listKey: listKey,
	    key: 0
	  });
	
	  return path.insertBefore(nodes);
	}
	
	function pushContainer(listKey, nodes) {
	  this._assertUnremoved();
	
	  nodes = this._verifyNodeList(nodes);
	
	  // get an invisible path that represents the last node + 1 and replace it with our
	  // nodes, effectively inlining it
	
	  var container = this.node[listKey];
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: container,
	    listKey: listKey,
	    key: container.length
	  });
	
	  return path.replaceWithMultiple(nodes);
	}
	
	/**
	 * Hoist the current node to the highest scope possible and return a UID
	 * referencing it.
	 */
	
	function hoist() {
	  var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];
	
	  var hoister = new _libHoister2["default"](this, scope);
	  return hoister.run();
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/lib/hoister.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var referenceVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    if (path.isJSXIdentifier() && _babelTypes.react.isCompatTag(path.node.name)) {
	      return;
	    }
	
	    // direct references that we need to track to hoist this to the highest scope we can
	    var binding = path.scope.getBinding(path.node.name);
	    if (!binding) return;
	
	    // this binding isn't accessible from the parent scope so we can safely ignore it
	    // eg. it's in a closure etc
	    if (binding !== state.scope.getBinding(path.node.name)) return;
	
	    if (binding.constant) {
	      state.bindings[path.node.name] = binding;
	    } else {
	      for (var _iterator = (binding.constantViolations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var violationPath = _ref;
	
	        state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
	      }
	    }
	  }
	};
	
	var PathHoister = (function () {
	  function PathHoister(path, scope) {
	    _classCallCheck(this, PathHoister);
	
	    this.breakOnScopePaths = [];
	    this.bindings = {};
	    this.scopes = [];
	    this.scope = scope;
	    this.path = path;
	  }
	
	  PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
	    for (var key in this.bindings) {
	      var binding = this.bindings[key];
	      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
	        return false;
	      }
	    }
	
	    return true;
	  };
	
	  PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
	    var scope = this.path.scope;
	    do {
	      if (this.isCompatibleScope(scope)) {
	        this.scopes.push(scope);
	      } else {
	        break;
	      }
	
	      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
	        break;
	      }
	    } while (scope = scope.parent);
	  };
	
	  PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
	    var scopes = this.scopes;
	
	    var scope = scopes.pop();
	    if (!scope) return;
	
	    if (scope.path.isFunction()) {
	      if (this.hasOwnParamBindings(scope)) {
	        // should ignore this scope since it's ourselves
	        if (this.scope === scope) return;
	
	        // needs to be attached to the body
	        return scope.path.get("body").get("body")[0];
	      } else {
	        // doesn't need to be be attached to this scope
	        return this.getNextScopeStatementParent();
	      }
	    } else if (scope.path.isProgram()) {
	      return this.getNextScopeStatementParent();
	    }
	  };
	
	  PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
	    var scope = this.scopes.pop();
	    if (scope) return scope.path.getStatementParent();
	  };
	
	  PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
	    for (var _name in this.bindings) {
	      if (!scope.hasOwnBinding(_name)) continue;
	
	      var binding = this.bindings[_name];
	      if (binding.kind === "param") return true;
	    }
	    return false;
	  };
	
	  PathHoister.prototype.run = function run() {
	    var node = this.path.node;
	    if (node._hoisted) return;
	    node._hoisted = true;
	
	    this.path.traverse(referenceVisitor, this);
	
	    this.getCompatibleScopes();
	
	    var attachTo = this.getAttachmentPath();
	    if (!attachTo) return;
	
	    // don't bother hoisting to the same function as this will cause multiple branches to be evaluated more than once leading to a bad optimisation
	    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
	
	    var uid = attachTo.scope.generateUidIdentifier("ref");
	
	    attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);
	
	    var parent = this.path.parentPath;
	
	    if (parent.isJSXElement() && this.path.container === parent.node.children) {
	      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with
	      // an expression container
	      uid = t.JSXExpressionContainer(uid);
	    }
	
	    this.path.replaceWith(uid);
	  };
	
	  return PathHoister;
	})();
	
	exports["default"] = PathHoister;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/family.js":
/***/ function(module, exports, __webpack_require__) {

	// This file contains methods responsible for dealing with/retrieving children or siblings.
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getStatementParent = getStatementParent;
	exports.getOpposite = getOpposite;
	exports.getCompletionRecords = getCompletionRecords;
	exports.getSibling = getSibling;
	exports.get = get;
	exports._getKey = _getKey;
	exports._getPattern = _getPattern;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	
	var _index = __webpack_require__("./node_modules/babel-traverse/lib/path/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type TraversalContext from "../index";*/
	function getStatementParent() /*: ?NodePath*/ {
	  var path = this;
	
	  do {
	    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
	      break;
	    } else {
	      path = path.parentPath;
	    }
	  } while (path);
	
	  if (path && (path.isProgram() || path.isFile())) {
	    throw new Error("File/Program node, we can't possibly find a statement parent to this");
	  }
	
	  return path;
	}
	
	function getOpposite() {
	  if (this.key === "left") {
	    return this.getSibling("right");
	  } else if (this.key === "right") {
	    return this.getSibling("left");
	  }
	}
	
	function getCompletionRecords() /*: Array*/ {
	  var paths = [];
	
	  var add = function add(path) {
	    if (path) paths = paths.concat(path.getCompletionRecords());
	  };
	
	  if (this.isIfStatement()) {
	    add(this.get("consequent"));
	    add(this.get("alternate"));
	  } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
	    add(this.get("body"));
	  } else if (this.isProgram() || this.isBlockStatement()) {
	    add(this.get("body").pop());
	  } else if (this.isFunction()) {
	    return this.get("body").getCompletionRecords();
	  } else if (this.isTryStatement()) {
	    add(this.get("block"));
	    add(this.get("handler"));
	    add(this.get("finalizer"));
	  } else {
	    paths.push(this);
	  }
	
	  return paths;
	}
	
	function getSibling(key) {
	  return _index2["default"].get({
	    parentPath: this.parentPath,
	    parent: this.parent,
	    container: this.container,
	    listKey: this.listKey,
	    key: key
	  });
	}
	
	function get(key /*: string*/, context /*:: ?: boolean | TraversalContext*/) /*: NodePath*/ {
	  if (context === true) context = this.context;
	  var parts = key.split(".");
	  if (parts.length === 1) {
	    // "foo"
	    return this._getKey(key, context);
	  } else {
	    // "foo.bar"
	    return this._getPattern(parts, context);
	  }
	}
	
	function _getKey(key, context /*:: ?*/) {
	  // istanbul ignore next
	
	  var _this = this;
	
	  var node = this.node;
	  var container = node[key];
	
	  if (Array.isArray(container)) {
	    // requested a container so give them all the paths
	    return container.map(function (_, i) {
	      return _index2["default"].get({
	        listKey: key,
	        parentPath: _this,
	        parent: node,
	        container: container,
	        key: i
	      }).setContext(context);
	    });
	  } else {
	    return _index2["default"].get({
	      parentPath: this,
	      parent: node,
	      container: node,
	      key: key
	    }).setContext(context);
	  }
	}
	
	function _getPattern(parts, context) {
	  var path = this;
	  for (var _iterator = (parts /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var part = _ref;
	
	    if (part === ".") {
	      path = path.parentPath;
	    } else {
	      if (Array.isArray(path)) {
	        path = path[part];
	      } else {
	        path = path.get(part, context);
	      }
	    }
	  }
	  return path;
	}
	
	function getBindingIdentifiers(duplicates /*:: ?*/) {
	  return t.getBindingIdentifiers(this.node, duplicates);
	}
	
	function getOuterBindingIdentifiers(duplicates /*:: ?*/) {
	  return t.getOuterBindingIdentifiers(this.node, duplicates);
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/path/comments.js":
/***/ function(module, exports) {

	// This file contains methods responsible for dealing with comments.
	
	/**
	 * Share comments amongst siblings.
	 */
	
	"use strict";
	
	exports.__esModule = true;
	exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
	exports.addComment = addComment;
	exports.addComments = addComments;
	
	function shareCommentsWithSiblings() {
	  var node = this.node;
	  if (!node) return;
	
	  var trailing = node.trailingComments;
	  var leading = node.leadingComments;
	  if (!trailing && !leading) return;
	
	  var prev = this.getSibling(this.key - 1);
	  var next = this.getSibling(this.key + 1);
	
	  if (!prev.node) prev = next;
	  if (!next.node) next = prev;
	
	  prev.addComments("trailing", leading);
	  next.addComments("leading", trailing);
	}
	
	function addComment(type, content, line /*:: ?*/) {
	  this.addComments(type, [{
	    type: line ? "CommentLine" : "CommentBlock",
	    value: content
	  }]);
	}
	
	/**
	 * Give node `comments` of the specified `type`.
	 */
	
	function addComments(type /*: string*/, comments /*: Array*/) {
	  if (!comments) return;
	
	  var node = this.node;
	  if (!node) return;
	
	  var key = type + "Comments";
	
	  if (node[key]) {
	    node[key] = node[key].concat(comments);
	  } else {
	    node[key] = comments;
	  }
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/visitors.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	exports.explode = explode;
	exports.verify = verify;
	exports.merge = merge;
	
	var _pathLibVirtualTypes = __webpack_require__("./node_modules/babel-traverse/lib/path/lib/virtual-types.js");
	
	var virtualTypes = _interopRequireWildcard(_pathLibVirtualTypes);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	/**
	 * explode() will take a visitor object with all of the various shorthands
	 * that we support, and validates & normalizes it into a common format, ready
	 * to be used in traversal
	 *
	 * The various shorthands are:
	 * * `Identifier() { ... }` -> `Identifier: { enter() { ... } }`
	 * * `"Identifier|NumericLiteral": { ... }` -> `Identifier: { ... }, NumericLiteral: { ... }`
	 * * Aliases in `babel-types`: e.g. `Property: { ... }` -> `ObjectProperty: { ... }, ClassProperty: { ... }`
	 *
	 * Other normalizations are:
	 * * Visitors of virtual types are wrapped, so that they are only visited when
	 *   their dynamic check passes
	 * * `enter` and `exit` functions are wrapped in arrays, to ease merging of
	 *   visitors
	 */
	
	function explode(visitor) {
	  if (visitor._exploded) return visitor;
	  visitor._exploded = true;
	
	  // normalise pipes
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;
	
	    var parts /*: Array<string>*/ = nodeType.split("|");
	    if (parts.length === 1) continue;
	
	    var fns = visitor[nodeType];
	    delete visitor[nodeType];
	
	    for (var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var part = _ref;
	
	      visitor[part] = fns;
	    }
	  }
	
	  // verify data structure
	  verify(visitor);
	
	  // make sure there's no __esModule type since this is because we're using loose mode
	  // and it sets __esModule to be enumerable on all modules :(
	  delete visitor.__esModule;
	
	  // ensure visitors are objects
	  ensureEntranceObjects(visitor);
	
	  // ensure enter/exit callbacks are arrays
	  ensureCallbackArrays(visitor);
	
	  // add type wrappers
	  for (var _iterator2 = (_Object$keys(visitor) /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;
	
	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }
	
	    var nodeType = _ref2;
	
	    if (shouldIgnoreKey(nodeType)) continue;
	
	    var wrapper = virtualTypes[nodeType];
	    if (!wrapper) continue;
	
	    // wrap all the functions
	    var fns = visitor[nodeType];
	    for (var type in fns) {
	      fns[type] = wrapCheck(wrapper, fns[type]);
	    }
	
	    // clear it from the visitor
	    delete visitor[nodeType];
	
	    if (wrapper.types) {
	      for (var _iterator3 = (wrapper.types /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;
	
	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }
	
	        var type = _ref3;
	
	        // merge the visitor if necessary or just put it back in
	        if (visitor[type]) {
	          mergePair(visitor[type], fns);
	        } else {
	          visitor[type] = fns;
	        }
	      }
	    } else {
	      mergePair(visitor, fns);
	    }
	  }
	
	  // add aliases
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;
	
	    var fns = visitor[nodeType];
	
	    var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[nodeType];
	
	    var deprecratedKey = t.DEPRECATED_KEYS[nodeType];
	    if (deprecratedKey) {
	      console.trace("Visitor defined for " + nodeType + " but it has been renamed to " + deprecratedKey);
	      aliases = [deprecratedKey];
	    }
	
	    if (!aliases) continue;
	
	    // clear it from the visitor
	    delete visitor[nodeType];
	
	    for (var _iterator4 = aliases, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;
	
	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }
	
	      var alias = _ref4;
	
	      var existing = visitor[alias];
	      if (existing) {
	        mergePair(existing, fns);
	      } else {
	        visitor[alias] = _lodashLangClone2["default"](fns);
	      }
	    }
	  }
	
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;
	
	    ensureCallbackArrays(visitor[nodeType]);
	  }
	
	  return visitor;
	}
	
	function verify(visitor) {
	  if (visitor._verified) return;
	
	  if (typeof visitor === "function") {
	    throw new Error(messages.get("traverseVerifyRootFunction"));
	  }
	
	  for (var nodeType in visitor) {
	    if (nodeType === "enter" || nodeType === "exit") {
	      validateVisitorMethods(nodeType, visitor[nodeType]);
	    }
	
	    if (shouldIgnoreKey(nodeType)) continue;
	
	    if (t.TYPES.indexOf(nodeType) < 0) {
	      throw new Error(messages.get("traverseVerifyNodeType", nodeType));
	    }
	
	    var visitors = visitor[nodeType];
	    if (typeof visitors === "object") {
	      for (var visitorKey in visitors) {
	        if (visitorKey === "enter" || visitorKey === "exit") {
	          // verify that it just contains functions
	          validateVisitorMethods(nodeType + "." + visitorKey, visitors[visitorKey]);
	        } else {
	          throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
	        }
	      }
	    }
	  }
	
	  visitor._verified = true;
	}
	
	function validateVisitorMethods(path, val) {
	  var fns = [].concat(val);
	  for (var _iterator5 = fns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var fn = _ref5;
	
	    if (typeof fn !== "function") {
	      throw new TypeError("Non-function found defined in " + path + " with type " + typeof fn);
	    }
	  }
	}
	
	function merge(visitors /*: Array*/) {
	  var states /*: Array*/ = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	
	  var rootVisitor = {};
	
	  for (var i = 0; i < visitors.length; i++) {
	    var visitor = visitors[i];
	    var state = states[i];
	
	    explode(visitor);
	
	    for (var type in visitor) {
	      var visitorType = visitor[type];
	
	      // if we have state then overload the callbacks to take it
	      if (state) visitorType = wrapWithState(visitorType, state);
	
	      var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
	      mergePair(nodeVisitor, visitorType);
	    }
	  }
	
	  return rootVisitor;
	}
	
	function wrapWithState(oldVisitor, state) {
	  var newVisitor = {};
	
	  for (var key in oldVisitor) {
	    var fns = oldVisitor[key];
	
	    // not an enter/exit array of callbacks
	    if (!Array.isArray(fns)) continue;
	
	    fns = fns.map(function (fn) {
	      var newFn = function newFn(path) {
	        return fn.call(state, path, state);
	      };
	      newFn.toString = function () {
	        return fn.toString();
	      };
	      return newFn;
	    });
	
	    newVisitor[key] = fns;
	  }
	
	  return newVisitor;
	}
	
	function ensureEntranceObjects(obj) {
	  for (var key in obj) {
	    if (shouldIgnoreKey(key)) continue;
	
	    var fns = obj[key];
	    if (typeof fns === "function") {
	      obj[key] = { enter: fns };
	    }
	  }
	}
	
	function ensureCallbackArrays(obj) {
	  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
	  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
	}
	
	function wrapCheck(wrapper, fn) {
	  var newFn = function newFn(path) {
	    if (wrapper.checkPath(path)) {
	      return fn.apply(this, arguments);
	    }
	  };
	  newFn.toString = function () {
	    return fn.toString();
	  };
	  return newFn;
	}
	
	function shouldIgnoreKey(key) {
	  // internal/hidden key
	  if (key[0] === "_") return true;
	
	  // ignore function keys
	  if (key === "enter" || key === "exit" || key === "shouldSkip") return true;
	
	  // ignore other options
	  if (key === "blacklist" || key === "noScope" || key === "skipKeys") return true;
	
	  return false;
	}
	
	function mergePair(dest, src) {
	  for (var key in src) {
	    dest[key] = [].concat(dest[key] || [], src[key]);
	  }
	}

/***/ },

/***/ "./node_modules/babel-traverse/lib/hub.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	exports.__esModule = true;
	
	var Hub = function Hub(file, options) {
	  _classCallCheck(this, Hub);
	
	  this.file = file;
	  this.options = options;
	};
	
	exports["default"] = Hub;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-types/lib/flow.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
	
	var _index = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */
	
	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);
	
	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}
	
	/**
	 * Dedupe type annotations.
	 */
	
	function removeTypeDuplicates(nodes /*: Array<Object>*/) {
	  var generics = {};
	  var bases = {};
	
	  // store union type groups to circular references
	  var typeGroups = [];
	
	  var types = [];
	
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;
	
	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }
	
	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }
	
	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }
	
	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }
	
	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;
	
	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }
	
	      continue;
	    }
	
	    types.push(node);
	  }
	
	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }
	
	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }
	
	  return types;
	}
	
	/**
	 * Create a type anotation based on typeof expression.
	 */
	
	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/option-manager.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _apiNode = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/api/node.js");
	
	var context = _interopRequireWildcard(_apiNode);
	
	var _plugin2 = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/plugin.js");
	
	var _plugin3 = _interopRequireDefault(_plugin2);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _index = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/index.js");
	
	var _helpersResolve = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/helpers/resolve.js");
	
	var _helpersResolve2 = _interopRequireDefault(_helpersResolve);
	
	var _json5 = __webpack_require__("./node_modules/json5/lib/json5.js");
	
	var _json52 = _interopRequireDefault(_json5);
	
	var _pathIsAbsolute = __webpack_require__("./node_modules/path-is-absolute/index.js");
	
	var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);
	
	var _pathExists = __webpack_require__("./node_modules/path-exists/index.js");
	
	var _pathExists2 = _interopRequireDefault(_pathExists);
	
	var _lodashLangCloneDeep = __webpack_require__("./node_modules/lodash/lang/cloneDeep.js");
	
	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var _helpersMerge = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/helpers/merge.js");
	
	var _helpersMerge2 = _interopRequireDefault(_helpersMerge);
	
	var _config = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/config.js");
	
	var _config2 = _interopRequireDefault(_config);
	
	var _path = __webpack_require__("./node_modules/path-browserify/index.js");
	
	var _path2 = _interopRequireDefault(_path);
	
	var _fs = __webpack_require__("./node_modules/node-libs-browser/mock/empty.js");
	
	var _fs2 = _interopRequireDefault(_fs);
	
	/*:: import type Logger from "../logger";*/
	
	var existsCache = {};
	var jsonCache = {};
	
	var BABELIGNORE_FILENAME = ".babelignore";
	var BABELRC_FILENAME = ".babelrc";
	var PACKAGE_FILENAME = "package.json";
	
	function exists(filename) {
	  var cached = existsCache[filename];
	  if (cached == null) {
	    return existsCache[filename] = _pathExists2["default"].sync(filename);
	  } else {
	    return cached;
	  }
	}
	
	/*:: type PluginObject = {
	  pre?: Function;
	  post?: Function;
	  manipulateOptions?: Function;
	
	  visitor: ?{
	    [key: string]: Function | {
	      enter?: Function | Array<Function>;
	      exit?: Function | Array<Function>;
	    }
	  };
	};*/
	var OptionManager = (function () {
	  function OptionManager(log /*:: ?: Logger*/) {
	    _classCallCheck(this, OptionManager);
	
	    this.resolvedConfigs = [];
	    this.options = OptionManager.createBareOptions();
	    this.log = log;
	  }
	
	  OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {
	    for (var _iterator = (OptionManager.memoisedPlugins /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var cache = _ref;
	
	      if (cache.container === fn) return cache.plugin;
	    }
	
	    var obj /*: ?PluginObject*/ = undefined;
	
	    if (typeof fn === "function") {
	      obj = fn(context);
	    } else {
	      obj = fn;
	    }
	
	    if (typeof obj === "object") {
	      var _plugin = new _plugin3["default"](obj, alias);
	      OptionManager.memoisedPlugins.push({
	        container: fn,
	        plugin: _plugin
	      });
	      return _plugin;
	    } else {
	      throw new TypeError(messages.get("pluginNotObject", loc, i, typeof obj) + loc + i);
	    }
	  };
	
	  OptionManager.createBareOptions = function createBareOptions() {
	    var opts = {};
	
	    for (var _key in _config2["default"]) {
	      var opt = _config2["default"][_key];
	      opts[_key] = _lodashLangClone2["default"](opt["default"]);
	    }
	
	    return opts;
	  };
	
	  OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {
	    plugin = plugin.__esModule ? plugin["default"] : plugin;
	
	    if (!(plugin instanceof _plugin3["default"])) {
	      // allow plugin containers to be specified so they don't have to manually require
	      if (typeof plugin === "function" || typeof plugin === "object") {
	        plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);
	      } else {
	        throw new TypeError(messages.get("pluginNotFunction", loc, i, typeof plugin));
	      }
	    }
	
	    plugin.init(loc, i);
	
	    return plugin;
	  };
	
	  OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {
	    return plugins.map(function (val, i) {
	      var plugin = undefined,
	          options = undefined;
	
	      // destructure plugins
	      if (Array.isArray(val)) {
	        plugin = val[0];
	        options = val[1];
	      } else {
	        plugin = val;
	      }
	
	      var alias = typeof plugin === "string" ? plugin : loc + "$" + i;
	
	      // allow plugins to be specified as strings
	      if (typeof plugin === "string") {
	        var pluginLoc = _helpersResolve2["default"]("babel-plugin-" + plugin, dirname) || _helpersResolve2["default"](plugin, dirname);
	        if (pluginLoc) {
	          plugin = __webpack_require__(6)(pluginLoc);
	        } else {
	          throw new ReferenceError(messages.get("pluginUnknown", plugin, loc, i, dirname));
	        }
	      }
	
	      plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);
	
	      return [plugin, options];
	    });
	  };
	
	  OptionManager.prototype.addConfig = function addConfig(loc /*: string*/, key /*:: ?: string*/) /*: boolean*/ {
	    var json = arguments.length <= 2 || arguments[2] === undefined ? _json52["default"] : arguments[2];
	
	    if (this.resolvedConfigs.indexOf(loc) >= 0) {
	      return false;
	    }
	
	    var content = _fs2["default"].readFileSync(loc, "utf8");
	    var opts = undefined;
	
	    try {
	      opts = jsonCache[content] = jsonCache[content] || json.parse(content);
	      if (key) opts = opts[key];
	    } catch (err) {
	      err.message = loc + ": Error while parsing JSON - " + err.message;
	      throw err;
	    }
	
	    this.mergeOptions(opts, loc, null, _path2["default"].dirname(loc));
	    this.resolvedConfigs.push(loc);
	
	    return !!opts;
	  };
	
	  /**
	   * This is called when we want to merge the input `opts` into our
	   * base options.
	   *
	   *  - `alias` is used to output pretty traces back to the original source.
	   *  - `loc` is used to point to the original config.
	   *  - `dirname` is used to resolve plugins relative to it.
	   */
	
	  OptionManager.prototype.mergeOptions = function mergeOptions(rawOpts /*:: ?: Object*/, alias /*: string*/, loc /*:: ?: string*/, dirname /*:: ?: string*/) {
	    if (alias === undefined) alias = "foreign";
	
	    if (!rawOpts) return;
	
	    //
	    if (typeof rawOpts !== "object" || Array.isArray(rawOpts)) {
	      this.log.error("Invalid options type for " + alias, TypeError);
	    }
	
	    //
	    var opts = _lodashLangCloneDeep2["default"](rawOpts, function (val) {
	      if (val instanceof _plugin3["default"]) {
	        return val;
	      }
	    });
	
	    //
	    dirname = dirname || process.cwd();
	    loc = loc || alias;
	
	    for (var _key2 in opts) {
	      var option = _config2["default"][_key2];
	
	      // check for an unknown option
	      if (!option && this.log) {
	        this.log.error("Unknown option: " + alias + "." + _key2, ReferenceError);
	      }
	    }
	
	    // normalise options
	    _index.normaliseOptions(opts);
	
	    // resolve plugins
	    if (opts.plugins) {
	      opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);
	    }
	
	    // add extends clause
	    if (opts["extends"]) {
	      var extendsLoc = _helpersResolve2["default"](opts["extends"], dirname);
	      if (extendsLoc) {
	        this.addConfig(extendsLoc);
	      } else {
	        if (this.log) this.log.error("Couldn't resolve extends clause of " + opts["extends"] + " in " + alias);
	      }
	      delete opts["extends"];
	    }
	
	    // resolve presets
	    if (opts.presets) {
	      this.mergePresets(opts.presets, dirname);
	      delete opts.presets;
	    }
	
	    // env
	    var envOpts = undefined;
	    var envKey = process.env.BABEL_ENV || ("production") || "development";
	    if (opts.env) {
	      envOpts = opts.env[envKey];
	      delete opts.env;
	    }
	
	    // merge them into this current files options
	    _helpersMerge2["default"](this.options, opts);
	
	    // merge in env options
	    this.mergeOptions(envOpts, alias + ".env." + envKey, null, dirname);
	  };
	
	  OptionManager.prototype.mergePresets = function mergePresets(presets /*: Array<string | Object>*/, dirname /*: string*/) {
	    for (var _iterator2 = presets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var val = _ref2;
	
	      if (typeof val === "string") {
	        var presetLoc = _helpersResolve2["default"]("babel-preset-" + val, dirname) || _helpersResolve2["default"](val, dirname);
	        if (presetLoc) {
	          var presetOpts = __webpack_require__(6)(presetLoc);
	          this.mergeOptions(presetOpts, presetLoc, presetLoc, _path2["default"].dirname(presetLoc));
	        } else {
	          throw new Error("Couldn't find preset " + JSON.stringify(val) + " relative to directory " + JSON.stringify(dirname));
	        }
	      } else if (typeof val === "object") {
	        this.mergeOptions(val);
	      } else {
	        throw new Error("todo");
	      }
	    }
	  };
	
	  OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
	    var file = _fs2["default"].readFileSync(loc, "utf8");
	    var lines = file.split("\n");
	
	    lines = lines.map(function (line) {
	      return line.replace(/#(.*?)$/, "").trim();
	    }).filter(function (line) {
	      return !!line;
	    });
	
	    this.mergeOptions({ ignore: lines }, loc);
	  };
	
	  OptionManager.prototype.findConfigs = function findConfigs(loc) {
	    if (!loc) return;
	
	    if (!_pathIsAbsolute2["default"](loc)) {
	      loc = _path2["default"].join(process.cwd(), loc);
	    }
	
	    var foundConfig = false;
	    var foundIgnore = false;
	
	    while (loc !== (loc = _path2["default"].dirname(loc))) {
	      if (!foundConfig) {
	        var configLoc = _path2["default"].join(loc, BABELRC_FILENAME);
	        if (exists(configLoc)) {
	          this.addConfig(configLoc);
	          foundConfig = true;
	        }
	
	        var pkgLoc = _path2["default"].join(loc, PACKAGE_FILENAME);
	        if (!foundConfig && exists(pkgLoc)) {
	          foundConfig = this.addConfig(pkgLoc, "babel", JSON);
	        }
	      }
	
	      if (!foundIgnore) {
	        var ignoreLoc = _path2["default"].join(loc, BABELIGNORE_FILENAME);
	        if (exists(ignoreLoc)) {
	          this.addIgnoreConfig(ignoreLoc);
	          foundIgnore = true;
	        }
	      }
	
	      if (foundIgnore && foundConfig) return;
	    }
	  };
	
	  OptionManager.prototype.normaliseOptions = function normaliseOptions() {
	    var opts = this.options;
	
	    for (var _key3 in _config2["default"]) {
	      var option = _config2["default"][_key3];
	      var val = opts[_key3];
	
	      // optional
	      if (!val && option.optional) continue;
	
	      // aliases
	      if (option.alias) {
	        opts[option.alias] = opts[option.alias] || val;
	      } else {
	        opts[_key3] = val;
	      }
	    }
	  };
	
	  OptionManager.prototype.init = function init() /*: Object*/ {
	    var opts /*: Object*/ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var filename = opts.filename;
	
	    // resolve all .babelrc files
	    if (opts.babelrc !== false) {
	      this.findConfigs(filename);
	    }
	
	    // merge in base options
	    this.mergeOptions(opts, "base", null, filename && _path2["default"].dirname(filename));
	
	    // normalise
	    this.normaliseOptions(opts);
	
	    return this.options;
	  };
	
	  return OptionManager;
	})();
	
	exports["default"] = OptionManager;
	
	OptionManager.memoisedPlugins = [];
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/plugin.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _fileOptionsOptionManager = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/option-manager.js");
	
	var _fileOptionsOptionManager2 = _interopRequireDefault(_fileOptionsOptionManager);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _store = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/store.js");
	
	var _store2 = _interopRequireDefault(_store);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _lodashObjectAssign = __webpack_require__("./node_modules/lodash/object/assign.js");
	
	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var GLOBAL_VISITOR_PROPS = ["enter", "exit"];
	
	var Plugin = (function (_Store) {
	  _inherits(Plugin, _Store);
	
	  function Plugin(plugin /*: Object*/, key /*:: ?: string*/) {
	    _classCallCheck(this, Plugin);
	
	    _Store.call(this);
	
	    this.initialized = false;
	    this.raw = _lodashObjectAssign2["default"]({}, plugin);
	    this.key = key;
	
	    this.manipulateOptions = this.take("manipulateOptions");
	    this.post = this.take("post");
	    this.pre = this.take("pre");
	    this.visitor = this.normaliseVisitor(_lodashLangClone2["default"](this.take("visitor")) || {});
	  }
	
	  Plugin.prototype.take = function take(key) {
	    var val = this.raw[key];
	    delete this.raw[key];
	    return val;
	  };
	
	  Plugin.prototype.chain = function chain(target, key) {
	    if (!target[key]) return this[key];
	    if (!this[key]) return target[key];
	
	    var fns /*: Array<?Function>*/ = [target[key], this[key]];
	
	    return function () {
	      var val = undefined;
	
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var fn = _ref;
	
	        if (fn) {
	          var ret = fn.apply(this, args);
	          if (ret != null) val = ret;
	        }
	      }
	      return val;
	    };
	  };
	
	  Plugin.prototype.maybeInherit = function maybeInherit(loc /*: string*/) {
	    var inherits = this.take("inherits");
	    if (!inherits) return;
	
	    inherits = _fileOptionsOptionManager2["default"].normalisePlugin(inherits, loc, "inherits");
	
	    this.manipulateOptions = this.chain(inherits, "manipulateOptions");
	    this.post = this.chain(inherits, "post");
	    this.pre = this.chain(inherits, "pre");
	    this.visitor = _babelTraverse2["default"].visitors.merge([inherits.visitor, this.visitor]);
	  };
	
	  /**
	   * We lazy initialise parts of a plugin that rely on contextual information such as
	   * position on disk and how it was specified.
	   */
	
	  Plugin.prototype.init = function init(loc /*: string*/, i /*: number*/) {
	    if (this.initialized) return;
	    this.initialized = true;
	
	    this.maybeInherit(loc);
	
	    for (var key in this.raw) {
	      throw new Error(messages.get("pluginInvalidProperty", loc, i, key));
	    }
	  };
	
	  Plugin.prototype.normaliseVisitor = function normaliseVisitor(visitor /*: Object*/) /*: Object*/ {
	    for (var _iterator2 = GLOBAL_VISITOR_PROPS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      if (visitor[key]) {
	        throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.");
	      }
	    }
	
	    _babelTraverse2["default"].explode(visitor);
	    return visitor;
	  };
	
	  return Plugin;
	})(_store2["default"]);
	
	exports["default"] = Plugin;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/store.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _Map2 = __webpack_require__("./node_modules/babel-runtime/core-js/map.js")["default"];
	
	exports.__esModule = true;
	
	var Store = (function (_Map) {
	  _inherits(Store, _Map);
	
	  function Store() {
	    _classCallCheck(this, Store);
	
	    _Map.call(this);
	    this.dynamicData = {};
	  }
	
	  Store.prototype.setDynamic = function setDynamic(key, fn) {
	    this.dynamicData[key] = fn;
	  };
	
	  Store.prototype.get = function get(key /*: string*/) /*: any*/ {
	    if (this.has(key)) {
	      return _Map.prototype.get.call(this, key);
	    } else {
	      if (Object.prototype.hasOwnProperty.call(this.dynamicData, key)) {
	        var val = this.dynamicData[key]();
	        this.set(key, val);
	        return val;
	      }
	    }
	  };
	
	  return Store;
	})(_Map2);
	
	exports["default"] = Store;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	exports.normaliseOptions = normaliseOptions;
	
	var _parsers = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/parsers.js");
	
	var parsers = _interopRequireWildcard(_parsers);
	
	var _config = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/config.js");
	
	var _config2 = _interopRequireDefault(_config);
	
	exports.config = _config2["default"];
	
	function normaliseOptions() /*: Object*/ {
	  var options /*: Object*/ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  for (var key in options) {
	    var val = options[key];
	    if (val == null) continue;
	
	    var opt = _config2["default"][key];
	    if (opt && opt.alias) opt = _config2["default"][opt.alias];
	    if (!opt) continue;
	
	    var parser = parsers[opt.type];
	    if (parser) val = parser(val);
	
	    options[key] = val;
	  }
	
	  return options;
	}

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/parsers.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.boolean = boolean;
	exports.booleanString = booleanString;
	exports.list = list;
	
	var _slash = __webpack_require__("./node_modules/slash/index.js");
	
	var _slash2 = _interopRequireDefault(_slash);
	
	var _util = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/util.js");
	
	var util = _interopRequireWildcard(_util);
	
	var filename = _slash2["default"];
	
	exports.filename = filename;
	
	function boolean(val /*: any*/) /*: boolean*/ {
	  return !!val;
	}
	
	function booleanString(val /*: any*/) /*: boolean | any*/ {
	  return util.booleanify(val);
	}
	
	function list(val /*: any*/) /*: Array<string>*/ {
	  return util.list(val);
	}

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/config.js":
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	  filename: {
	    type: "filename",
	    description: "filename to use when reading from stdin - this will be used in source-maps, errors etc",
	    "default": "unknown",
	    shorthand: "f"
	  },
	
	  filenameRelative: {
	    hidden: true,
	    type: "string"
	  },
	
	  inputSourceMap: {
	    hidden: true
	  },
	
	  env: {
	    hidden: true,
	    "default": {}
	  },
	
	  mode: {
	    description: "",
	    hidden: true
	  },
	
	  retainLines: {
	    type: "boolean",
	    "default": false,
	    description: "retain line numbers - will result in really ugly code"
	  },
	
	  highlightCode: {
	    description: "enable/disable ANSI syntax highlighting of code frames (on by default)",
	    type: "boolean",
	    "default": true
	  },
	
	  suppressDeprecationMessages: {
	    type: "boolean",
	    "default": false,
	    hidden: true
	  },
	
	  presets: {
	    type: "list",
	    description: "",
	    "default": []
	  },
	
	  plugins: {
	    type: "list",
	    "default": [],
	    description: ""
	  },
	
	  ignore: {
	    type: "list",
	    description: "list of glob paths to **not** compile",
	    "default": []
	  },
	
	  only: {
	    type: "list",
	    description: "list of glob paths to **only** compile"
	  },
	
	  code: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },
	
	  metadata: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },
	
	  ast: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },
	
	  "extends": {
	    type: "string",
	    hidden: true
	  },
	
	  comments: {
	    type: "boolean",
	    "default": true,
	    description: "write comments to generated output (true by default)"
	  },
	
	  shouldPrintComment: {
	    hidden: true,
	    description: "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
	  },
	
	  compact: {
	    type: "booleanString",
	    "default": "auto",
	    description: "do not include superfluous whitespace characters and line terminators [true|false|auto]"
	  },
	
	  minified: {
	    type: "boolean",
	    "default": false,
	    description: "save as much bytes when printing [true|false]"
	  },
	
	  sourceMap: {
	    alias: "sourceMaps",
	    hidden: true
	  },
	
	  sourceMaps: {
	    type: "booleanString",
	    description: "[true|false|inline]",
	    "default": false,
	    shorthand: "s"
	  },
	
	  sourceMapTarget: {
	    type: "string",
	    description: "set `file` on returned source map"
	  },
	
	  sourceFileName: {
	    type: "string",
	    description: "set `sources[0]` on returned source map"
	  },
	
	  sourceRoot: {
	    type: "filename",
	    description: "the root from which all sources are relative"
	  },
	
	  babelrc: {
	    description: "Whether or not to look up .babelrc and .babelignore files",
	    type: "boolean",
	    "default": true
	  },
	
	  sourceType: {
	    description: "",
	    "default": "module"
	  },
	
	  auxiliaryCommentBefore: {
	    type: "string",
	    description: "print a comment before any injected non-user code"
	  },
	
	  auxiliaryCommentAfter: {
	    type: "string",
	    description: "print a comment after any injected non-user code"
	  },
	
	  resolveModuleSource: {
	    hidden: true
	  },
	
	  getModuleId: {
	    hidden: true
	  },
	
	  moduleRoot: {
	    type: "filename",
	    description: "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
	  },
	
	  moduleIds: {
	    type: "boolean",
	    "default": false,
	    shorthand: "M",
	    description: "insert an explicit id for modules"
	  },
	
	  moduleId: {
	    description: "specify a custom name for module ids",
	    type: "string"
	  }
	};

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/helpers/resolve.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _module2 = __webpack_require__("./node_modules/node-libs-browser/mock/empty.js");
	
	var _module3 = _interopRequireDefault(_module2);
	
	var relativeModules = {};
	
	exports["default"] = function (loc /*: string*/) /*: ?string*/ {
	  var relative /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];
	
	  // we're in the browser, probably
	  if (typeof _module3["default"] === "object") return null;
	
	  var relativeMod = relativeModules[relative];
	
	  if (!relativeMod) {
	    relativeMod = new _module3["default"]();
	    relativeMod.paths = _module3["default"]._nodeModulePaths(relative);
	    relativeModules[relative] = relativeMod;
	  }
	
	  try {
	    return _module3["default"]._resolveFilename(loc, relativeMod);
	  } catch (err) {
	    return null;
	  }
	};
	
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/helpers/merge.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _lodashObjectMerge = __webpack_require__("./node_modules/lodash/object/merge.js");
	
	var _lodashObjectMerge2 = _interopRequireDefault(_lodashObjectMerge);
	
	exports["default"] = function (dest /*:: ?: Object*/, src /*:: ?: Object*/) /*: ?Object*/ {
	  if (!dest || !src) return;
	
	  return _lodashObjectMerge2["default"](dest, src, function (a, b) {
	    if (b && Array.isArray(a)) {
	      var newArray = b.slice(0);
	
	      for (var _iterator = a, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var item = _ref;
	
	        if (newArray.indexOf(item) < 0) {
	          newArray.push(item);
	        }
	      }
	
	      return newArray;
	    }
	  });
	};
	
	module.exports = exports["default"];

/***/ },

/***/ 6:
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./config": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/config.js",
		"./config.js": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/config.js",
		"./index": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/index.js",
		"./index.js": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/index.js",
		"./option-manager": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/option-manager.js",
		"./option-manager.js": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/option-manager.js",
		"./parsers": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/parsers.js",
		"./parsers.js": "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/parsers.js"
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 6;


/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/pipeline.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _helpersNormalizeAst = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/helpers/normalize-ast.js");
	
	var _helpersNormalizeAst2 = _interopRequireDefault(_helpersNormalizeAst);
	
	var _file = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/index.js");
	
	var _file2 = _interopRequireDefault(_file);
	
	var Pipeline = (function () {
	  function Pipeline() {
	    _classCallCheck(this, Pipeline);
	  }
	
	  Pipeline.prototype.lint = function lint(code /*: string*/) {
	    var opts /*:: ?: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    opts.code = false;
	    opts.mode = "lint";
	    return this.transform(code, opts);
	  };
	
	  Pipeline.prototype.pretransform = function pretransform(code /*: string*/, opts /*:: ?: Object*/) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file;
	    });
	  };
	
	  Pipeline.prototype.transform = function transform(code /*: string*/, opts /*:: ?: Object*/) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file.transform();
	    });
	  };
	
	  Pipeline.prototype.transformFromAst = function transformFromAst(ast, code /*: string*/, opts /*: Object*/) {
	    ast = _helpersNormalizeAst2["default"](ast);
	
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.addAst(ast);
	      return file.transform();
	    });
	  };
	
	  return Pipeline;
	})();
	
	exports["default"] = Pipeline;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/helpers/normalize-ast.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/**
	 * Normalize an AST.
	 *
	 * - Wrap `Program` node with a `File` node.
	 */
	
	exports["default"] = function (ast /*: Object*/, comments /*:: ?: Array<Object>*/, tokens /*:: ?: Array<Object>*/) {
	  if (ast) {
	    if (ast.type === "Program") {
	      return t.file(ast, comments || [], tokens || []);
	    } else if (ast.type === "File") {
	      return ast;
	    }
	  }
	
	  throw new Error("Not a valid ast?");
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* @noflow */
	/* global BabelParserOptions */
	/* global BabelFileMetadata */
	/* global BabelFileResult */
	
	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelpers = __webpack_require__("./node_modules/babel-helpers/lib/index.js");
	
	var _babelHelpers2 = _interopRequireDefault(_babelHelpers);
	
	var _metadata = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/metadata.js");
	
	var metadataVisitor = _interopRequireWildcard(_metadata);
	
	var _convertSourceMap = __webpack_require__("./node_modules/convert-source-map/index.js");
	
	var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);
	
	var _optionsOptionManager = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/options/option-manager.js");
	
	var _optionsOptionManager2 = _interopRequireDefault(_optionsOptionManager);
	
	var _pluginPass = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/plugin-pass.js");
	
	var _pluginPass2 = _interopRequireDefault(_pluginPass);
	
	var _shebangRegex = __webpack_require__("./node_modules/shebang-regex/index.js");
	
	var _shebangRegex2 = _interopRequireDefault(_shebangRegex);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _sourceMap = __webpack_require__("./node_modules/source-map/source-map.js");
	
	var _sourceMap2 = _interopRequireDefault(_sourceMap);
	
	var _babelGenerator = __webpack_require__("./node_modules/babel-generator/lib/index.js");
	
	var _babelGenerator2 = _interopRequireDefault(_babelGenerator);
	
	var _babelCodeFrame = __webpack_require__("./node_modules/babel-code-frame/lib/index.js");
	
	var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);
	
	var _lodashObjectDefaults = __webpack_require__("./node_modules/lodash/object/defaults.js");
	
	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _logger = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/logger.js");
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _store = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/store.js");
	
	var _store2 = _interopRequireDefault(_store);
	
	var _babylon = __webpack_require__("./node_modules/babel6/node_modules/babylon/index.js");
	
	var _util = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/util.js");
	
	var util = _interopRequireWildcard(_util);
	
	var _path = __webpack_require__("./node_modules/path-browserify/index.js");
	
	var _path2 = _interopRequireDefault(_path);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _internalPluginsBlockHoist = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/internal-plugins/block-hoist.js");
	
	var _internalPluginsBlockHoist2 = _interopRequireDefault(_internalPluginsBlockHoist);
	
	var _internalPluginsShadowFunctions = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/internal-plugins/shadow-functions.js");
	
	var _internalPluginsShadowFunctions2 = _interopRequireDefault(_internalPluginsShadowFunctions);
	
	/*:: import type Pipeline from "../pipeline";*/
	/*:: import type Plugin from "../plugin";*/
	
	var INTERNAL_PLUGINS = [[_internalPluginsBlockHoist2["default"]], [_internalPluginsShadowFunctions2["default"]]];
	
	var errorVisitor = {
	  enter: function enter(path, state) {
	    var loc = path.node.loc;
	    if (loc) {
	      state.loc = loc;
	      path.stop();
	    }
	  }
	};
	
	var File = (function (_Store) {
	  _inherits(File, _Store);
	
	  function File(opts /*: Object*/, pipeline /*: Pipeline*/) {
	    if (opts === undefined) opts = {};
	
	    _classCallCheck(this, File);
	
	    _Store.call(this);
	
	    this.pipeline = pipeline;
	
	    this.log = new _logger2["default"](this, opts.filename || "unknown");
	    this.opts = this.initOptions(opts);
	
	    this.parserOpts = {
	      highlightCode: this.opts.highlightCode,
	      nonStandard: this.opts.nonStandard,
	      sourceType: this.opts.sourceType,
	      filename: this.opts.filename,
	      plugins: []
	    };
	
	    this.pluginVisitors = [];
	    this.pluginPasses = [];
	    this.pluginStack = [];
	    this.buildPlugins();
	
	    this.metadata = {
	      usedHelpers: [],
	      marked: [],
	      modules: {
	        imports: [],
	        exports: {
	          exported: [],
	          specifiers: []
	        }
	      }
	    };
	
	    this.dynamicImportTypes = {};
	    this.dynamicImportIds = {};
	    this.dynamicImports = [];
	    this.declarations = {};
	    this.usedHelpers = {};
	
	    this.path = null;
	    this.ast = {};
	
	    this.code = "";
	    this.shebang = "";
	
	    this.hub = new _babelTraverse.Hub(this);
	  }
	
	  File.prototype.getMetadata = function getMetadata() {
	    var has = false;
	    for (var _iterator = (this.ast.program.body /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var node = _ref;
	
	      if (t.isModuleDeclaration(node)) {
	        has = true;
	        break;
	      }
	    }
	    if (has) {
	      this.path.traverse(metadataVisitor, this);
	    }
	  };
	
	  File.prototype.initOptions = function initOptions(opts) {
	    opts = new _optionsOptionManager2["default"](this.log, this.pipeline).init(opts);
	
	    if (opts.inputSourceMap) {
	      opts.sourceMaps = true;
	    }
	
	    if (opts.moduleId) {
	      opts.moduleIds = true;
	    }
	
	    opts.basename = _path2["default"].basename(opts.filename, _path2["default"].extname(opts.filename));
	
	    opts.ignore = util.arrayify(opts.ignore, util.regexify);
	
	    if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);
	
	    _lodashObjectDefaults2["default"](opts, {
	      moduleRoot: opts.sourceRoot
	    });
	
	    _lodashObjectDefaults2["default"](opts, {
	      sourceRoot: opts.moduleRoot
	    });
	
	    _lodashObjectDefaults2["default"](opts, {
	      filenameRelative: opts.filename
	    });
	
	    var basenameRelative = _path2["default"].basename(opts.filenameRelative);
	
	    _lodashObjectDefaults2["default"](opts, {
	      sourceFileName: basenameRelative,
	      sourceMapTarget: basenameRelative
	    });
	
	    return opts;
	  };
	
	  File.prototype.buildPlugins = function buildPlugins() {
	    var plugins /*: Array<[PluginPass, Object]>*/ = this.opts.plugins.concat(INTERNAL_PLUGINS);
	
	    // init plugins!
	    for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var ref = _ref2;
	      var plugin = ref[0];
	      var pluginOpts = ref[1];
	      // todo: fix - can't embed in loop head because of flow bug
	
	      this.pluginStack.push(plugin);
	      this.pluginVisitors.push(plugin.visitor);
	      this.pluginPasses.push(new _pluginPass2["default"](this, plugin, pluginOpts));
	
	      if (plugin.manipulateOptions) {
	        plugin.manipulateOptions(this.opts, this.parserOpts, this);
	      }
	    }
	  };
	
	  File.prototype.getModuleName = function getModuleName() /*: ?string*/ {
	    var opts = this.opts;
	    if (!opts.moduleIds) {
	      return null;
	    }
	
	    // moduleId is n/a if a `getModuleId()` is provided
	    if (opts.moduleId != null && !opts.getModuleId) {
	      return opts.moduleId;
	    }
	
	    var filenameRelative = opts.filenameRelative;
	    var moduleName = "";
	
	    if (opts.moduleRoot != null) {
	      moduleName = opts.moduleRoot + "/";
	    }
	
	    if (!opts.filenameRelative) {
	      return moduleName + opts.filename.replace(/^\//, "");
	    }
	
	    if (opts.sourceRoot != null) {
	      // remove sourceRoot from filename
	      var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
	      filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
	    }
	
	    // remove extension
	    filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");
	
	    moduleName += filenameRelative;
	
	    // normalize path separators
	    moduleName = moduleName.replace(/\\/g, "/");
	
	    if (opts.getModuleId) {
	      // If return is falsy, assume they want us to use our generated default name
	      return opts.getModuleId(moduleName) || moduleName;
	    } else {
	      return moduleName;
	    }
	  };
	
	  File.prototype.resolveModuleSource = function resolveModuleSource(source /*: string*/) /*: string*/ {
	    var resolveModuleSource = this.opts.resolveModuleSource;
	    if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);
	    return source;
	  };
	
	  File.prototype.addImport = function addImport(source /*: string*/, imported /*: string*/) /*: Object*/ {
	    var name /*:: ?: string*/ = arguments.length <= 2 || arguments[2] === undefined ? imported : arguments[2];
	    return (function () {
	      var alias = source + ":" + imported;
	      var id = this.dynamicImportIds[alias];
	
	      if (!id) {
	        source = this.resolveModuleSource(source);
	        id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);
	
	        var specifiers = [];
	
	        if (imported === "*") {
	          specifiers.push(t.importNamespaceSpecifier(id));
	        } else if (imported === "default") {
	          specifiers.push(t.importDefaultSpecifier(id));
	        } else {
	          specifiers.push(t.importSpecifier(id, t.identifier(imported)));
	        }
	
	        var declar = t.importDeclaration(specifiers, t.stringLiteral(source));
	        declar._blockHoist = 3;
	
	        this.path.unshiftContainer("body", declar);
	      }
	
	      return id;
	    }).apply(this, arguments);
	  };
	
	  File.prototype.addHelper = function addHelper(name /*: string*/) /*: Object*/ {
	    var declar = this.declarations[name];
	    if (declar) return declar;
	
	    if (!this.usedHelpers[name]) {
	      this.metadata.usedHelpers.push(name);
	      this.usedHelpers[name] = true;
	    }
	
	    var generator = this.get("helperGenerator");
	    var runtime = this.get("helpersNamespace");
	    if (generator) {
	      var res = generator(name);
	      if (res) return res;
	    } else if (runtime) {
	      return t.memberExpression(runtime, t.identifier(name));
	    }
	
	    var ref = _babelHelpers2["default"](name);
	    var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
	
	    if (t.isFunctionExpression(ref) && !ref.id) {
	      ref.body._compact = true;
	      ref._generated = true;
	      ref.id = uid;
	      ref.type = "FunctionDeclaration";
	      this.path.unshiftContainer("body", ref);
	    } else {
	      ref._compact = true;
	      this.scope.push({
	        id: uid,
	        init: ref,
	        unique: true
	      });
	    }
	
	    return uid;
	  };
	
	  File.prototype.addTemplateObject = function addTemplateObject(helperName /*: string*/, strings /*: Array<Object>*/, raw /*: Object*/) /*: Object*/ {
	    // Generate a unique name based on the string literals so we dedupe
	    // identical strings used in the program.
	    var stringIds = raw.elements.map(function (string) {
	      return string.value;
	    });
	    var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");
	
	    var declar = this.declarations[name];
	    if (declar) return declar;
	
	    var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");
	
	    var helperId = this.addHelper(helperName);
	    var init = t.callExpression(helperId, [strings, raw]);
	    init._compact = true;
	    this.scope.push({
	      id: uid,
	      init: init,
	      _blockHoist: 1.9 // This ensures that we don't fail if not using function expression helpers
	    });
	    return uid;
	  };
	
	  File.prototype.buildCodeFrameError = function buildCodeFrameError(node /*: Object*/, msg /*: string*/) /*: Error*/ {
	    var Error /*: typeof Error*/ = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];
	
	    var loc = node && (node.loc || node._loc);
	
	    var err = new Error(msg);
	
	    if (loc) {
	      err.loc = loc.start;
	    } else {
	      _babelTraverse2["default"](node, errorVisitor, this.scope, err);
	
	      err.message += " (This is an error on an internal node. Probably an internal error";
	
	      if (err.loc) {
	        err.message += ". Location has been estimated.";
	      }
	
	      err.message += ")";
	    }
	
	    return err;
	  };
	
	  File.prototype.mergeSourceMap = function mergeSourceMap(map /*: Object*/) {
	    var inputMap = this.opts.inputSourceMap;
	
	    if (inputMap) {
	      var _ret = (function () {
	        var inputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(inputMap);
	        var outputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(map);
	
	        var mergedGenerator = new _sourceMap2["default"].SourceMapGenerator({
	          file: inputMapConsumer.file,
	          sourceRoot: inputMapConsumer.sourceRoot
	        });
	
	        // This assumes the output map always has a single source, since Babel always compiles a single source file to a
	        // single output file.
	        var source = outputMapConsumer.sources[0];
	
	        inputMapConsumer.eachMapping(function (mapping) {
	          var generatedPosition = outputMapConsumer.generatedPositionFor({
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn,
	            source: source
	          });
	          if (generatedPosition.column != null) {
	            mergedGenerator.addMapping({
	              source: mapping.source,
	
	              original: {
	                line: mapping.originalLine,
	                column: mapping.originalColumn
	              },
	
	              generated: generatedPosition
	            });
	          }
	        });
	
	        var mergedMap = mergedGenerator.toJSON();
	        inputMap.mappings = mergedMap.mappings;
	        return {
	          v: inputMap
	        };
	      })();
	
	      // istanbul ignore next
	      if (typeof _ret === "object") return _ret.v;
	    } else {
	      return map;
	    }
	  };
	
	  File.prototype.parse = function parse(code /*: string*/) {
	    this.log.debug("Parse start");
	    var ast = _babylon.parse(code, this.parserOpts);
	    this.log.debug("Parse stop");
	    return ast;
	  };
	
	  File.prototype._addAst = function _addAst(ast) {
	    this.path = _babelTraverse.NodePath.get({
	      hub: this.hub,
	      parentPath: null,
	      parent: ast,
	      container: ast,
	      key: "program"
	    }).setContext();
	    this.scope = this.path.scope;
	    this.ast = ast;
	    this.getMetadata();
	  };
	
	  File.prototype.addAst = function addAst(ast) {
	    this.log.debug("Start set AST");
	    this._addAst(ast);
	    this.log.debug("End set AST");
	  };
	
	  File.prototype.transform = function transform() /*: BabelFileResult*/ {
	    this.call("pre");
	    this.log.debug("Start transform traverse");
	    _babelTraverse2["default"](this.ast, _babelTraverse2["default"].visitors.merge(this.pluginVisitors, this.pluginPasses), this.scope);
	    this.log.debug("End transform traverse");
	    this.call("post");
	    return this.generate();
	  };
	
	  File.prototype.wrap = function wrap(code /*: string*/, callback /*: Function*/) /*: BabelFileResult*/ {
	    code = code + "";
	
	    try {
	      if (this.shouldIgnore()) {
	        return this.makeResult({ code: code, ignored: true });
	      } else {
	        return callback();
	      }
	    } catch (err) {
	      if (err._babel) {
	        throw err;
	      } else {
	        err._babel = true;
	      }
	
	      var message = err.message = this.opts.filename + ": " + err.message;
	
	      var loc = err.loc;
	      if (loc) {
	        err.codeFrame = _babelCodeFrame2["default"](code, loc.line, loc.column + 1, this.opts);
	        message += "\n" + err.codeFrame;
	      }
	
	      if (process.browser) {
	        // chrome has it's own pretty stringifier which doesn't use the stack property
	        // https://github.com/babel/babel/issues/2175
	        err.message = message;
	      }
	
	      if (err.stack) {
	        var newStack = err.stack.replace(err.message, message);
	        err.stack = newStack;
	      }
	
	      throw err;
	    }
	  };
	
	  File.prototype.addCode = function addCode(code /*: string*/) {
	    code = (code || "") + "";
	    code = this.parseInputSourceMap(code);
	    this.code = code;
	  };
	
	  File.prototype.parseCode = function parseCode() {
	    this.parseShebang();
	    var ast = this.parse(this.code);
	    this.addAst(ast);
	  };
	
	  File.prototype.shouldIgnore = function shouldIgnore() {
	    var opts = this.opts;
	    return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
	  };
	
	  File.prototype.call = function call(key /*: "pre" | "post"*/) {
	    for (var _iterator3 = (this.pluginPasses /*: Array<PluginPass>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var pass = _ref3;
	
	      var plugin = pass.plugin;
	      var fn = plugin[key];
	      if (fn) fn.call(pass, this);
	    }
	  };
	
	  File.prototype.parseInputSourceMap = function parseInputSourceMap(code /*: string*/) /*: string*/ {
	    var opts = this.opts;
	
	    if (opts.inputSourceMap !== false) {
	      var inputMap = _convertSourceMap2["default"].fromSource(code);
	      if (inputMap) {
	        opts.inputSourceMap = inputMap.toObject();
	        code = _convertSourceMap2["default"].removeComments(code);
	      }
	    }
	
	    return code;
	  };
	
	  File.prototype.parseShebang = function parseShebang() {
	    var shebangMatch = _shebangRegex2["default"].exec(this.code);
	    if (shebangMatch) {
	      this.shebang = shebangMatch[0];
	      this.code = this.code.replace(_shebangRegex2["default"], "");
	    }
	  };
	
	  File.prototype.makeResult = function makeResult(_ref4 /*: BabelFileResult */) /*: BabelFileResult*/ {
	    var code = _ref4.code;
	    var map = _ref4.map;
	    var ast = _ref4.ast;
	    var ignored = _ref4.ignored;
	
	    var result = {
	      metadata: null,
	      options: this.opts,
	      ignored: !!ignored,
	      code: null,
	      ast: null,
	      map: map || null
	    };
	
	    if (this.opts.code) {
	      result.code = code;
	    }
	
	    if (this.opts.ast) {
	      result.ast = ast;
	    }
	
	    if (this.opts.metadata) {
	      result.metadata = this.metadata;
	    }
	
	    return result;
	  };
	
	  File.prototype.generate = function generate() /*: BabelFileResult*/ {
	    var opts = this.opts;
	    var ast = this.ast;
	
	    var result /*: BabelFileResult*/ = { ast: ast };
	    if (!opts.code) return this.makeResult(result);
	
	    this.log.debug("Generation start");
	
	    var _result = _babelGenerator2["default"](ast, opts, this.code);
	    result.code = _result.code;
	    result.map = _result.map;
	
	    this.log.debug("Generation end");
	
	    if (this.shebang) {
	      // add back shebang
	      result.code = this.shebang + "\n" + result.code;
	    }
	
	    if (result.map) {
	      result.map = this.mergeSourceMap(result.map);
	    }
	
	    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
	      result.code += "\n" + _convertSourceMap2["default"].fromObject(result.map).toComment();
	    }
	
	    if (opts.sourceMaps === "inline") {
	      result.map = null;
	    }
	
	    return this.makeResult(result);
	  };
	
	  return File;
	})(_store2["default"]);
	
	exports["default"] = File;
	exports.File = File;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/process/browser.js")))

/***/ },

/***/ "./node_modules/babel-helpers/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	exports.get = get;
	
	var _helpers = __webpack_require__("./node_modules/babel-helpers/lib/helpers.js");
	
	var _helpers2 = _interopRequireDefault(_helpers);
	
	function get(name) {
	  var fn = _helpers2["default"][name];
	  if (!fn) throw new ReferenceError("Unknown helper " + name);
	
	  return fn().expression;
	}
	
	var list = _Object$keys(_helpers2["default"]).map(function (name) {
	  return name[0] === "_" ? name.slice(1) : name;
	}).filter(function (name) {
	  return name !== "__esModule";
	});
	
	exports.list = list;
	exports["default"] = get;

/***/ },

/***/ "./node_modules/babel-helpers/lib/helpers.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var helpers = {};
	exports["default"] = helpers;
	
	helpers["typeof"] = _babelTemplate2["default"]("\n  (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\")\n    ? function (obj) { return typeof obj; }\n    : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n");
	
	helpers.jsx = _babelTemplate2["default"]("\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we're going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : '' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n");
	
	helpers.asyncToGenerator = _babelTemplate2["default"]("\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              return step(\"next\", value);\n            }, function (err) {\n              return step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  })\n");
	
	helpers.classCallCheck = _babelTemplate2["default"]("\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  });\n");
	
	helpers.createClass = _babelTemplate2["default"]("\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n");
	
	helpers.defineEnumerableProperties = _babelTemplate2["default"]("\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n");
	
	helpers.defaults = _babelTemplate2["default"]("\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n");
	
	helpers.defineProperty = _babelTemplate2["default"]("\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n");
	
	helpers["extends"] = _babelTemplate2["default"]("\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n");
	
	helpers.get = _babelTemplate2["default"]("\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n");
	
	helpers.inherits = _babelTemplate2["default"]("\n  (function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n");
	
	helpers["instanceof"] = _babelTemplate2["default"]("\n  (function (left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n");
	
	helpers.interopRequireDefault = _babelTemplate2["default"]("\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n");
	
	helpers.interopRequireWildcard = _babelTemplate2["default"]("\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n");
	
	helpers.newArrowCheck = _babelTemplate2["default"]("\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError(\"Cannot instantiate an arrow function\");\n    }\n  });\n");
	
	helpers.objectDestructuringEmpty = _babelTemplate2["default"]("\n  (function (obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n  });\n");
	
	helpers.objectWithoutProperties = _babelTemplate2["default"]("\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n");
	
	helpers.possibleConstructorReturn = _babelTemplate2["default"]("\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  });\n");
	
	helpers.selfGlobal = _babelTemplate2["default"]("\n  typeof global === \"undefined\" ? self : global\n");
	
	helpers.set = _babelTemplate2["default"]("\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n");
	
	helpers.slicedToArray = _babelTemplate2["default"]("\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  })();\n");
	
	helpers.slicedToArrayLoose = _babelTemplate2["default"]("\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  });\n");
	
	helpers.taggedTemplateLiteral = _babelTemplate2["default"]("\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n");
	
	helpers.taggedTemplateLiteralLoose = _babelTemplate2["default"]("\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n");
	
	helpers.temporalRef = _babelTemplate2["default"]("\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n    } else {\n      return val;\n    }\n  })\n");
	
	helpers.temporalUndefined = _babelTemplate2["default"]("\n  ({})\n");
	
	helpers.toArray = _babelTemplate2["default"]("\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n");
	
	helpers.toConsumableArray = _babelTemplate2["default"]("\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n");
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-template/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _lodashLangCloneDeep = __webpack_require__("./node_modules/lodash/lang/cloneDeep.js");
	
	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);
	
	var _lodashObjectHas = __webpack_require__("./node_modules/lodash/object/has.js");
	
	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _babylon = __webpack_require__("./node_modules/babel-template/node_modules/babylon/index.js");
	
	var babylon = _interopRequireWildcard(_babylon);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var FROM_TEMPLATE = "_fromTemplate"; //Symbol(); // todo: probably wont get copied over
	var TEMPLATE_SKIP = _Symbol();
	
	exports["default"] = function (code /*: string*/) /*: Function*/ {
	  // since we lazy parse the template, we get the current stack so we have the
	  // original stack to append if it errors when parsing
	  var stack = undefined;
	  try {
	    // error stack gets populated in IE only on throw (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)
	    throw new Error();
	  } catch (error) {
	    stack = error.stack.split("\n").slice(1).join("\n");
	  }
	
	  var _getAst = function getAst() {
	    var ast = undefined;
	
	    try {
	      ast = babylon.parse(code, {
	        allowReturnOutsideFunction: true,
	        allowSuperOutsideMethod: true
	      });
	
	      ast = _babelTraverse2["default"].removeProperties(ast);
	
	      _babelTraverse2["default"].cheap(ast, function (node) {
	        node[FROM_TEMPLATE] = true;
	      });
	    } catch (err) {
	      err.stack = err.stack + "from\n" + stack;
	      throw err;
	    }
	
	    _getAst = function () {
	      return ast;
	    };
	
	    return ast;
	  };
	
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return useTemplate(_getAst(), args);
	  };
	};
	
	function useTemplate(ast, nodes /*:: ?: Array<Object>*/) {
	  ast = _lodashLangCloneDeep2["default"](ast);
	  var _ast = ast;
	  var program = _ast.program;
	
	  if (nodes.length) {
	    _babelTraverse2["default"](ast, templateVisitor, null, nodes);
	  }
	
	  if (program.body.length > 1) {
	    return program.body;
	  } else {
	    return program.body[0];
	  }
	}
	
	var templateVisitor = {
	  // 360
	  noScope: true,
	
	  enter: function enter(path, args) {
	    var node = path.node;
	
	    if (node[TEMPLATE_SKIP]) return path.skip();
	
	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }
	
	    var replacement = undefined;
	
	    if (t.isIdentifier(node) && node[FROM_TEMPLATE]) {
	      if (_lodashObjectHas2["default"](args[0], node.name)) {
	        replacement = args[0][node.name];
	      } else if (node.name[0] === "$") {
	        var i = +node.name.slice(1);
	        if (args[i]) replacement = args[i];
	      }
	    }
	
	    if (replacement === null) {
	      path.remove();
	    }
	
	    if (replacement) {
	      replacement[TEMPLATE_SKIP] = true;
	      path.replaceInline(replacement);
	    }
	  },
	
	  exit: function exit(_ref) {
	    var node = _ref.node;
	
	    _babelTraverse2["default"].clearNode(node);
	  }
	};
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-template/node_modules/babylon/index.js":
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.babylon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	exports.parse = parse;
	
	var _parser = require("./parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	require("./parser/util");
	
	require("./parser/statement");
	
	require("./parser/lval");
	
	require("./parser/expression");
	
	require("./parser/node");
	
	require("./parser/location");
	
	require("./parser/comments");
	
	var _tokenizerTypes = require("./tokenizer/types");
	
	require("./tokenizer");
	
	require("./tokenizer/context");
	
	var _pluginsFlow = require("./plugins/flow");
	
	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);
	
	var _pluginsJsx = require("./plugins/jsx");
	
	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);
	
	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];
	
	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}
	
	exports.tokTypes = _tokenizerTypes.types;
	},{"./parser":5,"./parser/comments":3,"./parser/expression":4,"./parser/location":6,"./parser/lval":7,"./parser/node":8,"./parser/statement":9,"./parser/util":10,"./plugins/flow":11,"./plugins/jsx":12,"./tokenizer":15,"./tokenizer/context":14,"./tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],2:[function(require,module,exports){
	/* @flow */
	// A second optional argument can be given to further configure
	"use strict";
	
	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions /*: {
	                     sourceType: string,
	                     allowReturnOutsideFunction: boolean,
	                     allowImportExportEverywhere: boolean,
	                     allowSuperOutsideMethod: boolean,
	                     plugins: Array<string>,
	                     strictMode: any
	                   }*/ = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // TODO
	  allowSuperOutsideMethod: false,
	  // An array of plugins to enable
	  plugins: [],
	  // TODO
	  strictMode: null
	};
	
	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object
	
	function getOptions(opts /*:: ?: Object*/) /*: Object*/ {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}
	
	// the parser process. These options are recognized:
	},{}],3:[function(require,module,exports){
	/* @flow */
	
	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	function last(stack) {
	  return stack[stack.length - 1];
	}
	
	var pp = _index2["default"].prototype;
	
	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};
	
	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;
	
	  var stack = this.state.commentStack;
	
	  var lastChild = undefined,
	      trailingComments = undefined,
	      i = undefined;
	
	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }
	
	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }
	
	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first ClassMethod,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }
	
	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }
	
	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }
	
	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }
	
	  stack.push(node);
	};
	},{"./index":5,"babel-runtime/helpers/interop-require-default":26}],4:[function(require,module,exports){
	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
	
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = require("../util/identifier");
	
	var pp = _index2["default"].prototype;
	
	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.
	
	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed) return;
	
	  var key = prop.key;
	  var name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;
	      break;
	
	    case "StringLiteral":
	    case "NumericLiteral":
	      name = String(key.value);
	      break;
	
	    default:
	      return;
	  }
	
	  if (name === "__proto__" && prop.kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};
	
	// ### Expression parsing
	
	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.
	
	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).
	
	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};
	
	// Parse an assignment expression. This includes applications of
	// operators like `+=`.
	
	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }
	
	  var failOnShorthandAssign = undefined;
	  if (refShorthandDefaultPos) {
	    failOnShorthandAssign = false;
	  } else {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  }
	
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	
	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }
	
	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly
	
	    this.checkLVal(left);
	
	    if (left.extra && left.extra.parenthesized) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }
	
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	
	  return left;
	};
	
	// Parse a ternary conditional (`?:`) operator.
	
	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};
	
	// Start the precedence parser.
	
	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};
	
	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.
	
	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;
	
	      if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
	        this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
	      }
	
	      var op = this.state.type;
	      this.next();
	
	      var startPos = this.state.start;
	      var startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
	
	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};
	
	// Parse unary operators, both prefix and postfix.
	
	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode();
	    var update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();
	
	    var argType = this.state.type;
	    this.addExtra(node, "parenthesizedArgument", argType === _tokenizerTypes.types.parenL);
	    node.argument = this.parseMaybeUnary();
	
	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	      this.unexpected(refShorthandDefaultPos.start);
	    }
	
	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }
	
	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }
	
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};
	
	// Parse call, dot, and `[]`-subscript expressions.
	
	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var potentialArrowAt = this.state.potentialArrowAt;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);
	
	  if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
	    return expr;
	  }
	
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  }
	
	  return this.parseSubscripts(expr, startPos, startLoc);
	};
	
	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdentifier(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();
	
	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
	      base = this.finishNode(node, "CallExpression");
	
	      if (possibleAsync && this.shouldParseAsyncArrow()) {
	        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};
	
	pp.parseCallExpressionArguments = function (close, allowTrailingComma, possibleAsyncArrow) {
	  var innerParenStart = undefined;
	
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
	    if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	      innerParenStart = this.state.start;
	    }
	
	    elts.push(this.parseExprListItem());
	  }
	
	  // we found an async arrow function so let's not allow any inner parens
	  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
	    this.unexpected();
	  }
	
	  return elts;
	};
	
	pp.shouldParseAsyncArrow = function () {
	  return this.match(_tokenizerTypes.types.arrow);
	};
	
	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.hasPlugin("asyncFunctions")) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};
	
	// Parse a no-call expression (like argument of `new` or `::` operators).
	
	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};
	
	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.
	
	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
	        this.raise(this.state.start, "'super' outside of function or class");
	      }
	
	      node = this.startNode();
	      this.next();
	      if (!this.match(_tokenizerTypes.types.parenL) && !this.match(_tokenizerTypes.types.bracketL) && !this.match(_tokenizerTypes.types.dot)) {
	        this.unexpected();
	      }
	      if (this.match(_tokenizerTypes.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
	        this.raise(node.start, "super() outside of class constructor");
	      }
	      return this.finishNode(node, "Super");
	
	    case _tokenizerTypes.types._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");
	
	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
	      var allowYield = this.shouldAllowYieldIdentifier();
	      var id = this.parseIdentifier(allowAwait || allowYield);
	
	      if (this.hasPlugin("asyncFunctions")) {
	        if (id.name === "await") {
	          if (this.state.inAsync || this.inModule) {
	            return this.parseAwait(node);
	          }
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdentifier()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // let foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }
	
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }
	
	      return id;
	
	    case _tokenizerTypes.types._do:
	      if (this.hasPlugin("doExpressions")) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock(false, true);
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }
	
	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value, "RegExpLiteral");
	      node.pattern = value.pattern;
	      node.flags = value.flags;
	      return node;
	
	    case _tokenizerTypes.types.num:
	      return this.parseLiteral(this.state.value, "NumericLiteral");
	
	    case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value, "StringLiteral");
	
	    case _tokenizerTypes.types._null:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "NullLiteral");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteral");
	
	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);
	
	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);
	
	    case _tokenizerTypes.types._function:
	      return this.parseFunctionExpression();
	
	    case _tokenizerTypes.types.at:
	      this.parseDecorators();
	
	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);
	
	    case _tokenizerTypes.types._new:
	      return this.parseNew();
	
	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();
	
	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseFunctionExpression = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	  if (this.state.inGenerator && this.eat(_tokenizerTypes.types.dot) && this.hasPlugin("functionSent")) {
	    return this.parseMetaProperty(node, meta, "sent");
	  } else {
	    return this.parseFunction(node, false);
	  }
	};
	
	pp.parseMetaProperty = function (node, meta, propertyName) {
	  node.meta = meta;
	  node.property = this.parseIdentifier(true);
	
	  if (node.property.name !== propertyName) {
	    this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
	  }
	
	  return this.finishNode(node, "MetaProperty");
	};
	
	pp.parseLiteral = function (value, type) {
	  var node = this.startNode();
	  this.addExtra(node, "rawValue", value);
	  this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	  node.value = value;
	  this.next();
	  return this.finishNode(node, type);
	};
	
	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};
	
	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;
	
	  var val = undefined;
	  this.next();
	
	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }
	
	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }
	
	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);
	
	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    for (var _i = 0; _i < exprList.length; _i++) {
	      var param = exprList[_i];
	      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
	    }
	
	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }
	
	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	
	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }
	
	  this.addExtra(val, "parenthesized", true);
	  this.addExtra(val, "parenStart", startPos);
	
	  return val;
	};
	
	pp.parseParenItem = function (node) {
	  return node;
	};
	
	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the
	
	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	
	  if (this.eat(_tokenizerTypes.types.dot)) {
	    return this.parseMetaProperty(node, meta, "target");
	  }
	
	  node.callee = this.parseNoCallExpr();
	
	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"));
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }
	
	  return this.finishNode(node, "NewExpression");
	};
	
	// Parse template expression.
	
	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};
	
	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};
	
	// Parse an object literal or binding pattern.
	
	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var decorators = [];
	  var propHash = _Object$create(null);
	  var first = true;
	  var node = this.startNode();
	
	  node.properties = [];
	  this.next();
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }
	
	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }
	
	    if (this.hasPlugin("objectRestSpread") && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = isPattern ? "RestProperty" : "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }
	
	    prop.method = false;
	    prop.shorthand = false;
	
	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }
	
	    if (!isPattern) {
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	    }
	
	    if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();
	
	      var asyncId = this.parseIdentifier();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_tokenizerTypes.types.star);
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }
	
	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);
	
	    if (prop.shorthand) {
	      this.addExtra(prop, "shorthand", true);
	    }
	
	    node.properties.push(prop);
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }
	
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};
	
	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (isAsync || isGenerator || this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "method";
	    prop.method = true;
	    this.parseMethod(prop, isGenerator, isAsync);
	    return this.finishNode(prop, "ObjectMethod");
	  }
	
	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    return this.finishNode(prop, "ObjectProperty");
	  }
	
	  if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    this.parseMethod(prop, false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.params.length !== paramCount) {
	      var start = prop.start;
	      if (prop.kind === "get") {
	        this.raise(start, "getter should have no params");
	      } else {
	        this.raise(start, "setter should have exactly one param");
	      }
	    }
	    return this.finishNode(prop, "ObjectMethod");
	  }
	
	  if (!prop.computed && prop.key.type === "Identifier") {
	    if (isPattern) {
	      var illegalBinding = this.isKeyword(prop.key.name);
	      if (!illegalBinding && this.state.strict) {
	        illegalBinding = _utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name);
	      }
	      if (illegalBinding) {
	        this.raise(prop.key.start, "Binding " + prop.key.name);
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) {
	        refShorthandDefaultPos.start = this.state.start;
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	    return this.finishNode(prop, "ObjectProperty");
	  }
	
	  this.unexpected();
	};
	
	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }
	};
	
	// Initialize empty function node.
	
	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.hasPlugin("asyncFunctions")) {
	    node.async = !!isAsync;
	  }
	};
	
	// Parse object or class method.
	
	pp.parseMethod = function (node, isGenerator, isAsync) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = node.kind || true;
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  this.state.inMethod = oldInMethod;
	  return node;
	};
	
	// Parse arrow function expression with given parameters.
	
	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};
	
	// Parse function body and check parameters.
	
	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);
	
	  var oldInAsync = this.state.inAsync;
	  this.state.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.state.inAsync = oldInAsync;
	
	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  var checkLVal = this.state.strict;
	  var checkLValStrict = false;
	  var isStrict = false;
	
	  // arrow function
	  if (allowExpression) checkLVal = true;
	
	  // normal function
	  if (!isExpression && node.body.directives.length) {
	    for (var _iterator = (node.body.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i2 >= _iterator.length) break;
	        _ref = _iterator[_i2++];
	      } else {
	        _i2 = _iterator.next();
	        if (_i2.done) break;
	        _ref = _i2.value;
	      }
	
	      var directive = _ref;
	
	      if (directive.value.value === "use strict") {
	        isStrict = true;
	        checkLVal = true;
	        checkLValStrict = true;
	        break;
	      }
	    }
	  }
	
	  //
	  if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
	    this.raise(node.id.start, "Binding yield in strict mode");
	  }
	
	  if (checkLVal) {
	    var nameHash = _Object$create(null);
	    var oldStrict = this.state.strict;
	    if (checkLValStrict) this.state.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    for (var _iterator2 = (node.params /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i3 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i3++];
	      } else {
	        _i3 = _iterator2.next();
	        if (_i3.done) break;
	        _ref2 = _i3.value;
	      }
	
	      var param = _ref2;
	
	      this.checkLVal(param, true, nameHash);
	    }
	    this.state.strict = oldStrict;
	  }
	};
	
	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).
	
	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};
	
	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};
	
	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.
	
	pp.parseIdentifier = function (liberal) {
	  var node = this.startNode();
	
	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && this.state.strict && _utilIdentifier.reservedWords.strict(this.state.value)) {
	      this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    }
	
	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	
	  if (!liberal && node.name === "await" && this.state.inAsync) {
	    this.raise(node.start, "invalid use of await inside of an async function");
	  }
	
	  this.next();
	  return this.finishNode(node, "Identifier");
	};
	
	// Parses await expression inside async function.
	
	pp.parseAwait = function (node) {
	  if (!this.state.inAsync) {
	    this.unexpected();
	  }
	  if (this.isLineTerminator()) {
	    this.unexpected();
	  }
	  if (this.match(_tokenizerTypes.types.star)) {
	    this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
	  }
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};
	
	// Parses yield expression inside generator.
	
	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],5:[function(require,module,exports){
	/* @noflow */
	
	"use strict";
	
	var _inherits = require("babel-runtime/helpers/inherits")["default"];
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _utilIdentifier = require("../util/identifier");
	
	var _options = require("../options");
	
	var _tokenizer = require("../tokenizer");
	
	var _tokenizer2 = _interopRequireDefault(_tokenizer);
	
	var plugins = {};
	
	exports.plugins = plugins;
	
	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);
	
	  function Parser(options, input /*: string*/) {
	    _classCallCheck(this, Parser);
	
	    options = _options.getOptions(options);
	    _Tokenizer.call(this, options, input);
	
	    this.options = options;
	    this.inModule = this.options.sourceType === "module";
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.plugins = this.loadPlugins(this.options.plugins);
	
	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }
	
	  Parser.prototype.hasPlugin = function hasPlugin(name /*: string*/) /*: boolean*/ {
	    return !!(this.plugins["*"] || this.plugins[name]);
	  };
	
	  Parser.prototype.extend = function extend(name /*: string*/, f /*: Function*/) {
	    this[name] = f(this[name]);
	  };
	
	  Parser.prototype.loadPlugins = function loadPlugins(plugins /*: Array<string>*/) {
	    var pluginMap = {};
	
	    if (plugins.indexOf("flow") >= 0) {
	      // ensure flow plugin loads last
	      plugins = plugins.filter(function (plugin) {
	        return plugin !== "flow";
	      });
	      plugins.push("flow");
	    }
	
	    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var _name = _ref;
	
	      if (!pluginMap[_name]) {
	        pluginMap[_name] = true;
	
	        var plugin = exports.plugins[_name];
	        if (plugin) plugin(this);
	      }
	    }
	
	    return pluginMap;
	  };
	
	  Parser.prototype.parse = function parse() /*: {
	                                                type: "File",
	                                                program: {
	                                                  type: "Program",
	                                                  body: Array<Object>
	                                                }
	                                              }*/ {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };
	
	  return Parser;
	})(_tokenizer2["default"]);
	
	exports["default"] = Parser;
	},{"../options":2,"../tokenizer":15,"../util/identifier":18,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/inherits":25,"babel-runtime/helpers/interop-require-default":26}],6:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _utilLocation = require("../util/location");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var pp = _index2["default"].prototype;
	
	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.
	
	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/interop-require-default":26}],7:[function(require,module,exports){
	"use strict";
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = require("../util/identifier");
	
	var pp = _index2["default"].prototype;
	
	// Convert existing expression atom to assignable pattern
	// if possible.
	
	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;
	
	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var prop = _ref;
	
	          if (prop.type === "ObjectMethod") {
	            if (prop.kind === "get" || prop.kind === "set") {
	              this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	            } else {
	              this.raise(prop.key.start, "Object pattern can't contain methods");
	            }
	          } else {
	            this.toAssignable(prop, isBinding);
	          }
	        }
	        break;
	
	      case "ObjectProperty":
	        this.toAssignable(node.value, isBinding);
	        break;
	
	      case "SpreadProperty":
	        node.type = "RestProperty";
	        break;
	
	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;
	
	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;
	
	      case "MemberExpression":
	        if (!isBinding) break;
	
	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};
	
	// Convert list of expression atoms to binding list.
	
	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};
	
	// Convert list of expression atoms to a list of
	
	pp.toReferencedList = function (exprList) {
	  return exprList;
	};
	
	// Parses spread element.
	
	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};
	
	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseBindingIdentifier();
	  return this.finishNode(node, "RestElement");
	};
	
	pp.shouldAllowYieldIdentifier = function () {
	  return this.match(_tokenizerTypes.types._yield) && !this.state.strict && !this.state.inGenerator;
	};
	
	pp.parseBindingIdentifier = function () {
	  return this.parseIdentifier(this.shouldAllowYieldIdentifier());
	};
	
	// Parses lvalue (assignable) atom.
	
	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types._yield:
	      if (this.state.strict || this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types.name:
	      return this.parseIdentifier(true);
	
	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [];
	  var first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};
	
	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};
	
	// Parses assignment pattern around given atom if possible.
	
	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};
	
	// Verify that a node is an lval — something that can be assigned
	// to.
	
	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.state.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) {
	        this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      }
	
	      if (checkClashes) {
	        // we need to prefix this with an underscore for the cases where we have a key of
	        // `__proto__`. there's a bug in old V8 where the following wouldn't work:
	        //
	        //   > var obj = Object.create(null);
	        //   undefined
	        //   > obj.__proto__
	        //   null
	        //   > obj.__proto__ = true;
	        //   true
	        //   > obj.__proto__
	        //   null
	        var key = "_" + expr.name;
	
	        if (checkClashes[key]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[key] = true;
	        }
	      }
	      break;
	
	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;
	
	    case "ObjectPattern":
	      for (var _iterator2 = (expr.properties /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;
	
	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }
	
	        var prop = _ref2;
	
	        if (prop.type === "ObjectProperty") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;
	
	    case "ArrayPattern":
	      for (var _iterator3 = (expr.elements /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;
	
	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }
	
	        var elem = _ref3;
	
	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;
	
	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;
	
	    case "RestProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;
	
	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/interop-require-default":26}],8:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilLocation = require("../util/location");
	
	// Start an AST node, attaching a start offset.
	
	var pp = _index2["default"].prototype;
	
	var Node = (function () {
	  function Node(pos /*:: ?: number*/, loc /*:: ?: SourceLocation*/) {
	    _classCallCheck(this, Node);
	
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }
	
	  Node.prototype.__clone = function __clone() /*: Node*/ {
	    var node2 = new Node();
	    for (var key in this) {
	      node2[key] = this[key];
	    }return node2;
	  };
	
	  return Node;
	})();
	
	pp.startNode = function () {
	  return new Node(this.state.start, this.state.startLoc);
	};
	
	pp.startNodeAt = function (pos, loc) {
	  return new Node(pos, loc);
	};
	
	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}
	
	// Finish an AST node, adding `type` and `end` properties.
	
	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};
	
	// Finish node at given position
	
	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],9:[function(require,module,exports){
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = require("../util/whitespace");
	
	var pp = _index2["default"].prototype;
	
	// ### Statement parsing
	
	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.
	
	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;
	
	  this.parseBlockBody(program, true, true, _tokenizerTypes.types.eof);
	
	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;
	
	  return this.finishNode(file, "File");
	};
	
	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };
	
	// TODO
	
	pp.stmtToDirective = function (stmt) {
	  var expr = stmt.expression;
	
	  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
	  var directive = this.startNodeAt(stmt.start, stmt.loc.start);
	
	  var raw = this.input.slice(expr.start, expr.end);
	  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes
	
	  this.addExtra(directiveLiteral, "raw", raw);
	  this.addExtra(directiveLiteral, "rawValue", val);
	
	  directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);
	
	  return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
	};
	
	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.
	
	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }
	
	  var starttype = this.state.type,
	      node = this.startNode();
	
	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.
	
	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);
	
	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);
	
	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);
	
	    case _tokenizerTypes.types._let:
	    case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var
	
	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);
	
	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	        }
	
	        if (!this.inModule) {
	          this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	        }
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);
	
	    case _tokenizerTypes.types.name:
	      if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	  }
	
	  // If the statement does not start with a statement keyword or a
	  // brace, it's an ExpressionStatement or LabeledStatement. We
	  // simply start parsing an expression, and afterwards, if the
	  // next token is a colon and the expression was a simple
	  // Identifier node, we switch to interpreting it as a label.
	  var maybeName = this.state.value;
	  var expr = this.parseExpression();
	
	  if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	    return this.parseLabeledStatement(node, maybeName, expr);
	  } else {
	    return this.parseExpressionStatement(node, expr);
	  }
	};
	
	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};
	
	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }
	
	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }
	
	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};
	
	pp.parseDecorator = function () {
	  if (!this.hasPlugin("decorators")) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};
	
	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();
	
	  if (this.isLineTerminator()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdentifier();
	    this.semicolon();
	  }
	
	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = undefined;
	  for (i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};
	
	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};
	
	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};
	
	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.
	
	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);
	
	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }
	
	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");
	
	    if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	      if (_init.declarations.length === 1 && !_init.declarations[0].init) {
	        return this.parseForIn(node, _init);
	      }
	    }
	
	    return this.parseFor(node, _init);
	  }
	
	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};
	
	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};
	
	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};
	
	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }
	
	  this.next();
	
	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.
	
	  if (this.isLineTerminator()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }
	
	  return this.finishNode(node, "ReturnStatement");
	};
	
	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);
	
	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.
	
	  var cur = undefined;
	  for (var sawDefault = undefined; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (cur) {
	        cur.consequent.push(this.parseStatement(true));
	      } else {
	        this.unexpected();
	      }
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};
	
	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};
	
	// Reused empty array added for node fields that are always empty.
	
	var empty = [];
	
	pp.parseTryStatement = function (node) {
	  this.next();
	
	  node.block = this.parseBlock();
	  node.handler = null;
	
	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();
	
	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true, _Object$create(null));
	    this.expect(_tokenizerTypes.types.parenR);
	
	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }
	
	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;
	
	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }
	
	  return this.finishNode(node, "TryStatement");
	};
	
	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};
	
	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};
	
	pp.parseWithStatement = function (node) {
	  if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};
	
	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};
	
	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var _iterator = (this.state.labels /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var label = _ref;
	
	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }
	
	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }
	
	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};
	
	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};
	
	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).
	
	pp.parseBlock = function (allowDirectives /*:: ?*/) {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types.braceL);
	  this.parseBlockBody(node, allowDirectives, false, _tokenizerTypes.types.braceR);
	  return this.finishNode(node, "BlockStatement");
	};
	
	// TODO
	
	pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
	  node.body = [];
	  node.directives = [];
	
	  var parsedNonDirective = false;
	  var oldStrict = undefined;
	  var octalPosition = undefined;
	
	  while (!this.eat(end)) {
	    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
	      octalPosition = this.state.octalPosition;
	    }
	
	    var stmt = this.parseStatement(true, topLevel);
	
	    if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
	      var directive = this.stmtToDirective(stmt);
	      node.directives.push(directive);
	
	      if (oldStrict === undefined && directive.value.value === "use strict") {
	        oldStrict = this.state.strict;
	        this.setStrict(true);
	
	        if (octalPosition) {
	          this.raise(octalPosition, "Octal literal in strict mode");
	        }
	      }
	
	      continue;
	    }
	
	    parsedNonDirective = true;
	    node.body.push(stmt);
	  }
	
	  if (oldStrict === false) {
	    this.setStrict(false);
	  }
	};
	
	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.
	
	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};
	
	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.
	
	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};
	
	// Parse a list of variable declarations.
	
	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};
	
	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};
	
	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = false;
	
	  this.initFunction(node, isAsync);
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    if (node.async && !this.hasPlugin("asyncGenerators")) {
	      this.unexpected();
	    } else {
	      node.generator = true;
	      this.next();
	    }
	  }
	
	  if (isStatement && !optionalId && !this.match(_tokenizerTypes.types.name) && !this.match(_tokenizerTypes.types._yield)) {
	    this.unexpected();
	  }
	
	  if (this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._yield)) {
	    node.id = this.parseBindingIdentifier();
	  }
	
	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	
	  this.state.inMethod = oldInMethod;
	
	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};
	
	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	};
	
	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseClass = function (node, isStatement, optionalId) {
	  this.next();
	  this.parseClassId(node, isStatement, optionalId);
	  this.parseClassSuper(node);
	  this.parseClassBody(node);
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};
	
	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	pp.parseClassBody = function (node) {
	  // class bodies are implicitly strict
	  var oldStrict = this.state.strict;
	  this.state.strict = true;
	
	  var hadConstructorCall = false;
	  var hadConstructor = false;
	  var decorators = [];
	  var classBody = this.startNode();
	
	  classBody.body = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) {
	      continue;
	    }
	
	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }
	
	    var method = this.startNode();
	
	    // steal the decorators if there are any
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }
	
	    var isConstructorCall = false;
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star);
	    var isGetSet = false;
	    var isAsync = false;
	
	    this.parsePropertyName(method);
	
	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }
	
	    if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
	      if (this.isClassProperty()) {
	        classBody.body.push(this.parseClassProperty(method));
	        continue;
	      }
	
	      if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_tokenizerTypes.types.name) && this.state.value === "constructor") {
	        isConstructorCall = true;
	        this.parsePropertyName(method);
	      }
	    }
	
	    var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
	    if (isAsyncMethod) {
	      if (this.hasPlugin("asyncGenerators") && this.eat(_tokenizerTypes.types.star)) isGenerator = true;
	      isAsync = true;
	      this.parsePropertyName(method);
	    }
	
	    method.kind = "method";
	
	    if (!method.computed) {
	      var key = method.key;
	
	      // handle get/set methods
	      // eg. class Foo { get bar() {} set bar() {} }
	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }
	
	      // disallow invalid constructors
	      var isConstructor = !isConstructorCall && !method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
	      if (isConstructor) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }
	
	      // disallow static prototype method
	      var isStaticPrototype = method["static"] && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
	      if (isStaticPrototype) {
	        this.raise(key.start, "Classes may not have static property named prototype");
	      }
	    }
	
	    // convert constructor to a constructor call
	    if (isConstructorCall) {
	      if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
	      method.kind = "constructorCall";
	      hadConstructorCall = true;
	    }
	
	    // disallow decorators on class constructors
	    if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }
	
	    this.parseClassMethod(classBody, method, isGenerator, isAsync);
	
	    // get methods aren't allowed to have any parameters
	    // set methods must have exactly 1 parameter
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.params.length !== paramCount) {
	        var start = method.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }
	
	  node.body = this.finishNode(classBody, "ClassBody");
	
	  this.state.strict = oldStrict;
	};
	
	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.hasPlugin("classProperties")) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  if (!this.eat(_tokenizerTypes.types.semi)) {
	    this.raise(node.value && node.value.end || node.key.end, "A semicolon is required after a class property");
	  }
	  return this.finishNode(node, "ClassProperty");
	};
	
	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  this.parseMethod(method, isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "ClassMethod"));
	};
	
	pp.parseClassId = function (node, isStatement, optionalId) {
	  if (this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdentifier();
	  } else {
	    if (optionalId || !isStatement) {
	      node.id = null;
	    } else {
	      this.unexpected();
	    }
	  }
	};
	
	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};
	
	// Parses module export declaration.
	
	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
	      specifier.exported = this.parseIdentifier();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdentifier(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdentifier();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var expr = this.startNode();
	    var needsSemi = false;
	    if (this.eat(_tokenizerTypes.types._function)) {
	      expr = this.parseFunction(expr, true, false, false, true);
	    } else if (this.match(_tokenizerTypes.types._class)) {
	      expr = this.parseClass(expr, true, true);
	    } else {
	      needsSemi = true;
	      expr = this.parseMaybeAssign();
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};
	
	pp.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};
	
	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
	  }
	
	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }
	
	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};
	
	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};
	
	pp.parseExportFrom = function (node, expect /*:: ?*/) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }
	
	  this.semicolon();
	};
	
	pp.shouldParseExportDeclaration = function () {
	  return this.hasPlugin("asyncFunctions") && this.isContextual("async");
	};
	
	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};
	
	// Parses a comma-separated list of module exports.
	
	pp.parseExportSpecifiers = function () {
	  var nodes = [];
	  var first = true;
	  var needsFrom = undefined;
	
	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var isDefault = this.match(_tokenizerTypes.types._default);
	    if (isDefault && !needsFrom) needsFrom = true;
	
	    var node = this.startNode();
	    node.local = this.parseIdentifier(isDefault);
	    node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }
	
	  // https://github.com/ember-cli/ember-cli/pull/3739
	  if (needsFrom && !this.isContextual("from")) {
	    this.unexpected();
	  }
	
	  return nodes;
	};
	
	// Parses import declaration.
	
	pp.parseImport = function (node) {
	  this.next();
	
	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};
	
	// Parses a comma-separated list of module imports.
	
	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }
	
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var specifier = this.startNode();
	    specifier.imported = this.parseIdentifier(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdentifier() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};
	
	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],10:[function(require,module,exports){
	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = require("../util/whitespace");
	
	var pp = _index2["default"].prototype;
	
	// ## Parser utilities
	
	// TODO
	
	pp.addExtra = function (node, key, val) {
	  if (!node) return;
	
	  var extra = node.extra = node.extra || {};
	  extra[key] = val;
	};
	
	// TODO
	
	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};
	
	// TODO
	
	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};
	
	// Tests whether parsed token is a contextual keyword.
	
	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};
	
	// Consumes contextual keyword if possible.
	
	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};
	
	// Asserts that following token is given contextual keyword.
	
	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};
	
	// Test whether a semicolon can be inserted at the current position.
	
	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};
	
	// TODO
	
	pp.isLineTerminator = function () {
	  return this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.
	
	pp.semicolon = function () {
	  if (!this.isLineTerminator()) this.unexpected();
	};
	
	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.
	
	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};
	
	// Raise an unexpected token error.
	
	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/helpers/interop-require-default":26}],11:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _parser = require("../parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var pp = _parser2["default"].prototype;
	
	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};
	
	pp.flowParseDeclareFunction = function (node) {
	  this.next();
	
	  var id = node.id = this.parseIdentifier();
	
	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();
	
	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();
	
	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	
	  this.finishNode(id, id.type);
	
	  this.semicolon();
	
	  return this.finishNode(node, "DeclareFunction");
	};
	
	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else if (this.isContextual("type")) {
	    return this.flowParseDeclareTypeAlias(node);
	  } else if (this.isContextual("interface")) {
	    return this.flowParseDeclareInterface(node);
	  } else {
	    this.unexpected();
	  }
	};
	
	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};
	
	pp.flowParseDeclareModule = function (node) {
	  this.next();
	
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdentifier();
	  }
	
	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();
	
	    // todo: declare check
	    this.next();
	
	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	
	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};
	
	pp.flowParseDeclareTypeAlias = function (node) {
	  this.next();
	  this.flowParseTypeAlias(node);
	  return this.finishNode(node, "DeclareTypeAlias");
	};
	
	pp.flowParseDeclareInterface = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node);
	  return this.finishNode(node, "DeclareInterface");
	};
	
	// Interfaces
	
	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdentifier();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node["extends"] = [];
	  node.mixins = [];
	
	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  if (this.isContextual("mixins")) {
	    this.next();
	    do {
	      node.mixins.push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  node.body = this.flowParseObjectType(allowStatic);
	};
	
	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();
	
	  node.id = this.parseIdentifier();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }
	
	  return this.finishNode(node, "InterfaceExtends");
	};
	
	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};
	
	// Type aliases
	
	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdentifier();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();
	
	  return this.finishNode(node, "TypeAlias");
	};
	
	// Type annotations
	
	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  return this.finishNode(node, "TypeParameterDeclaration");
	};
	
	pp.flowParseExistentialTypeParam = function () {
	  if (this.match(_tokenizerTypes.types.star)) {
	    var node = this.startNode();
	    this.next();
	    return this.finishNode(node, "ExistentialTypeParam");
	  }
	};
	
	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];
	
	  this.state.inType = true;
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  this.state.inType = oldInType;
	
	  return this.finishNode(node, "TypeParameterInstantiation");
	};
	
	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	};
	
	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;
	
	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();
	
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};
	
	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();
	
	  return this.finishNode(node, "FunctionTypeAnnotation");
	};
	
	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};
	
	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};
	
	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node = undefined;
	  var propertyKey = undefined;
	  var isStatic = undefined;
	
	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var optional = false;
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }
	
	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdentifier();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }
	
	  this.expect(_tokenizerTypes.types.braceR);
	
	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};
	
	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};
	
	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);
	
	  node.typeParameters = null;
	  node.id = id;
	
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdentifier();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }
	
	  return this.finishNode(node, "GenericTypeAnnotation");
	};
	
	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};
	
	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};
	
	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdentifier();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};
	
	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};
	
	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");
	
	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");
	
	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");
	
	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");
	
	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");
	
	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");
	
	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};
	
	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp = undefined;
	  var type = undefined;
	  var isGroupedType = false;
	
	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
	
	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();
	
	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();
	
	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);
	
	        this.expect(_tokenizerTypes.types.arrow);
	
	        node.returnType = this.flowParseType();
	
	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }
	
	    case _tokenizerTypes.types.parenL:
	      this.next();
	
	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }
	
	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);
	
	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }
	
	        return type;
	      }
	
	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;
	
	      this.expect(_tokenizerTypes.types.parenR);
	
	      this.expect(_tokenizerTypes.types.arrow);
	
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	
	      return this.finishNode(node, "FunctionTypeAnnotation");
	
	    case _tokenizerTypes.types.string:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types.num:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "NumericLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._null:
	      node.value = this.match(_tokenizerTypes.types._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._this:
	      node.value = this.match(_tokenizerTypes.types._this);
	      this.next();
	      return this.finishNode(node, "ThisTypeAnnotation");
	
	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }
	
	  this.unexpected();
	};
	
	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};
	
	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};
	
	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};
	
	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};
	
	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};
	
	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdentifier();
	  var isOptionalParam = false;
	
	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }
	
	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }
	
	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }
	
	  return ident;
	};
	
	exports["default"] = function (instance) {
	  // plain function return types: function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, allowExpression);
	    };
	  });
	
	  // interfaces
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.state.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });
	
	  // declares, interfaces and type aliases
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }
	
	      return inner.call(this, node, expr);
	    };
	  });
	
	  // export type
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
	    };
	  });
	
	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow /*:: ?*/) {
	      var canBeArrow = this.state.potentialArrowAt = startPos;
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	
	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }
	
	        if (canBeArrow && this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var params = node.type === "SequenceExpression" ? node.expressions : [node];
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });
	
	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";
	
	        var declarationNode = this.startNode();
	        this.next();
	
	        if (this.match(_tokenizerTypes.types.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else if (this.isContextual("interface")) {
	        node.exportKind = "type";
	        var declarationNode = this.startNode();
	        this.next();
	        return this.flowParseInterface(declarationNode);
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });
	
	  instance.extend("parseClassId", function (inner) {
	    return function (node) {
	      inner.apply(this, arguments);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });
	
	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });
	
	  // ensure that inside flow types, we bypass the jsx parser plugin
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });
	
	  // don't lex any token as a jsx one inside a flow type
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });
	
	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }
	
	  instance.extend("toAssignable", function (inner) {
	    return function (node) {
	      if (node.type === "TypeCastExpression") {
	        return typeCastToParameter(node);
	      } else {
	        return inner.apply(this, arguments);
	      }
	    };
	  });
	
	  // turn type casts that we found in function parameter head into type annotated params
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });
	
	  // this is a list of nodes, from something like a call expression, we need to filter the
	  // type casts that we've found that are illegal in this context
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }
	
	      return exprList;
	    };
	  });
	
	  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
	  // the position where this function is cal;ed
	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("checkLVal", function (inner) {
	    return function (node) {
	      if (node.type !== "TypeCastExpression") {
	        return inner.apply(this, arguments);
	      }
	    };
	  });
	
	  // parse class property type annotations
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });
	
	  // determine whether or not we're currently in the position where a class property would appear
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  // parse type parameters for class methods
	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      if (this.isRelational("<")) {
	        method.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      this.parseMethod(method, isGenerator, isAsync);
	      classBody.body.push(this.finishNode(method, "ClassMethod"));
	    };
	  });
	
	  // parse a the super class type parameters and implements
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdentifier();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });
	
	  // parse type parameters for object method shorthand
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters = undefined;
	
	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }
	
	      inner.apply(this, arguments);
	
	      // add typeParameters if we found them
	      if (typeParameters) {
	        (prop.value || prop).typeParameters = typeParameters;
	      }
	    };
	  });
	
	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });
	
	  // parse typeof and type imports
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";
	
	      var kind = null;
	      if (this.match(_tokenizerTypes.types._typeof)) {
	        kind = "typeof";
	      } else if (this.isContextual("type")) {
	        kind = "type";
	      }
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }
	
	      inner.call(this, node);
	    };
	  });
	
	  // parse function type parameters - function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });
	
	  // parse flow type annotations on variable declarator heads - let foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });
	
	  // parse the return type of an async arrow function - let foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, call);
	    };
	  });
	
	  // todo description
	  instance.extend("shouldParseAsyncArrow", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  // handle return types for arrow functions
	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;
	
	      if (canBeArrow && this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // let foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);
	
	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // let foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);
	
	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];
	},{"../parser":5,"../tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],12:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _xhtml = require("./xhtml");
	
	var _xhtml2 = _interopRequireDefault(_xhtml);
	
	var _tokenizerTypes = require("../../tokenizer/types");
	
	var _tokenizerContext = require("../../tokenizer/context");
	
	var _parser = require("../../parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var _utilIdentifier = require("../../util/identifier");
	
	var _utilWhitespace = require("../../util/whitespace");
	
	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;
	
	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);
	
	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");
	
	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};
	
	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};
	
	var pp = _parser2["default"].prototype;
	
	// Reads inline JSX contents token.
	
	pp.jsxReadToken = function () {
	  var out = "";
	  var chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	
	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);
	
	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;
	
	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};
	
	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out = undefined;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;
	
	  return out;
	};
	
	pp.jsxReadString = function (quote) {
	  var out = "";
	  var chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};
	
	pp.jsxReadEntity = function () {
	  var str = "";
	  var count = 0;
	  var entity = undefined;
	  var ch = this.input[this.state.pos];
	
	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};
	
	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.
	
	pp.jsxReadWord = function () {
	  var ch = undefined;
	  var start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};
	
	// Transforms JSX element name to string.
	
	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }
	
	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }
	
	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}
	
	// Parse next token as JSX identifier
	
	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};
	
	// Parse namespaced identifier.
	
	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};
	
	// Parses element name in any form - namespaced, member
	// or single identifier.
	
	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};
	
	// Parses any type of JSX attribute value.
	
	pp.jsxParseAttributeValue = function () {
	  var node = undefined;
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }
	
	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      node = this.parseExprAtom();
	      node.extra = null;
	      return node;
	
	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};
	
	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).
	
	pp.jsxParseEmptyExpression = function () {
	  var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
	  return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
	};
	
	// Parses JSX expression enclosed into curly brackets.
	
	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};
	
	// Parses following JSX attribute name-value pair.
	
	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};
	
	// Parses JSX opening tag starting after "<".
	
	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};
	
	// Parses JSX closing tag starting after "</".
	
	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};
	
	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.
	
	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;
	
	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;
	
	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;
	
	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;
	
	        default:
	          this.unexpected();
	      }
	    }
	
	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }
	
	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};
	
	// Parses entire JSX element from current position.
	
	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};
	
	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value, "JSXText");
	        // https://github.com/babel/babel/issues/2078
	        node.extra = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });
	
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();
	
	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }
	
	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }
	
	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }
	
	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }
	
	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }
	
	      return inner.call(this, code);
	    };
	  });
	
	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];
	},{"../../parser":5,"../../tokenizer/context":14,"../../tokenizer/types":17,"../../util/identifier":18,"../../util/whitespace":20,"./xhtml":13,"babel-runtime/helpers/interop-require-default":26}],13:[function(require,module,exports){
	"use strict";
	
	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];
	},{}],14:[function(require,module,exports){
	/* @flow */
	
	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design
	
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var _types = require("./types");
	
	var _utilWhitespace = require("../util/whitespace");
	
	var TokContext = function TokContext(token /*: string*/, isExpr /*:: ?: boolean*/, preserveSpace /*:: ?: boolean*/, override /*:: ?: Function*/) {
	  _classCallCheck(this, TokContext);
	
	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};
	
	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};
	
	exports.types = types;
	// Token-specific context update code
	
	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }
	
	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};
	
	_types.types.name.updateContext = function (prevType) {
	  this.state.exprAllowed = false;
	
	  if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
	    if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.end))) {
	      this.state.exprAllowed = true;
	    }
	  }
	};
	
	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};
	
	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};
	
	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }
	
	  this.state.exprAllowed = false;
	};
	
	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};
	},{"../util/whitespace":20,"./types":17,"babel-runtime/helpers/class-call-check":24}],15:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _utilIdentifier = require("../util/identifier");
	
	var _types = require("./types");
	
	var _context = require("./context");
	
	var _utilLocation = require("../util/location");
	
	var _utilWhitespace = require("../util/whitespace");
	
	var _state = require("./state");
	
	var _state2 = _interopRequireDefault(_state);
	
	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.
	
	/*:: import type { TokenType } from "./types";*/
	var Token = function Token(state) {
	  _classCallCheck(this, Token);
	
	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}
	
	// ## Tokenizer
	
	;
	
	exports.Token = Token;
	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  } else {
	    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	  }
	}
	
	var Tokenizer = (function () {
	  function Tokenizer(options, input) {
	    _classCallCheck(this, Tokenizer);
	
	    this.state = new _state2["default"]();
	    this.state.init(options, input);
	  }
	
	  // Move to the next token
	
	  Tokenizer.prototype.next = function next() {
	    if (!this.isLookahead) {
	      this.state.tokens.push(new Token(this.state));
	    }
	
	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };
	
	  // TODO
	
	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  // TODO
	
	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };
	
	  // TODO
	
	  Tokenizer.prototype.isKeyword = function isKeyword(word) {
	    return _utilIdentifier.isKeyword(word);
	  };
	
	  // TODO
	
	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone(true);
	
	    this.isLookahead = true;
	    this.next();
	    this.isLookahead = false;
	
	    var curr = this.state.clone(true);
	    this.state = old;
	    return curr;
	  };
	
	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).
	
	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.state.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };
	
	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };
	
	  // Read a single token, updating the parser object's token-related
	  // properties.
	
	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();
	
	    this.state.containsOctal = false;
	    this.state.octalPosition = null;
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);
	
	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };
	
	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code) || code === 92 /* '\' */) {
	        return this.readWord();
	      } else {
	      return this.getTokenFromCode(code);
	    }
	  };
	
	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };
	
	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc)
	    };
	
	    if (!this.isLookahead) {
	      this.state.tokens.push(comment);
	      this.state.comments.push(comment);
	    }
	
	    this.addComment(comment);
	  };
	
	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");
	
	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }
	
	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }
	
	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.
	
	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;
	
	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }
	
	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;
	
	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;
	
	            case 47:
	              this.skipLineComment(2);
	              break;
	
	            default:
	              break loop;
	          }
	          break;
	
	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };
	
	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.
	
	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;
	
	    this.updateContext(prevType);
	  };
	
	  // ### Token reading
	
	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //
	
	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }
	
	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };
	
	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === 42 && this.hasPlugin("exponentiationOperator")) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }
	
	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }
	
	    return this.finishOp(type, width);
	  };
	
	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };
	
	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }
	
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;
	
	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }
	
	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }
	
	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }
	
	    return this.finishOp(_types.types.relational, size);
	  };
	
	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };
	
	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();
	
	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);
	
	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }
	
	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);
	
	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);
	
	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);
	
	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);
	
	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.
	
	      case 47:
	        // '/'
	        return this.readToken_slash();
	
	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);
	
	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);
	
	      case 94:
	        // '^'
	        return this.readToken_caret();
	
	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);
	
	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);
	
	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);
	
	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }
	
	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };
	
	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };
	
	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  };
	
	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.
	
	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;
	
	    return total;
	  };
	
	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read an integer, octal integer, or floating-point number.
	
	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	
	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.state.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read a string value, interpreting backslash-escapes.
	
	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;
	
	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };
	
	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };
	
	  // Reads template string tokens.
	
	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };
	
	  // Used to read escaped characters
	
	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0) {
	            if (!this.state.containsOctal) {
	              this.state.containsOctal = true;
	              this.state.octalPosition = this.state.pos - 2;
	            }
	            if (this.state.strict || inTemplate) {
	              this.raise(this.state.pos - 2, "Octal literal in strict mode");
	            }
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };
	
	  // Used to read character escape sequences ('\x', '\u', '\U').
	
	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };
	
	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.
	
	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;
	
	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;
	
	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }
	
	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }
	
	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };
	
	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.
	
	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) {
	      type = _types.keywords[word];
	    }
	    return this.finishToken(type, word);
	  };
	
	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }
	
	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }
	
	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
	      return true;
	    }
	
	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }
	
	    return !this.state.exprAllowed;
	  };
	
	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };
	
	  return Tokenizer;
	})();
	
	exports["default"] = Tokenizer;
	},{"../util/identifier":18,"../util/location":19,"../util/whitespace":20,"./context":14,"./state":16,"./types":17,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],16:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var _utilLocation = require("../util/location");
	
	var _context = require("./context");
	
	var _types = require("./types");
	
	/*:: import type { TokContext } from "./context";*/
	/*:: import type { Token } from "./index";*/
	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }
	
	  State.prototype.init = function init(options /*: Object*/, input /*: string*/) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";
	
	    this.input = input;
	
	    this.potentialArrowAt = -1;
	
	    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;
	
	    this.labels = [];
	
	    this.decorators = [];
	
	    this.tokens = [];
	
	    this.comments = [];
	
	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];
	
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;
	
	    this.type = _types.types.eof;
	    this.value = null;
	    this.start = this.end = this.pos;
	    this.startLoc = this.endLoc = this.curPosition();
	
	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;
	
	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;
	
	    this.containsEsc = this.containsOctal = false;
	    this.octalPosition = null;
	
	    return this;
	  };
	
	  // TODO
	
	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };
	
	  State.prototype.clone = function clone(skipArrays /*:: ?*/) {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];
	
	      if ((!skipArrays || key === "context") && Array.isArray(val)) {
	        val = val.slice();
	      }
	
	      state[key] = val;
	    }
	    return state;
	  };
	
	  return State;
	})();
	
	exports["default"] = State;
	module.exports = exports["default"];
	
	// TODO
	
	// Used to signify the start of a potential arrow function
	
	// Flags to track whether we are in a function, a generator.
	
	// Labels in scope.
	
	// Leading decorators.
	
	// Token store.
	
	// Comment store.
	
	// Comment attachment store
	
	// The current position of the tokenizer in the input.
	
	// Properties of the current token:
	// Its type
	
	// For tokens that include more information than their type, the value
	
	// Its start and end offset
	
	// And, if locations are used, the {line, column} object
	// corresponding to those offsets
	
	// Position information for the previous token
	
	// The context stack is used to superficially track syntactic
	// context to predict whether a regular expression is allowed in a
	// given position.
	
	// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.
	
	// TODO
	},{"../util/location":19,"./context":14,"./types":17,"babel-runtime/helpers/class-call-check":24}],17:[function(require,module,exports){
	// ## Token types
	
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.
	
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  _classCallCheck(this, TokenType);
	
	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};
	
	exports.TokenType = TokenType;
	
	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };
	
	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),
	
	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),
	
	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.
	
	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};
	
	exports.types = types;
	// Map keyword names to token types.
	
	var keywords = {};
	
	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}
	
	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true, beforeExpr: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });
	},{"babel-runtime/helpers/class-call-check":24}],18:[function(require,module,exports){
	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}
	
	// Reserved word lists for various dialects of the language
	
	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};
	
	exports.reservedWords = reservedWords;
	// And the keywords
	
	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");
	
	exports.isKeyword = isKeyword;
	// ## Character categories
	
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.
	
	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";
	
	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	
	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];
	
	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}
	
	// Test whether a given character code starts an identifier.
	
	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}
	
	// Test whether a given character is part of an identifier.
	
	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}
	},{}],19:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;
	
	var _whitespace = require("./whitespace");
	
	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.
	
	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);
	
	  this.line = line;
	  this.column = col;
	};
	
	exports.Position = Position;
	
	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);
	
	  this.start = start;
	  this.end = end;
	}
	
	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.
	
	;
	
	exports.SourceLocation = SourceLocation;
	
	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}
	},{"./whitespace":20,"babel-runtime/helpers/class-call-check":24}],20:[function(require,module,exports){
	/* @flow */
	
	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");
	
	exports.lineBreakG = lineBreakG;
	
	function isNewLine(code /*: number*/) /*: boolean*/ {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}
	
	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;
	},{}],21:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
	},{"core-js/library/fn/get-iterator":27}],22:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
	},{"core-js/library/fn/object/create":28}],23:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
	},{"core-js/library/fn/object/set-prototype-of":29}],24:[function(require,module,exports){
	"use strict";
	
	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	exports.__esModule = true;
	},{}],25:[function(require,module,exports){
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];
	
	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }
	
	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	exports.__esModule = true;
	},{"babel-runtime/core-js/object/create":22,"babel-runtime/core-js/object/set-prototype-of":23}],26:[function(require,module,exports){
	"use strict";
	
	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};
	
	exports.__esModule = true;
	},{}],27:[function(require,module,exports){
	require('../modules/web.dom.iterable');
	require('../modules/es6.string.iterator');
	module.exports = require('../modules/core.get-iterator');
	},{"../modules/core.get-iterator":63,"../modules/es6.string.iterator":66,"../modules/web.dom.iterable":67}],28:[function(require,module,exports){
	var $ = require('../../modules/$');
	module.exports = function create(P, D){
	  return $.create(P, D);
	};
	},{"../../modules/$":50}],29:[function(require,module,exports){
	require('../../modules/es6.object.set-prototype-of');
	module.exports = require('../../modules/$.core').Object.setPrototypeOf;
	},{"../../modules/$.core":35,"../../modules/es6.object.set-prototype-of":65}],30:[function(require,module,exports){
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	},{}],31:[function(require,module,exports){
	module.exports = function(){ /* empty */ };
	},{}],32:[function(require,module,exports){
	var isObject = require('./$.is-object');
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	},{"./$.is-object":45}],33:[function(require,module,exports){
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = require('./$.cof')
	  , TAG = require('./$.wks')('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	},{"./$.cof":34,"./$.wks":61}],34:[function(require,module,exports){
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	},{}],35:[function(require,module,exports){
	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	},{}],36:[function(require,module,exports){
	// optional / simple context binding
	var aFunction = require('./$.a-function');
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	},{"./$.a-function":30}],37:[function(require,module,exports){
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	},{}],38:[function(require,module,exports){
	// Thank's IE8 for his funny defineProperty
	module.exports = !require('./$.fails')(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	},{"./$.fails":40}],39:[function(require,module,exports){
	var global    = require('./$.global')
	  , core      = require('./$.core')
	  , ctx       = require('./$.ctx')
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;
	},{"./$.core":35,"./$.ctx":36,"./$.global":41}],40:[function(require,module,exports){
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	},{}],41:[function(require,module,exports){
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	},{}],42:[function(require,module,exports){
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	},{}],43:[function(require,module,exports){
	var $          = require('./$')
	  , createDesc = require('./$.property-desc');
	module.exports = require('./$.descriptors') ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	},{"./$":50,"./$.descriptors":38,"./$.property-desc":52}],44:[function(require,module,exports){
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = require('./$.cof');
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	},{"./$.cof":34}],45:[function(require,module,exports){
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	},{}],46:[function(require,module,exports){
	'use strict';
	var $              = require('./$')
	  , descriptor     = require('./$.property-desc')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	},{"./$":50,"./$.hide":43,"./$.property-desc":52,"./$.set-to-string-tag":55,"./$.wks":61}],47:[function(require,module,exports){
	'use strict';
	var LIBRARY        = require('./$.library')
	  , $export        = require('./$.export')
	  , redefine       = require('./$.redefine')
	  , hide           = require('./$.hide')
	  , has            = require('./$.has')
	  , Iterators      = require('./$.iterators')
	  , $iterCreate    = require('./$.iter-create')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , getProto       = require('./$').getProto
	  , ITERATOR       = require('./$.wks')('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	},{"./$":50,"./$.export":39,"./$.has":42,"./$.hide":43,"./$.iter-create":46,"./$.iterators":49,"./$.library":51,"./$.redefine":53,"./$.set-to-string-tag":55,"./$.wks":61}],48:[function(require,module,exports){
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	},{}],49:[function(require,module,exports){
	module.exports = {};
	},{}],50:[function(require,module,exports){
	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};
	},{}],51:[function(require,module,exports){
	module.exports = true;
	},{}],52:[function(require,module,exports){
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	},{}],53:[function(require,module,exports){
	module.exports = require('./$.hide');
	},{"./$.hide":43}],54:[function(require,module,exports){
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = require('./$').getDesc
	  , isObject = require('./$.is-object')
	  , anObject = require('./$.an-object');
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};
	},{"./$":50,"./$.an-object":32,"./$.ctx":36,"./$.is-object":45}],55:[function(require,module,exports){
	var def = require('./$').setDesc
	  , has = require('./$.has')
	  , TAG = require('./$.wks')('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	},{"./$":50,"./$.has":42,"./$.wks":61}],56:[function(require,module,exports){
	var global = require('./$.global')
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	},{"./$.global":41}],57:[function(require,module,exports){
	var toInteger = require('./$.to-integer')
	  , defined   = require('./$.defined');
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	},{"./$.defined":37,"./$.to-integer":58}],58:[function(require,module,exports){
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	},{}],59:[function(require,module,exports){
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = require('./$.iobject')
	  , defined = require('./$.defined');
	module.exports = function(it){
	  return IObject(defined(it));
	};
	},{"./$.defined":37,"./$.iobject":44}],60:[function(require,module,exports){
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	},{}],61:[function(require,module,exports){
	var store  = require('./$.shared')('wks')
	  , uid    = require('./$.uid')
	  , Symbol = require('./$.global').Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};
	},{"./$.global":41,"./$.shared":56,"./$.uid":60}],62:[function(require,module,exports){
	var classof   = require('./$.classof')
	  , ITERATOR  = require('./$.wks')('iterator')
	  , Iterators = require('./$.iterators');
	module.exports = require('./$.core').getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	},{"./$.classof":33,"./$.core":35,"./$.iterators":49,"./$.wks":61}],63:[function(require,module,exports){
	var anObject = require('./$.an-object')
	  , get      = require('./core.get-iterator-method');
	module.exports = require('./$.core').getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};
	},{"./$.an-object":32,"./$.core":35,"./core.get-iterator-method":62}],64:[function(require,module,exports){
	'use strict';
	var addToUnscopables = require('./$.add-to-unscopables')
	  , step             = require('./$.iter-step')
	  , Iterators        = require('./$.iterators')
	  , toIObject        = require('./$.to-iobject');
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	},{"./$.add-to-unscopables":31,"./$.iter-define":47,"./$.iter-step":48,"./$.iterators":49,"./$.to-iobject":59}],65:[function(require,module,exports){
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = require('./$.export');
	$export($export.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
	},{"./$.export":39,"./$.set-proto":54}],66:[function(require,module,exports){
	'use strict';
	var $at  = require('./$.string-at')(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	require('./$.iter-define')(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	},{"./$.iter-define":47,"./$.string-at":57}],67:[function(require,module,exports){
	require('./es6.array.iterator');
	var Iterators = require('./$.iterators');
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
	},{"./$.iterators":49,"./es6.array.iterator":64}]},{},[1])(1)
	});

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/metadata.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.ExportDeclaration = ExportDeclaration;
	exports.Scope = Scope;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var ModuleDeclaration = {
	  enter: function enter(path, file) {
	    var node = path.node;
	
	    if (node.source) {
	      node.source.value = file.resolveModuleSource(node.source.value);
	    }
	  }
	};
	
	exports.ModuleDeclaration = ModuleDeclaration;
	var ImportDeclaration = {
	  exit: function exit(path, file) {
	    var node = path.node;
	
	    var specifiers = [];
	    var imported = [];
	    file.metadata.modules.imports.push({
	      source: node.source.value,
	      imported: imported,
	      specifiers: specifiers
	    });
	
	    for (var _iterator = (path.get("specifiers") /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var specifier = _ref;
	
	      var local = specifier.node.local.name;
	
	      if (specifier.isImportDefaultSpecifier()) {
	        imported.push("default");
	        specifiers.push({
	          kind: "named",
	          imported: "default",
	          local: local
	        });
	      }
	
	      if (specifier.isImportSpecifier()) {
	        var importedName = specifier.node.imported.name;
	        imported.push(importedName);
	        specifiers.push({
	          kind: "named",
	          imported: importedName,
	          local: local
	        });
	      }
	
	      if (specifier.isImportNamespaceSpecifier()) {
	        imported.push("*");
	        specifiers.push({
	          kind: "namespace",
	          local: local
	        });
	      }
	    }
	  }
	};
	
	exports.ImportDeclaration = ImportDeclaration;
	
	function ExportDeclaration(path, file) {
	  var node = path.node;
	
	  var source = node.source ? node.source.value : null;
	  var exports = file.metadata.modules.exports;
	
	  // export function foo() {}
	  // export let foo = "bar";
	  var declar = path.get("declaration");
	  if (declar.isStatement()) {
	    var bindings = declar.getBindingIdentifiers();
	
	    for (var _name in bindings) {
	      exports.exported.push(_name);
	      exports.specifiers.push({
	        kind: "local",
	        local: _name,
	        exported: path.isExportDefaultDeclaration() ? "default" : _name
	      });
	    }
	  }
	
	  if (path.isExportNamedDeclaration() && node.specifiers) {
	    for (var _iterator2 = (node.specifiers /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var specifier = _ref2;
	
	      var exported = specifier.exported.name;
	      exports.exported.push(exported);
	
	      // export foo from "bar";
	      if (t.isExportDefaultSpecifier(specifier)) {
	        exports.specifiers.push({
	          kind: "external",
	          local: exported,
	          exported: exported,
	          source: source
	        });
	      }
	
	      // export * as foo from "bar";
	      if (t.isExportNamespaceSpecifier(specifier)) {
	        exports.specifiers.push({
	          kind: "external-namespace",
	          exported: exported,
	          source: source
	        });
	      }
	
	      var local = specifier.local;
	      if (!local) continue;
	
	      // export { foo } from "bar";
	      // export { foo as bar } from "bar";
	      if (source) {
	        exports.specifiers.push({
	          kind: "external",
	          local: local.name,
	          exported: exported,
	          source: source
	        });
	      }
	
	      // export { foo };
	      // export { foo as bar };
	      if (!source) {
	        exports.specifiers.push({
	          kind: "local",
	          local: local.name,
	          exported: exported
	        });
	      }
	    }
	  }
	
	  // export * from "bar";
	  if (path.isExportAllDeclaration()) {
	    exports.specifiers.push({
	      kind: "external-all",
	      source: source
	    });
	  }
	}
	
	function Scope(path) {
	  path.skip();
	}

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/plugin-pass.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _store = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/store.js");
	
	var _store2 = _interopRequireDefault(_store);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _file5 = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/file/index.js");
	
	var _file6 = _interopRequireDefault(_file5);
	
	/*:: import type Plugin from "./plugin";*/
	var PluginPass = (function (_Store) {
	  _inherits(PluginPass, _Store);
	
	  function PluginPass(file /*: File*/, plugin /*: Plugin*/) {
	    var options /*: Object*/ = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    _classCallCheck(this, PluginPass);
	
	    _Store.call(this);
	    this.plugin = plugin;
	    this.file = file;
	    this.opts = options;
	  }
	
	  PluginPass.prototype.transform = function transform() {
	    var file = this.file;
	    file.log.debug("Start transformer " + this.key);
	    _babelTraverse2["default"](file.ast, this.plugin.visitor, file.scope, file);
	    file.log.debug("Finish transformer " + this.key);
	  };
	
	  PluginPass.prototype.addHelper = function addHelper() {
	    // istanbul ignore next
	
	    var _file;
	
	    return (_file = this.file).addHelper.apply(_file, arguments);
	  };
	
	  PluginPass.prototype.addImport = function addImport() {
	    // istanbul ignore next
	
	    var _file2;
	
	    return (_file2 = this.file).addImport.apply(_file2, arguments);
	  };
	
	  PluginPass.prototype.getModuleName = function getModuleName() {
	    // istanbul ignore next
	
	    var _file3;
	
	    return (_file3 = this.file).getModuleName.apply(_file3, arguments);
	  };
	
	  PluginPass.prototype.buildCodeFrameError = function buildCodeFrameError() {
	    // istanbul ignore next
	
	    var _file4;
	
	    return (_file4 = this.file).buildCodeFrameError.apply(_file4, arguments);
	  };
	
	  return PluginPass;
	})(_store2["default"]);
	
	exports["default"] = PluginPass;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _detectIndent = __webpack_require__("./node_modules/detect-indent/index.js");
	
	var _detectIndent2 = _interopRequireDefault(_detectIndent);
	
	var _whitespace = __webpack_require__("./node_modules/babel-generator/lib/whitespace.js");
	
	var _whitespace2 = _interopRequireDefault(_whitespace);
	
	var _sourceMap = __webpack_require__("./node_modules/babel-generator/lib/source-map.js");
	
	var _sourceMap2 = _interopRequireDefault(_sourceMap);
	
	var _position = __webpack_require__("./node_modules/babel-generator/lib/position.js");
	
	var _position2 = _interopRequireDefault(_position);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _printer = __webpack_require__("./node_modules/babel-generator/lib/printer.js");
	
	var _printer2 = _interopRequireDefault(_printer);
	
	/**
	 * Babel's code generator, turns an ast into code, maintaining sourcemaps,
	 * user preferences, and valid output.
	 */
	
	var CodeGenerator = (function (_Printer) {
	  _inherits(CodeGenerator, _Printer);
	
	  function CodeGenerator(ast, opts, code) {
	    _classCallCheck(this, CodeGenerator);
	
	    opts = opts || {};
	
	    var comments = ast.comments || [];
	    var tokens = ast.tokens || [];
	    var format = CodeGenerator.normalizeOptions(code, opts, tokens);
	
	    var position = new _position2["default"]();
	
	    _Printer.call(this, position, format);
	
	    this.comments = comments;
	    this.position = position;
	    this.tokens = tokens;
	    this.format = format;
	    this.opts = opts;
	    this.ast = ast;
	
	    this.whitespace = new _whitespace2["default"](tokens);
	    this.map = new _sourceMap2["default"](position, opts, code);
	  }
	
	  /**
	   * Normalize generator options, setting defaults.
	   *
	   * - Detects code indentation.
	   * - If `opts.compact = "auto"` and the code is over 100KB, `compact` will be set to `true`.
	    */
	
	  CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
	    var style = "  ";
	    if (code) {
	      var _indent = _detectIndent2["default"](code).indent;
	      if (_indent && _indent !== " ") style = _indent;
	    }
	
	    var format = {
	      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
	      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
	      shouldPrintComment: opts.shouldPrintComment,
	      retainLines: opts.retainLines,
	      comments: opts.comments == null || opts.comments,
	      compact: opts.compact,
	      minified: opts.minified,
	      concise: opts.concise,
	      quotes: opts.quotes || CodeGenerator.findCommonStringDelimiter(code, tokens),
	      indent: {
	        adjustMultilineComment: true,
	        style: style,
	        base: 0
	      }
	    };
	
	    if (format.minified) {
	      format.compact = true;
	    }
	
	    if (format.compact === "auto") {
	      format.compact = code.length > 100000; // 100KB
	
	      if (format.compact) {
	        console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
	      }
	    }
	
	    if (format.compact) {
	      format.indent.adjustMultilineComment = false;
	    }
	
	    return format;
	  };
	
	  /**
	   * Determine if input code uses more single or double quotes.
	   */
	
	  CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
	    var occurences = {
	      single: 0,
	      double: 0
	    };
	
	    var checked = 0;
	
	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];
	      if (token.type.label !== "string") continue;
	
	      var raw = code.slice(token.start, token.end);
	      if (raw[0] === "'") {
	        occurences.single++;
	      } else {
	        occurences.double++;
	      }
	
	      checked++;
	      if (checked >= 3) break;
	    }
	    if (occurences.single > occurences.double) {
	      return "single";
	    } else {
	      return "double";
	    }
	  };
	
	  /**
	   * Generate code and sourcemap from ast.
	   *
	   * Appends comments that weren't attached to any node to the end of the generated output.
	   */
	
	  CodeGenerator.prototype.generate = function generate() {
	    this.print(this.ast);
	    this.printAuxAfterComment();
	
	    return {
	      map: this.map.get(),
	      code: this.get()
	    };
	  };
	
	  return CodeGenerator;
	})(_printer2["default"]);
	
	exports.CodeGenerator = CodeGenerator;
	
	exports["default"] = function (ast /*: Object*/, opts /*: Object*/, code /*: string*/) /*: Object*/ {
	  var gen = new CodeGenerator(ast, opts, code);
	  return gen.generate();
	};

/***/ },

/***/ "./node_modules/babel-generator/lib/whitespace.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Returns `i`th number from `base`, continuing from 0 when `max` is reached.
	 * Useful for shifting `for` loop by a fixed number but going over all items.
	 */
	
	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	exports.__esModule = true;
	function getLookupIndex(i /*: number*/, base /*: number*/, max /*: number*/) /*: number*/ {
	  i += base;
	
	  if (i >= max) {
	    i -= max;
	  }
	
	  return i;
	}
	
	/**
	 * Get whitespace around tokens.
	 */
	
	var Whitespace = (function () {
	  function Whitespace(tokens) {
	    _classCallCheck(this, Whitespace);
	
	    this.tokens = tokens;
	    this.used = {};
	
	    // Profiling this code shows that while generator passes over it, indexes
	    // returned by `getNewlinesBefore` and `getNewlinesAfter` are always increasing.
	
	    // We use this implementation detail for an optimization: instead of always
	    // starting to look from `this.tokens[0]`, we will start `for` loops from the
	    // previous successful match. We will enumerate all tokens—but the common
	    // case will be much faster.
	
	    this._lastFoundIndex = 0;
	  }
	
	  /**
	   * Count all the newlines before a node.
	   */
	
	  Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
	    var startToken = undefined;
	    var endToken = undefined;
	    var tokens = this.tokens;
	
	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];
	
	      // this is the token this node starts with
	      if (node.start === token.start) {
	        startToken = tokens[i - 1];
	        endToken = token;
	
	        this._lastFoundIndex = i;
	        break;
	      }
	    }
	
	    return this.getNewlinesBetween(startToken, endToken);
	  };
	
	  /**
	   * Count all the newlines after a node.
	   */
	
	  Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
	    var startToken = undefined;
	    var endToken = undefined;
	    var tokens = this.tokens;
	
	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];
	
	      // this is the token this node ends with
	      if (node.end === token.end) {
	        startToken = token;
	        endToken = tokens[i + 1];
	        if (endToken.type.label === ",") endToken = tokens[i + 2];
	
	        this._lastFoundIndex = i;
	        break;
	      }
	    }
	
	    if (endToken && endToken.type.label === "eof") {
	      return 1;
	    } else {
	      var lines = this.getNewlinesBetween(startToken, endToken);
	      if (node.type === "CommentLine" && !lines) {
	        // line comment
	        return 1;
	      } else {
	        return lines;
	      }
	    }
	  };
	
	  /**
	   * Count all the newlines between two tokens.
	   */
	
	  Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
	    if (!endToken || !endToken.loc) return 0;
	
	    var start = startToken ? startToken.loc.end.line : 1;
	    var end = endToken.loc.start.line;
	    var lines = 0;
	
	    for (var line = start; line < end; line++) {
	      if (typeof this.used[line] === "undefined") {
	        this.used[line] = true;
	        lines++;
	      }
	    }
	
	    return lines;
	  };
	
	  return Whitespace;
	})();
	
	exports["default"] = Whitespace;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/source-map.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _sourceMap = __webpack_require__("./node_modules/source-map/source-map.js");
	
	var _sourceMap2 = _interopRequireDefault(_sourceMap);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/**
	 * Build a sourcemap.
	 */
	
	var SourceMap = (function () {
	  function SourceMap(position, opts, code) {
	    _classCallCheck(this, SourceMap);
	
	    this.position = position;
	    this.opts = opts;
	    this.last = { generated: {}, original: {} };
	
	    if (opts.sourceMaps) {
	      this.map = new _sourceMap2["default"].SourceMapGenerator({
	        file: opts.sourceMapTarget,
	        sourceRoot: opts.sourceRoot
	      });
	
	      this.map.setSourceContent(opts.sourceFileName, code);
	    } else {
	      this.map = null;
	    }
	  }
	
	  /**
	   * Get the sourcemap.
	   */
	
	  SourceMap.prototype.get = function get() {
	    var map = this.map;
	    if (map) {
	      return map.toJSON();
	    } else {
	      return map;
	    }
	  };
	
	  /**
	   * Mark a node's generated position, and add it to the sourcemap.
	   */
	
	  SourceMap.prototype.mark = function mark(node) {
	    var loc = node.loc;
	    if (!loc) return; // no location info
	
	    var map = this.map;
	    if (!map) return; // no source map
	
	    if (t.isProgram(node) || t.isFile(node)) return; // illegal mapping nodes
	
	    var position = this.position;
	
	    var generated = {
	      line: position.line,
	      column: position.column
	    };
	
	    var original = loc.start;
	
	    // Avoid emitting duplicates on either side. Duplicated
	    // original values creates unnecesssarily large source maps
	    // and increases compile time. Duplicates on the generated
	    // side can lead to incorrect mappings.
	    if (comparePosition(original, this.last.original) || comparePosition(generated, this.last.generated)) {
	      return;
	    }
	
	    this.last = {
	      source: this.opts.sourceFileName,
	      generated: generated,
	      original: original
	    };
	
	    map.addMapping(this.last);
	  };
	
	  return SourceMap;
	})();
	
	exports["default"] = SourceMap;
	
	function comparePosition(a, b) {
	  return a.line === b.line && a.column === b.column;
	}
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/position.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	/**
	 * Track current position in code generation.
	 */
	
	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	exports.__esModule = true;
	
	var Position = (function () {
	  function Position() {
	    _classCallCheck(this, Position);
	
	    this.line = 1;
	    this.column = 0;
	  }
	
	  /**
	   * Push a string to the current position, mantaining the current line and column.
	   */
	
	  Position.prototype.push = function push(str /*: string*/) /*: void*/ {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line++;
	        this.column = 0;
	      } else {
	        this.column++;
	      }
	    }
	  };
	
	  /**
	   * Unshift a string from the current position, mantaining the current line and column.
	   */
	
	  Position.prototype.unshift = function unshift(str /*: string*/) /*: void*/ {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line--;
	      } else {
	        this.column--;
	      }
	    }
	  };
	
	  return Position;
	})();
	
	exports["default"] = Position;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/printer.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Object$assign = __webpack_require__("./node_modules/babel-runtime/core-js/object/assign.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _repeating = __webpack_require__("./node_modules/repeating/index.js");
	
	var _repeating2 = _interopRequireDefault(_repeating);
	
	var _buffer = __webpack_require__("./node_modules/babel-generator/lib/buffer.js");
	
	var _buffer2 = _interopRequireDefault(_buffer);
	
	var _node = __webpack_require__("./node_modules/babel-generator/lib/node/index.js");
	
	var _node2 = _interopRequireDefault(_node);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var Printer = (function (_Buffer) {
	  _inherits(Printer, _Buffer);
	
	  function Printer() {
	    _classCallCheck(this, Printer);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    _Buffer.call.apply(_Buffer, [this].concat(args));
	    this.insideAux = false;
	    this.printAuxAfterOnNextUserNode = false;
	    this._printStack = [];
	  }
	
	  Printer.prototype.print = function print(node, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    if (!node) return;
	
	    this._lastPrintedIsEmptyStatement = false;
	
	    if (parent && parent._compact) {
	      node._compact = true;
	    }
	
	    var oldInAux = this.insideAux;
	    this.insideAux = !node.loc;
	
	    var oldConcise = this.format.concise;
	    if (node._compact) {
	      this.format.concise = true;
	    }
	
	    var printMethod = this[node.type];
	    if (!printMethod) {
	      throw new ReferenceError("unknown node of type " + JSON.stringify(node.type) + " with constructor " + JSON.stringify(node && node.constructor.name));
	    }
	
	    this._printStack.push(node);
	
	    if (node.loc) this.printAuxAfterComment();
	    this.printAuxBeforeComment(oldInAux);
	
	    var needsParens = _node2["default"].needsParens(node, parent, this._printStack);
	    if (needsParens) this.push("(");
	
	    this.printLeadingComments(node, parent);
	
	    this.catchUp(node);
	
	    this._printNewline(true, node, parent, opts);
	
	    if (opts.before) opts.before();
	
	    this.map.mark(node);
	
	    this._print(node, parent);
	
	    // Check again if any of our children may have left an aux comment on the stack
	    if (node.loc) this.printAuxAfterComment();
	
	    this.printTrailingComments(node, parent);
	
	    if (needsParens) this.push(")");
	
	    // end
	    this._printStack.pop();
	    if (parent) this.map.mark(parent);
	    if (opts.after) opts.after();
	
	    this.format.concise = oldConcise;
	    this.insideAux = oldInAux;
	
	    this._printNewline(false, node, parent, opts);
	  };
	
	  Printer.prototype.printAuxBeforeComment = function printAuxBeforeComment(wasInAux) {
	    var comment = this.format.auxiliaryCommentBefore;
	    if (!wasInAux && this.insideAux && !this.printAuxAfterOnNextUserNode) {
	      this.printAuxAfterOnNextUserNode = true;
	      if (comment) this.printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  };
	
	  Printer.prototype.printAuxAfterComment = function printAuxAfterComment() {
	    if (this.printAuxAfterOnNextUserNode) {
	      this.printAuxAfterOnNextUserNode = false;
	      var comment = this.format.auxiliaryCommentAfter;
	      if (comment) this.printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  };
	
	  Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {
	    var extra = node.extra;
	    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
	      return extra.raw;
	    }
	  };
	
	  Printer.prototype._print = function _print(node, parent) {
	    // In minified mode we need to produce as little bytes as needed
	    // and need to make sure that string quoting is consistent.
	    // That means we have to always reprint as opposed to getting
	    // the raw value.
	    if (!this.format.minified) {
	      var extra = this.getPossibleRaw(node);
	      if (extra) {
	        this.push("");
	        this._push(extra);
	        return;
	      }
	    }
	
	    var printMethod = this[node.type];
	    printMethod.call(this, node, parent);
	  };
	
	  Printer.prototype.printJoin = function printJoin(nodes /*: ?Array*/, parent /*: Object*/) {
	    // istanbul ignore next
	
	    var _this = this;
	
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    if (!nodes || !nodes.length) return;
	
	    var len = nodes.length;
	    var node = undefined,
	        i = undefined;
	
	    if (opts.indent) this.indent();
	
	    var printOpts = {
	      statement: opts.statement,
	      addNewlines: opts.addNewlines,
	      after: function after() {
	        if (opts.iterator) {
	          opts.iterator(node, i);
	        }
	
	        if (opts.separator && parent.loc) {
	          _this.printAuxAfterComment();
	        }
	
	        if (opts.separator && i < len - 1) {
	          _this.push(opts.separator);
	        }
	      }
	    };
	
	    for (i = 0; i < nodes.length; i++) {
	      node = nodes[i];
	      this.print(node, parent, printOpts);
	    }
	
	    if (opts.indent) this.dedent();
	  };
	
	  Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {
	    var indent = !!node.leadingComments;
	    if (indent) this.indent();
	    this.print(node, parent);
	    if (indent) this.dedent();
	  };
	
	  Printer.prototype.printBlock = function printBlock(parent) {
	    var node = parent.body;
	
	    if (!t.isEmptyStatement(node)) {
	      this.space();
	    }
	
	    this.print(node, parent);
	  };
	
	  Printer.prototype.generateComment = function generateComment(comment) {
	    var val = comment.value;
	    if (comment.type === "CommentLine") {
	      val = "//" + val;
	    } else {
	      val = "/*" + val + "*/";
	    }
	    return val;
	  };
	
	  Printer.prototype.printTrailingComments = function printTrailingComments(node, parent) {
	    this.printComments(this.getComments("trailingComments", node, parent));
	  };
	
	  Printer.prototype.printLeadingComments = function printLeadingComments(node, parent) {
	    this.printComments(this.getComments("leadingComments", node, parent));
	  };
	
	  Printer.prototype.printInnerComments = function printInnerComments(node) {
	    var indent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    if (!node.innerComments) return;
	    if (indent) this.indent();
	    this.printComments(node.innerComments);
	    if (indent) this.dedent();
	  };
	
	  Printer.prototype.printSequence = function printSequence(nodes, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    opts.statement = true;
	    return this.printJoin(nodes, parent, opts);
	  };
	
	  Printer.prototype.printList = function printList(items, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    if (opts.separator == null) {
	      opts.separator = ",";
	      if (!this.format.compact) opts.separator += " ";
	    }
	
	    return this.printJoin(items, parent, opts);
	  };
	
	  Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
	    if (!opts.statement && !_node2["default"].isUserWhitespacable(node, parent)) {
	      return;
	    }
	
	    var lines = 0;
	
	    if (node.start != null && !node._ignoreUserWhitespace && this.tokens.length) {
	      // user node
	      if (leading) {
	        lines = this.whitespace.getNewlinesBefore(node);
	      } else {
	        lines = this.whitespace.getNewlinesAfter(node);
	      }
	    } else {
	      // generated node
	      if (!leading) lines++; // always include at least a single line after
	      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;
	
	      var needs = _node2["default"].needsWhitespaceAfter;
	      if (leading) needs = _node2["default"].needsWhitespaceBefore;
	      if (needs(node, parent)) lines++;
	
	      // generated nodes can't add starting file whitespace
	      if (!this.buf) lines = 0;
	    }
	
	    this.newline(lines);
	  };
	
	  Printer.prototype.getComments = function getComments(key, node) {
	    return node && node[key] || [];
	  };
	
	  Printer.prototype.shouldPrintComment = function shouldPrintComment(comment) {
	    if (this.format.shouldPrintComment) {
	      return this.format.shouldPrintComment(comment.value);
	    } else {
	      if (!this.format.minified && (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0)) {
	        return true;
	      } else {
	        return this.format.comments;
	      }
	    }
	  };
	
	  Printer.prototype.printComment = function printComment(comment) {
	    if (!this.shouldPrintComment(comment)) return;
	
	    if (comment.ignore) return;
	    comment.ignore = true;
	
	    if (comment.start != null) {
	      if (this.printedCommentStarts[comment.start]) return;
	      this.printedCommentStarts[comment.start] = true;
	    }
	
	    this.catchUp(comment);
	
	    // whitespace before
	    this.newline(this.whitespace.getNewlinesBefore(comment));
	
	    var column = this.position.column;
	    var val = this.generateComment(comment);
	
	    if (column && !this.isLast(["\n", " ", "[", "{"])) {
	      this._push(" ");
	      column++;
	    }
	
	    //
	    if (comment.type === "CommentBlock" && this.format.indent.adjustMultilineComment) {
	      var offset = comment.loc && comment.loc.start.column;
	      if (offset) {
	        var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
	        val = val.replace(newlineRegex, "\n");
	      }
	
	      var indent = Math.max(this.indentSize(), column);
	      val = val.replace(/\n/g, "\n" + _repeating2["default"](" ", indent));
	    }
	
	    if (column === 0) {
	      val = this.getIndent() + val;
	    }
	
	    // force a newline for line comments when retainLines is set in case the next printed node
	    // doesn't catch up
	    if ((this.format.compact || this.format.retainLines) && comment.type === "CommentLine") {
	      val += "\n";
	    }
	
	    //
	    this._push(val);
	
	    // whitespace after
	    this.newline(this.whitespace.getNewlinesAfter(comment));
	  };
	
	  Printer.prototype.printComments = function printComments(comments /*:: ?: Array<Object>*/) {
	    if (!comments || !comments.length) return;
	
	    for (var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var comment = _ref;
	
	      this.printComment(comment);
	    }
	  };
	
	  return Printer;
	})(_buffer2["default"]);
	
	exports["default"] = Printer;
	var _arr = [__webpack_require__("./node_modules/babel-generator/lib/generators/template-literals.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/expressions.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/statements.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/classes.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/methods.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/modules.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/types.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/flow.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/base.js"), __webpack_require__("./node_modules/babel-generator/lib/generators/jsx.js")];
	
	for (var _i2 = 0; _i2 < _arr.length; _i2++) {
	  var generator = _arr[_i2];
	  _Object$assign(Printer.prototype, generator);
	}
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/buffer.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _repeating = __webpack_require__("./node_modules/repeating/index.js");
	
	var _repeating2 = _interopRequireDefault(_repeating);
	
	var _trimRight = __webpack_require__("./node_modules/trim-right/index.js");
	
	var _trimRight2 = _interopRequireDefault(_trimRight);
	
	/**
	 * Buffer for collecting generated output.
	 */
	
	/*:: import type Position from "./position";*/
	var Buffer = (function () {
	  function Buffer(position /*: Position*/, format /*: Object*/) {
	    _classCallCheck(this, Buffer);
	
	    this.printedCommentStarts = {};
	    this.parenPushNewlineState = null;
	    this.position = position;
	    this._indent = format.indent.base;
	    this.format = format;
	    this.buf = "";
	  }
	
	  /**
	   * Description
	   */
	
	  Buffer.prototype.catchUp = function catchUp(node) {
	    // catch up to this nodes newline if we're behind
	    if (node.loc && this.format.retainLines && this.buf) {
	      while (this.position.line < node.loc.start.line) {
	        this._push("\n");
	      }
	    }
	  };
	
	  /**
	   * Get the current trimmed buffer.
	   */
	
	  Buffer.prototype.get = function get() {
	    return _trimRight2["default"](this.buf);
	  };
	
	  /**
	   * Get the current indent.
	   */
	
	  Buffer.prototype.getIndent = function getIndent() {
	    if (this.format.compact || this.format.concise) {
	      return "";
	    } else {
	      return _repeating2["default"](this.format.indent.style, this._indent);
	    }
	  };
	
	  /**
	   * Get the current indent size.
	   */
	
	  Buffer.prototype.indentSize = function indentSize() {
	    return this.getIndent().length;
	  };
	
	  /**
	   * Increment indent size.
	   */
	
	  Buffer.prototype.indent = function indent() {
	    this._indent++;
	  };
	
	  /**
	   * Decrement indent size.
	   */
	
	  Buffer.prototype.dedent = function dedent() {
	    this._indent--;
	  };
	
	  /**
	   * Add a semicolon to the buffer.
	   */
	
	  Buffer.prototype.semicolon = function semicolon() {
	    this.push(";");
	  };
	
	  /**
	   * Ensure last character is a semicolon.
	   */
	
	  Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
	    if (!this.isLast(";")) this.semicolon();
	  };
	
	  /**
	   * Add a right brace to the buffer.
	   */
	
	  Buffer.prototype.rightBrace = function rightBrace() {
	    this.newline(true);
	    if (this.format.minified && !this._lastPrintedIsEmptyStatement) {
	      this._removeLast(";");
	    }
	    this.push("}");
	  };
	
	  /**
	   * Add a keyword to the buffer.
	   */
	
	  Buffer.prototype.keyword = function keyword(name /*: string*/) {
	    this.push(name);
	    this.space();
	  };
	
	  /**
	   * Add a space to the buffer unless it is compact (override with force).
	   */
	
	  Buffer.prototype.space = function space(force /*:: ?: boolean*/) {
	    if (!force && this.format.compact) return;
	
	    if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
	      this.push(" ");
	    }
	  };
	
	  /**
	   * Remove the last character.
	   */
	
	  Buffer.prototype.removeLast = function removeLast(cha /*: string*/) {
	    if (this.format.compact) return;
	    return this._removeLast(cha);
	  };
	
	  Buffer.prototype._removeLast = function _removeLast(cha /*: string*/) {
	    if (!this._isLast(cha)) return;
	    this.buf = this.buf.substr(0, this.buf.length - 1);
	    this.position.unshift(cha);
	  };
	
	  /**
	   * Set some state that will be modified if a newline has been inserted before any
	   * non-space characters.
	   *
	   * This is to prevent breaking semantics for terminatorless separator nodes. eg:
	   *
	   *    return foo;
	   *
	   * returns `foo`. But if we do:
	   *
	   *   return
	   *   foo;
	   *
	   *  `undefined` will be returned and not `foo` due to the terminator.
	   */
	
	  Buffer.prototype.startTerminatorless = function startTerminatorless() /*: Object*/ {
	    return this.parenPushNewlineState = {
	      printed: false
	    };
	  };
	
	  /**
	   * Print an ending parentheses if a starting one has been printed.
	   */
	
	  Buffer.prototype.endTerminatorless = function endTerminatorless(state /*: Object*/) {
	    if (state.printed) {
	      this.dedent();
	      this.newline();
	      this.push(")");
	    }
	  };
	
	  /**
	   * Add a newline (or many newlines), maintaining formatting.
	   * Strips multiple newlines if removeLast is true.
	   */
	
	  Buffer.prototype.newline = function newline(i /*:: ?: boolean | number*/, removeLast /*:: ?: boolean*/) {
	    if (this.format.retainLines || this.format.compact) return;
	
	    if (this.format.concise) {
	      this.space();
	      return;
	    }
	
	    removeLast = removeLast || false;
	
	    if (typeof i === "number") {
	      i = Math.min(2, i);
	
	      if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
	      if (i <= 0) return;
	
	      while (i > 0) {
	        this._newline(removeLast);
	        i--;
	      }
	      return;
	    }
	
	    if (typeof i === "boolean") {
	      removeLast = i;
	    }
	
	    this._newline(removeLast);
	  };
	
	  /**
	   * Adds a newline unless there is already two previous newlines.
	   */
	
	  Buffer.prototype._newline = function _newline(removeLast /*:: ?: boolean*/) {
	    // never allow more than two lines
	    if (this.endsWith("\n\n")) return;
	
	    // remove the last newline
	    if (removeLast && this.isLast("\n")) this.removeLast("\n");
	
	    this.removeLast(" ");
	    this._removeSpacesAfterLastNewline();
	    this._push("\n");
	  };
	
	  /**
	   * If buffer ends with a newline and some spaces after it, trim those spaces.
	   */
	
	  Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
	    var lastNewlineIndex = this.buf.lastIndexOf("\n");
	    if (lastNewlineIndex === -1) {
	      return;
	    }
	
	    var index = this.buf.length - 1;
	    while (index > lastNewlineIndex) {
	      if (this.buf[index] !== " ") {
	        break;
	      }
	
	      index--;
	    }
	
	    if (index === lastNewlineIndex) {
	      this.buf = this.buf.substring(0, index + 1);
	    }
	  };
	
	  /**
	   * Push a string to the buffer, maintaining indentation and newlines.
	   */
	
	  Buffer.prototype.push = function push(str /*: string*/, noIndent /*:: ?: boolean*/) {
	    if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
	      // we have an indent level and we aren't pushing a newline
	      var indent = this.getIndent();
	
	      // replace all newlines with newlines with the indentation
	      str = str.replace(/\n/g, "\n" + indent);
	
	      // we've got a newline before us so prepend on the indentation
	      if (this.isLast("\n")) this._push(indent);
	    }
	
	    this._push(str);
	  };
	
	  /**
	   * Push a string to the buffer.
	   */
	
	  Buffer.prototype._push = function _push(str) {
	    // see startTerminatorless() instance method
	    var parenPushNewlineState = this.parenPushNewlineState;
	    if (parenPushNewlineState) {
	      for (var i = 0; i < str.length; i++) {
	        var cha = str[i];
	
	        // we can ignore spaces since they wont interupt a terminatorless separator
	        if (cha === " ") continue;
	
	        this.parenPushNewlineState = null;
	
	        if (cha === "\n" || cha === "/") {
	          // we're going to break this terminator expression so we need to add a parentheses
	          this._push("(");
	          this.indent();
	          parenPushNewlineState.printed = true;
	        }
	
	        break;
	      }
	    }
	
	    //
	    this.position.push(str);
	    this.buf += str;
	  };
	
	  /**
	   * Test if the buffer ends with a string.
	   */
	
	  Buffer.prototype.endsWith = function endsWith(str /*: string*/) /*: boolean*/ {
	    var buf /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? this.buf : arguments[1];
	
	    if (str.length === 1) {
	      return buf[buf.length - 1] === str;
	    } else {
	      return buf.slice(-str.length) === str;
	    }
	  };
	
	  /**
	   * Test if a character is last in the buffer.
	   */
	
	  Buffer.prototype.isLast = function isLast(cha /*: string*/) {
	    if (this.format.compact) return false;
	    return this._isLast(cha);
	  };
	
	  Buffer.prototype._isLast = function _isLast(cha /*: string*/) {
	    var buf = this.buf;
	    var last = buf[buf.length - 1];
	
	    if (Array.isArray(cha)) {
	      return cha.indexOf(last) >= 0;
	    } else {
	      return cha === last;
	    }
	  };
	
	  return Buffer;
	})();
	
	exports["default"] = Buffer;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/node/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _whitespace = __webpack_require__("./node_modules/babel-generator/lib/node/whitespace.js");
	
	var _whitespace2 = _interopRequireDefault(_whitespace);
	
	var _parentheses = __webpack_require__("./node_modules/babel-generator/lib/node/parentheses.js");
	
	var parens = _interopRequireWildcard(_parentheses);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function find(obj, node, parent, printStack) {
	  if (!obj) return;
	  var result = undefined;
	
	  var types = _Object$keys(obj);
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];
	
	    if (t.is(type, node)) {
	      var fn = obj[type];
	      result = fn(node, parent, printStack);
	      if (result != null) break;
	    }
	  }
	
	  return result;
	}
	
	function isOrHasCallExpression(node) {
	  if (t.isCallExpression(node)) {
	    return true;
	  }
	
	  if (t.isMemberExpression(node)) {
	    return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);
	  } else {
	    return false;
	  }
	}
	
	var Node = (function () {
	  function Node(node /*: Object*/, parent /*: Object*/) {
	    _classCallCheck(this, Node);
	
	    this.parent = parent;
	    this.node = node;
	  }
	
	  Node.isUserWhitespacable = function isUserWhitespacable(node) {
	    return t.isUserWhitespacable(node);
	  };
	
	  Node.needsWhitespace = function needsWhitespace(node, parent, type) {
	    if (!node) return 0;
	
	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }
	
	    var linesInfo = find(_whitespace2["default"].nodes, node, parent);
	
	    if (!linesInfo) {
	      var items = find(_whitespace2["default"].list, node, parent);
	      if (items) {
	        for (var i = 0; i < items.length; i++) {
	          linesInfo = Node.needsWhitespace(items[i], node, type);
	          if (linesInfo) break;
	        }
	      }
	    }
	
	    return linesInfo && linesInfo[type] || 0;
	  };
	
	  Node.needsWhitespaceBefore = function needsWhitespaceBefore(node, parent) {
	    return Node.needsWhitespace(node, parent, "before");
	  };
	
	  Node.needsWhitespaceAfter = function needsWhitespaceAfter(node, parent) {
	    return Node.needsWhitespace(node, parent, "after");
	  };
	
	  Node.needsParens = function needsParens(node, parent, printStack) {
	    if (!parent) return false;
	
	    if (t.isNewExpression(parent) && parent.callee === node) {
	      if (isOrHasCallExpression(node)) return true;
	    }
	
	    return find(parens, node, parent, printStack);
	  };
	
	  return Node;
	})();
	
	exports["default"] = Node;
	
	_lodashCollectionEach2["default"](Node, function (fn, key) {
	  Node.prototype[key] = function () {
	    // Avoid leaking arguments to prevent deoptimization
	    var args = new Array(arguments.length + 2);
	
	    args[0] = this.node;
	    args[1] = this.parent;
	
	    for (var i = 0; i < args.length; i++) {
	      args[i + 2] = arguments[i];
	    }
	
	    return Node[key].apply(null, args);
	  };
	});
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-generator/lib/node/whitespace.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _lodashLangIsBoolean = __webpack_require__("./node_modules/lodash/lang/isBoolean.js");
	
	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashCollectionMap = __webpack_require__("./node_modules/lodash/collection/map.js");
	
	var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/**
	 * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.
	 *
	 * @example
	 * crawl(node)
	 * // { hasCall: false, hasFunction: true, hasHelper: false }
	 */
	
	function crawl(node) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  if (t.isMemberExpression(node)) {
	    crawl(node.object, state);
	    if (node.computed) crawl(node.property, state);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    crawl(node.left, state);
	    crawl(node.right, state);
	  } else if (t.isCallExpression(node)) {
	    state.hasCall = true;
	    crawl(node.callee, state);
	  } else if (t.isFunction(node)) {
	    state.hasFunction = true;
	  } else if (t.isIdentifier(node)) {
	    state.hasHelper = state.hasHelper || isHelper(node.callee);
	  }
	
	  return state;
	}
	
	/**
	 * Test if a node is or has a helper.
	 */
	
	function isHelper(node) {
	  if (t.isMemberExpression(node)) {
	    return isHelper(node.object) || isHelper(node.property);
	  } else if (t.isIdentifier(node)) {
	    return node.name === "require" || node.name[0] === "_";
	  } else if (t.isCallExpression(node)) {
	    return isHelper(node.callee);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
	  } else {
	    return false;
	  }
	}
	
	function isType(node) {
	  return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
	}
	
	/**
	 * Tests for node types that need whitespace.
	 */
	
	exports.nodes = {
	
	  /**
	   * Test if AssignmentExpression needs whitespace.
	   */
	
	  AssignmentExpression: function AssignmentExpression(node) {
	    var state = crawl(node.right);
	    if (state.hasCall && state.hasHelper || state.hasFunction) {
	      return {
	        before: state.hasFunction,
	        after: true
	      };
	    }
	  },
	
	  /**
	   * Test if SwitchCase needs whitespace.
	   */
	
	  SwitchCase: function SwitchCase(node, parent) {
	    return {
	      before: node.consequent.length || parent.cases[0] === node
	    };
	  },
	
	  /**
	   * Test if LogicalExpression needs whitespace.
	   */
	
	  LogicalExpression: function LogicalExpression(node) {
	    if (t.isFunction(node.left) || t.isFunction(node.right)) {
	      return {
	        after: true
	      };
	    }
	  },
	
	  /**
	   * Test if Literal needs whitespace.
	   */
	
	  Literal: function Literal(node) {
	    if (node.value === "use strict") {
	      return {
	        after: true
	      };
	    }
	  },
	
	  /**
	   * Test if CallExpression needs whitespace.
	   */
	
	  CallExpression: function CallExpression(node) {
	    if (t.isFunction(node.callee) || isHelper(node)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  },
	
	  /**
	   * Test if VariableDeclaration needs whitespace.
	   */
	
	  VariableDeclaration: function VariableDeclaration(node) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	
	      var enabled = isHelper(declar.id) && !isType(declar.init);
	      if (!enabled) {
	        var state = crawl(declar.init);
	        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
	      }
	
	      if (enabled) {
	        return {
	          before: true,
	          after: true
	        };
	      }
	    }
	  },
	
	  /**
	   * Test if IfStatement needs whitespace.
	   */
	
	  IfStatement: function IfStatement(node) {
	    if (t.isBlockStatement(node.consequent)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  }
	};
	
	/**
	 * Test if Property or SpreadProperty needs whitespace.
	 */
	
	exports.nodes.ObjectProperty = exports.nodes.ObjectMethod = exports.nodes.SpreadProperty = function (node, parent) {
	  if (parent.properties[0] === node) {
	    return {
	      before: true
	    };
	  }
	};
	
	/**
	 * Returns lists from node types that need whitespace.
	 */
	
	exports.list = {
	
	  /**
	   * Return VariableDeclaration declarations init properties.
	   */
	
	  VariableDeclaration: function VariableDeclaration(node) {
	    return _lodashCollectionMap2["default"](node.declarations, "init");
	  },
	
	  /**
	   * Return VariableDeclaration elements.
	   */
	
	  ArrayExpression: function ArrayExpression(node) {
	    return node.elements;
	  },
	
	  /**
	   * Return VariableDeclaration properties.
	   */
	
	  ObjectExpression: function ObjectExpression(node) {
	    return node.properties;
	  }
	};
	
	/**
	 * Add whitespace tests for nodes and their aliases.
	 */
	
	_lodashCollectionEach2["default"]({
	  Function: true,
	  Class: true,
	  Loop: true,
	  LabeledStatement: true,
	  SwitchStatement: true,
	  TryStatement: true
	}, function (amounts, type) {
	  if (_lodashLangIsBoolean2["default"](amounts)) {
	    amounts = { after: amounts, before: amounts };
	  }
	
	  _lodashCollectionEach2["default"]([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function (type) {
	    exports.nodes[type] = function () {
	      return amounts;
	    };
	  });
	});

/***/ },

/***/ "./node_modules/babel-generator/lib/node/parentheses.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.UpdateExpression = UpdateExpression;
	exports.ObjectExpression = ObjectExpression;
	exports.Binary = Binary;
	exports.BinaryExpression = BinaryExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.YieldExpression = YieldExpression;
	exports.ClassExpression = ClassExpression;
	exports.UnaryLike = UnaryLike;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.AssignmentExpression = AssignmentExpression;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var PRECEDENCE = {
	  "||": 0,
	  "&&": 1,
	  "|": 2,
	  "^": 3,
	  "&": 4,
	  "==": 5,
	  "===": 5,
	  "!=": 5,
	  "!==": 5,
	  "<": 6,
	  ">": 6,
	  "<=": 6,
	  ">=": 6,
	  "in": 6,
	  "instanceof": 6,
	  ">>": 7,
	  "<<": 7,
	  ">>>": 7,
	  "+": 8,
	  "-": 8,
	  "*": 9,
	  "/": 9,
	  "%": 9,
	  "**": 10
	};
	
	function NullableTypeAnnotation(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isArrayTypeAnnotation(parent);
	}
	
	exports.FunctionTypeAnnotation = NullableTypeAnnotation;
	
	function UpdateExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isMemberExpression(parent) && parent.object === node) {
	    // (foo++).test()
	    return true;
	  }
	
	  return false;
	}
	
	function ObjectExpression(node /*: Object*/, parent /*: Object*/, printStack /*: Array<Object>*/) /*: boolean*/ {
	  if (t.isExpressionStatement(parent)) {
	    // ({ foo: "bar" });
	    return true;
	  }
	
	  return isFirstInStatement(printStack);
	}
	
	function Binary(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
	    return true;
	  }
	
	  if (t.isUnaryLike(parent)) {
	    return true;
	  }
	
	  if (t.isMemberExpression(parent) && parent.object === node) {
	    return true;
	  }
	
	  if (t.isBinary(parent)) {
	    var parentOp = parent.operator;
	    var parentPos = PRECEDENCE[parentOp];
	
	    var nodeOp = node.operator;
	    var nodePos = PRECEDENCE[nodeOp];
	
	    if (parentPos > nodePos) {
	      return true;
	    }
	
	    // Logical expressions with the same precedence don't need parens.
	    if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	function BinaryExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (node.operator === "in") {
	    // let i = (1 in []);
	    if (t.isVariableDeclarator(parent)) {
	      return true;
	    }
	
	    // for ((1 in []);;);
	    if (t.isFor(parent)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	function SequenceExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isForStatement(parent)) {
	    // Although parentheses wouldn"t hurt around sequence
	    // expressions in the head of for loops, traditional style
	    // dictates that e.g. i++, j++ should not be wrapped with
	    // parentheses.
	    return false;
	  }
	
	  if (t.isExpressionStatement(parent) && parent.expression === node) {
	    return false;
	  }
	
	  if (t.isReturnStatement(parent)) {
	    return false;
	  }
	
	  if (t.isThrowStatement(parent)) {
	    return false;
	  }
	
	  if (t.isSwitchStatement(parent) && parent.discriminant === node) {
	    return false;
	  }
	
	  if (t.isWhileStatement(parent) && parent.test === node) {
	    return false;
	  }
	
	  if (t.isIfStatement(parent) && parent.test === node) {
	    return false;
	  }
	
	  if (t.isForInStatement(parent) && parent.right === node) {
	    return false;
	  }
	
	  // Otherwise err on the side of overparenthesization, adding
	  // explicit exceptions above if this proves overzealous.
	  return true;
	}
	
	function YieldExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent);
	}
	
	exports.AwaitExpression = YieldExpression;
	
	function ClassExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // (class {});
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }
	
	  // export default (class () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }
	
	  return false;
	}
	
	function UnaryLike(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isMemberExpression(parent, { object: node })) {
	    return true;
	  }
	
	  if (t.isCallExpression(parent, { callee: node }) || t.isNewExpression(parent, { callee: node })) {
	    return true;
	  }
	
	  return false;
	}
	
	function FunctionExpression(node /*: Object*/, parent /*: Object*/, printStack /*: Array<Object>*/) /*: boolean*/ {
	  // (function () {});
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }
	
	  // export default (function () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }
	
	  return isFirstInStatement(printStack);
	}
	
	function ArrowFunctionExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // export default (function () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }
	
	  if (t.isBinaryExpression(parent) || t.isLogicalExpression(parent)) {
	    return true;
	  }
	
	  return UnaryLike(node, parent);
	}
	
	function ConditionalExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isUnaryLike(parent)) {
	    return true;
	  }
	
	  if (t.isBinary(parent)) {
	    return true;
	  }
	
	  if (t.isConditionalExpression(parent, { test: node })) {
	    return true;
	  }
	
	  return UnaryLike(node, parent);
	}
	
	function AssignmentExpression(node /*: Object*/) /*: boolean*/ {
	  if (t.isObjectPattern(node.left)) {
	    return true;
	  } else {
	    return ConditionalExpression.apply(undefined, arguments);
	  }
	}
	
	// Walk up the print stack to deterimine if our node can come first
	// in statement.
	function isFirstInStatement(printStack /*: Array<Object>*/) /*: boolean*/ {
	  var i = printStack.length - 1;
	  var node = printStack[i];
	  i--;
	  var parent = printStack[i];
	  while (i > 0) {
	    if (t.isExpressionStatement(parent, { expression: node })) {
	      return true;
	    }
	
	    if (t.isCallExpression(parent, { callee: node }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, { object: node }) || t.isConditional(parent, { test: node }) || t.isBinary(parent, { left: node }) || t.isAssignmentExpression(parent, { left: node })) {
	      node = parent;
	      i--;
	      parent = printStack[i];
	    } else {
	      return false;
	    }
	  }
	
	  return false;
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/template-literals.js":
/***/ function(module, exports) {

	/* @flow */
	
	"use strict";
	
	exports.__esModule = true;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	exports.TemplateElement = TemplateElement;
	exports.TemplateLiteral = TemplateLiteral;
	
	function TaggedTemplateExpression(node /*: Object*/) {
	  this.print(node.tag, node);
	  this.print(node.quasi, node);
	}
	
	function TemplateElement(node /*: Object*/) {
	  this._push(node.value.raw);
	}
	
	function TemplateLiteral(node /*: Object*/) {
	  this.push("`");
	
	  var quasis = node.quasis;
	
	  for (var i = 0; i < quasis.length; i++) {
	    this.print(quasis[i], node);
	
	    if (i + 1 < quasis.length) {
	      this._push("${ ");
	      this.print(node.expressions[i], node);
	      this.push(" }");
	    }
	  }
	
	  this._push("`");
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/expressions.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.UnaryExpression = UnaryExpression;
	exports.DoExpression = DoExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.NewExpression = NewExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.ThisExpression = ThisExpression;
	exports.Super = Super;
	exports.Decorator = Decorator;
	exports.CallExpression = CallExpression;
	exports.EmptyStatement = EmptyStatement;
	exports.ExpressionStatement = ExpressionStatement;
	exports.AssignmentPattern = AssignmentPattern;
	exports.AssignmentExpression = AssignmentExpression;
	exports.BindExpression = BindExpression;
	exports.MemberExpression = MemberExpression;
	exports.MetaProperty = MetaProperty;
	
	var _isInteger = __webpack_require__("./node_modules/is-integer/index.js");
	
	var _isInteger2 = _interopRequireDefault(_isInteger);
	
	var _lodashLangIsNumber = __webpack_require__("./node_modules/lodash/lang/isNumber.js");
	
	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _node = __webpack_require__("./node_modules/babel-generator/lib/node/index.js");
	
	var _node2 = _interopRequireDefault(_node);
	
	var SCIENTIFIC_NOTATION = /e/i;
	var ZERO_DECIMAL_INTEGER = /\.0+$/;
	
	function UnaryExpression(node /*: Object*/) {
	  var needsSpace = /[a-z]$/.test(node.operator);
	  var arg = node.argument;
	
	  if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
	    needsSpace = true;
	  }
	
	  if (t.isUnaryExpression(arg) && arg.operator === "!") {
	    needsSpace = false;
	  }
	
	  this.push(node.operator);
	  if (needsSpace) this.push(" ");
	  this.print(node.argument, node);
	}
	
	function DoExpression(node /*: Object*/) {
	  this.push("do");
	  this.space();
	  this.print(node.body, node);
	}
	
	function ParenthesizedExpression(node /*: Object*/) {
	  this.push("(");
	  this.print(node.expression, node);
	  this.push(")");
	}
	
	function UpdateExpression(node /*: Object*/) {
	  if (node.prefix) {
	    this.push(node.operator);
	    this.print(node.argument, node);
	  } else {
	    this.print(node.argument, node);
	    this.push(node.operator);
	  }
	}
	
	function ConditionalExpression(node /*: Object*/) {
	  this.print(node.test, node);
	  this.space();
	  this.push("?");
	  this.space();
	  this.print(node.consequent, node);
	  this.space();
	  this.push(":");
	  this.space();
	  this.print(node.alternate, node);
	}
	
	function NewExpression(node /*: Object*/, parent /*: Object*/) {
	  this.push("new ");
	  this.print(node.callee, node);
	  if (node.arguments.length === 0 && this.format.minified && !t.isCallExpression(parent, { callee: node }) && !t.isMemberExpression(parent) && !t.isNewExpression(parent)) return;
	
	  this.push("(");
	  this.printList(node.arguments, node);
	  this.push(")");
	}
	
	function SequenceExpression(node /*: Object*/) {
	  this.printList(node.expressions, node);
	}
	
	function ThisExpression() {
	  this.push("this");
	}
	
	function Super() {
	  this.push("super");
	}
	
	function Decorator(node /*: Object*/) {
	  this.push("@");
	  this.print(node.expression, node);
	  this.newline();
	}
	
	function CallExpression(node /*: Object*/) {
	  this.print(node.callee, node);
	  if (node.loc) this.printAuxAfterComment();
	
	  this.push("(");
	
	  var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;
	
	  var separator = undefined;
	  if (isPrettyCall) {
	    separator = ",\n";
	    this.newline();
	    this.indent();
	  }
	
	  this.printList(node.arguments, node, { separator: separator });
	
	  if (isPrettyCall) {
	    this.newline();
	    this.dedent();
	  }
	
	  this.push(")");
	}
	
	function buildYieldAwait(keyword /*: string*/) {
	  return function (node /*: Object*/) {
	    this.push(keyword);
	
	    if (node.delegate) {
	      this.push("*");
	    }
	
	    if (node.argument) {
	      this.push(" ");
	      var terminatorState = this.startTerminatorless();
	      this.print(node.argument, node);
	      this.endTerminatorless(terminatorState);
	    }
	  };
	}
	
	var YieldExpression = buildYieldAwait("yield");
	exports.YieldExpression = YieldExpression;
	var AwaitExpression = buildYieldAwait("await");
	
	exports.AwaitExpression = AwaitExpression;
	
	function EmptyStatement() {
	  this._lastPrintedIsEmptyStatement = true;
	  this.semicolon();
	}
	
	function ExpressionStatement(node /*: Object*/) {
	  this.print(node.expression, node);
	  this.semicolon();
	}
	
	function AssignmentPattern(node /*: Object*/) {
	  this.print(node.left, node);
	  this.space();
	  this.push("=");
	  this.space();
	  this.print(node.right, node);
	}
	
	function AssignmentExpression(node /*: Object*/, parent /*: Object*/) {
	  // Somewhere inside a for statement `init` node but doesn't usually
	  // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`
	  var parens = this._inForStatementInit && node.operator === "in" && !_node2["default"].needsParens(node, parent);
	
	  if (parens) {
	    this.push("(");
	  }
	
	  this.print(node.left, node);
	
	  var spaces = !this.format.compact || node.operator === "in" || node.operator === "instanceof";
	  if (spaces) this.push(" ");
	
	  this.push(node.operator);
	
	  if (!spaces) {
	    // space is mandatory to avoid outputting <!--
	    // http://javascript.spec.whatwg.org/#comment-syntax
	    spaces = node.operator === "<" && t.isUnaryExpression(node.right, { prefix: true, operator: "!" }) && t.isUnaryExpression(node.right.argument, { prefix: true, operator: "--" });
	
	    // Need spaces for operators of the same kind to avoid: `a+++b`
	    if (!spaces) {
	      var right = getLeftMost(node.right);
	      spaces = t.isUnaryExpression(right, { prefix: true, operator: node.operator }) || t.isUpdateExpression(right, { prefix: true, operator: node.operator + node.operator });
	    }
	  }
	
	  if (spaces) this.push(" ");
	
	  this.print(node.right, node);
	
	  if (parens) {
	    this.push(")");
	  }
	}
	
	function BindExpression(node /*: Object*/) {
	  this.print(node.object, node);
	  this.push("::");
	  this.print(node.callee, node);
	}
	
	exports.BinaryExpression = AssignmentExpression;
	exports.LogicalExpression = AssignmentExpression;
	
	function MemberExpression(node /*: Object*/) {
	  this.print(node.object, node);
	
	  if (!node.computed && t.isMemberExpression(node.property)) {
	    throw new TypeError("Got a MemberExpression for MemberExpression property");
	  }
	
	  var computed = node.computed;
	  if (t.isLiteral(node.property) && _lodashLangIsNumber2["default"](node.property.value)) {
	    computed = true;
	  }
	
	  if (computed) {
	    this.push("[");
	    this.print(node.property, node);
	    this.push("]");
	  } else {
	    if (t.isNumericLiteral(node.object)) {
	      var val = this.getPossibleRaw(node.object) || node.object.value;
	      if (_isInteger2["default"](+val) && !SCIENTIFIC_NOTATION.test(val) && !ZERO_DECIMAL_INTEGER.test(val) && !this.endsWith(".")) {
	        this.push(".");
	      }
	    }
	
	    this.push(".");
	    this.print(node.property, node);
	  }
	}
	
	function MetaProperty(node /*: Object*/) {
	  this.print(node.meta, node);
	  this.push(".");
	  this.print(node.property, node);
	}
	
	function getLeftMost(binaryExpr) {
	  if (!t.isBinaryExpression(binaryExpr)) {
	    return binaryExpr;
	  }
	  return getLeftMost(binaryExpr.left);
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/statements.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.WithStatement = WithStatement;
	exports.IfStatement = IfStatement;
	exports.ForStatement = ForStatement;
	exports.WhileStatement = WhileStatement;
	exports.DoWhileStatement = DoWhileStatement;
	exports.LabeledStatement = LabeledStatement;
	exports.TryStatement = TryStatement;
	exports.CatchClause = CatchClause;
	exports.SwitchStatement = SwitchStatement;
	exports.SwitchCase = SwitchCase;
	exports.DebuggerStatement = DebuggerStatement;
	exports.VariableDeclaration = VariableDeclaration;
	exports.VariableDeclarator = VariableDeclarator;
	
	var _repeating = __webpack_require__("./node_modules/repeating/index.js");
	
	var _repeating2 = _interopRequireDefault(_repeating);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var NON_ALPHABETIC_UNARY_OPERATORS = t.UPDATE_OPERATORS.concat(t.NUMBER_UNARY_OPERATORS).concat(["!"]);
	
	function WithStatement(node /*: Object*/) {
	  this.keyword("with");
	  this.push("(");
	  this.print(node.object, node);
	  this.push(")");
	  this.printBlock(node);
	}
	
	function IfStatement(node /*: Object*/) {
	  this.keyword("if");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(")");
	  this.space();
	
	  var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));
	  if (needsBlock) {
	    this.push("{");
	    this.newline();
	    this.indent();
	  }
	
	  this.printAndIndentOnComments(node.consequent, node);
	
	  if (needsBlock) {
	    this.dedent();
	    this.newline();
	    this.push("}");
	  }
	
	  if (node.alternate) {
	    if (this.isLast("}")) this.space();
	    this.push("else ");
	    this.printAndIndentOnComments(node.alternate, node);
	  }
	}
	
	// Recursively get the last statement.
	function getLastStatement(statement) {
	  if (!t.isStatement(statement.body)) return statement;
	  return getLastStatement(statement.body);
	}
	
	function ForStatement(node /*: Object*/) {
	  this.keyword("for");
	  this.push("(");
	
	  this._inForStatementInit = true;
	  this.print(node.init, node);
	  this._inForStatementInit = false;
	  this.push(";");
	
	  if (node.test) {
	    this.space();
	    this.print(node.test, node);
	  }
	  this.push(";");
	
	  if (node.update) {
	    this.space();
	    this.print(node.update, node);
	  }
	
	  this.push(")");
	  this.printBlock(node);
	}
	
	function WhileStatement(node /*: Object*/) {
	  this.keyword("while");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(")");
	  this.printBlock(node);
	}
	
	var buildForXStatement = function buildForXStatement(op) {
	  return function (node /*: Object*/) {
	    this.keyword("for");
	    this.push("(");
	    this.print(node.left, node);
	    this.push(" " + op + " ");
	    this.print(node.right, node);
	    this.push(")");
	    this.printBlock(node);
	  };
	};
	
	var ForInStatement = buildForXStatement("in");
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = buildForXStatement("of");
	
	exports.ForOfStatement = ForOfStatement;
	
	function DoWhileStatement(node /*: Object*/) {
	  this.push("do ");
	  this.print(node.body, node);
	  this.space();
	  this.keyword("while");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(");");
	}
	
	function buildLabelStatement(prefix) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];
	
	  return function (node /*: Object*/) {
	    this.push(prefix);
	
	    var label = node[key];
	    if (label) {
	      if (!(this.format.minified && (t.isUnaryExpression(label, { prefix: true }) || t.isUpdateExpression(label, { prefix: true })) && NON_ALPHABETIC_UNARY_OPERATORS.indexOf(label.operator) > -1)) {
	        this.push(" ");
	      }
	
	      var terminatorState = this.startTerminatorless();
	      this.print(label, node);
	      this.endTerminatorless(terminatorState);
	    }
	
	    this.semicolon();
	  };
	}
	
	var ContinueStatement = buildLabelStatement("continue");
	exports.ContinueStatement = ContinueStatement;
	var ReturnStatement = buildLabelStatement("return", "argument");
	exports.ReturnStatement = ReturnStatement;
	var BreakStatement = buildLabelStatement("break");
	exports.BreakStatement = BreakStatement;
	var ThrowStatement = buildLabelStatement("throw", "argument");
	
	exports.ThrowStatement = ThrowStatement;
	
	function LabeledStatement(node /*: Object*/) {
	  this.print(node.label, node);
	  this.push(": ");
	  this.print(node.body, node);
	}
	
	function TryStatement(node /*: Object*/) {
	  this.keyword("try");
	  this.print(node.block, node);
	  this.space();
	
	  // Esprima bug puts the catch clause in a `handlers` array.
	  // see https://code.google.com/p/esprima/issues/detail?id=433
	  // We run into this from regenerator generated ast.
	  if (node.handlers) {
	    this.print(node.handlers[0], node);
	  } else {
	    this.print(node.handler, node);
	  }
	
	  if (node.finalizer) {
	    this.space();
	    this.push("finally ");
	    this.print(node.finalizer, node);
	  }
	}
	
	function CatchClause(node /*: Object*/) {
	  this.keyword("catch");
	  this.push("(");
	  this.print(node.param, node);
	  this.push(")");
	  this.space();
	  this.print(node.body, node);
	}
	
	function SwitchStatement(node /*: Object*/) {
	  this.keyword("switch");
	  this.push("(");
	  this.print(node.discriminant, node);
	  this.push(")");
	  this.space();
	  this.push("{");
	
	  this.printSequence(node.cases, node, {
	    indent: true,
	    addNewlines: function addNewlines(leading, cas) {
	      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
	    }
	  });
	
	  this.push("}");
	}
	
	function SwitchCase(node /*: Object*/) {
	  if (node.test) {
	    this.push("case ");
	    this.print(node.test, node);
	    this.push(":");
	  } else {
	    this.push("default:");
	  }
	
	  if (node.consequent.length) {
	    this.newline();
	    this.printSequence(node.consequent, node, { indent: true });
	  }
	}
	
	function DebuggerStatement() {
	  this.push("debugger;");
	}
	
	function VariableDeclaration(node /*: Object*/, parent /*: Object*/) {
	  this.push(node.kind + " ");
	
	  var hasInits = false;
	  // don't add whitespace to loop heads
	  if (!t.isFor(parent)) {
	    for (var _iterator = (node.declarations /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var declar = _ref;
	
	      if (declar.init) {
	        // has an init so let's split it up over multiple lines
	        hasInits = true;
	      }
	    }
	  }
	
	  //
	  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on
	  // this will format declarations like:
	  //
	  //   let foo = "bar", bar = "foo";
	  //
	  // into
	  //
	  //   let foo = "bar",
	  //       bar = "foo";
	  //
	
	  var sep = undefined;
	  if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
	    sep = ",\n" + _repeating2["default"](" ", node.kind.length + 1);
	  }
	
	  //
	
	  this.printList(node.declarations, node, { separator: sep });
	
	  if (t.isFor(parent)) {
	    // don't give semicolons to these nodes since they'll be inserted in the parent generator
	    if (parent.left === node || parent.init === node) return;
	  }
	
	  this.semicolon();
	}
	
	function VariableDeclarator(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  if (node.init) {
	    this.space();
	    this.push("=");
	    this.space();
	    this.print(node.init, node);
	  }
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/classes.js":
/***/ function(module, exports) {

	/* @flow */
	
	"use strict";
	
	exports.__esModule = true;
	exports.ClassDeclaration = ClassDeclaration;
	exports.ClassBody = ClassBody;
	exports.ClassProperty = ClassProperty;
	exports.ClassMethod = ClassMethod;
	
	function ClassDeclaration(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	  this.push("class");
	
	  if (node.id) {
	    this.push(" ");
	    this.print(node.id, node);
	  }
	
	  this.print(node.typeParameters, node);
	
	  if (node.superClass) {
	    this.push(" extends ");
	    this.print(node.superClass, node);
	    this.print(node.superTypeParameters, node);
	  }
	
	  if (node["implements"]) {
	    this.push(" implements ");
	    this.printJoin(node["implements"], node, { separator: ", " });
	  }
	
	  this.space();
	  this.print(node.body, node);
	}
	
	exports.ClassExpression = ClassDeclaration;
	
	function ClassBody(node /*: Object*/) {
	  this.push("{");
	  this.printInnerComments(node);
	  if (node.body.length === 0) {
	    this.push("}");
	  } else {
	    this.newline();
	
	    this.indent();
	    this.printSequence(node.body, node);
	    this.dedent();
	
	    this.rightBrace();
	  }
	}
	
	function ClassProperty(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	
	  if (node["static"]) this.push("static ");
	  this.print(node.key, node);
	  this.print(node.typeAnnotation, node);
	  if (node.value) {
	    this.space();
	    this.push("=");
	    this.space();
	    this.print(node.value, node);
	  }
	  this.semicolon();
	}
	
	function ClassMethod(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	
	  if (node["static"]) {
	    this.push("static ");
	  }
	
	  if (node.kind === "constructorCall") {
	    this.push("call ");
	  }
	
	  this._method(node);
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/methods.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports._params = _params;
	exports._method = _method;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function _params(node /*: Object*/) {
	  // istanbul ignore next
	
	  var _this = this;
	
	  this.print(node.typeParameters, node);
	  this.push("(");
	  this.printList(node.params, node, {
	    iterator: function iterator(node) {
	      if (node.optional) _this.push("?");
	      _this.print(node.typeAnnotation, node);
	    }
	  });
	  this.push(")");
	
	  if (node.returnType) {
	    this.print(node.returnType, node);
	  }
	}
	
	function _method(node /*: Object*/) {
	  var kind = node.kind;
	  var key = node.key;
	
	  if (kind === "method" || kind === "init") {
	    if (node.generator) {
	      this.push("*");
	    }
	  }
	
	  if (kind === "get" || kind === "set") {
	    this.push(kind + " ");
	  }
	
	  if (node.async) this.push("async ");
	
	  if (node.computed) {
	    this.push("[");
	    this.print(key, node);
	    this.push("]");
	  } else {
	    this.print(key, node);
	  }
	
	  this._params(node);
	  this.space();
	  this.print(node.body, node);
	}
	
	function FunctionExpression(node /*: Object*/) {
	  if (node.async) this.push("async ");
	  this.push("function");
	  if (node.generator) this.push("*");
	
	  if (node.id) {
	    this.push(" ");
	    this.print(node.id, node);
	  } else {
	    this.space();
	  }
	
	  this._params(node);
	  this.space();
	  this.print(node.body, node);
	}
	
	exports.FunctionDeclaration = FunctionExpression;
	
	function ArrowFunctionExpression(node /*: Object*/) {
	  if (node.async) this.push("async ");
	
	  if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
	    this.print(node.params[0], node);
	  } else {
	    this._params(node);
	  }
	
	  this.push(" => ");
	
	  var bodyNeedsParens = t.isObjectExpression(node.body);
	
	  if (bodyNeedsParens) {
	    this.push("(");
	  }
	
	  this.print(node.body, node);
	
	  if (bodyNeedsParens) {
	    this.push(")");
	  }
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/modules.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.ImportSpecifier = ImportSpecifier;
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
	exports.ExportSpecifier = ExportSpecifier;
	exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
	exports.ExportAllDeclaration = ExportAllDeclaration;
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	exports.ImportDeclaration = ImportDeclaration;
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function ImportSpecifier(node /*: Object*/) {
	  this.print(node.imported, node);
	  if (node.local && node.local.name !== node.imported.name) {
	    this.push(" as ");
	    this.print(node.local, node);
	  }
	}
	
	function ImportDefaultSpecifier(node /*: Object*/) {
	  this.print(node.local, node);
	}
	
	function ExportDefaultSpecifier(node /*: Object*/) {
	  this.print(node.exported, node);
	}
	
	function ExportSpecifier(node /*: Object*/) {
	  this.print(node.local, node);
	  if (node.exported && node.local.name !== node.exported.name) {
	    this.push(" as ");
	    this.print(node.exported, node);
	  }
	}
	
	function ExportNamespaceSpecifier(node /*: Object*/) {
	  this.push("* as ");
	  this.print(node.exported, node);
	}
	
	function ExportAllDeclaration(node /*: Object*/) {
	  this.push("export *");
	  if (node.exported) {
	    this.push(" as ");
	    this.print(node.exported, node);
	  }
	  this.push(" from ");
	  this.print(node.source, node);
	  this.semicolon();
	}
	
	function ExportNamedDeclaration() {
	  this.push("export ");
	  ExportDeclaration.apply(this, arguments);
	}
	
	function ExportDefaultDeclaration() {
	  this.push("export default ");
	  ExportDeclaration.apply(this, arguments);
	}
	
	function ExportDeclaration(node /*: Object*/) {
	  if (node.declaration) {
	    var declar = node.declaration;
	    this.print(declar, node);
	    if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar)) return;
	  } else {
	    if (node.exportKind === "type") {
	      this.push("type ");
	    }
	
	    var specifiers = node.specifiers.slice(0);
	
	    // print "special" specifiers first
	    var hasSpecial = false;
	    while (true) {
	      var first = specifiers[0];
	      if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
	        hasSpecial = true;
	        this.print(specifiers.shift(), node);
	        if (specifiers.length) {
	          this.push(", ");
	        }
	      } else {
	        break;
	      }
	    }
	
	    if (specifiers.length || !specifiers.length && !hasSpecial) {
	      this.push("{");
	      if (specifiers.length) {
	        this.space();
	        this.printJoin(specifiers, node, { separator: ", " });
	        this.space();
	      }
	      this.push("}");
	    }
	
	    if (node.source) {
	      this.push(" from ");
	      this.print(node.source, node);
	    }
	  }
	
	  this.ensureSemicolon();
	}
	
	function ImportDeclaration(node /*: Object*/) {
	  this.push("import ");
	
	  if (node.importKind === "type" || node.importKind === "typeof") {
	    this.push(node.importKind + " ");
	  }
	
	  var specifiers = node.specifiers.slice(0);
	  if (specifiers && specifiers.length) {
	    // print "special" specifiers first
	    while (true) {
	      var first = specifiers[0];
	      if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
	        this.print(specifiers.shift(), node);
	        if (specifiers.length) {
	          this.push(", ");
	        }
	      } else {
	        break;
	      }
	    }
	
	    if (specifiers.length) {
	      this.push("{");
	      this.space();
	      this.printJoin(specifiers, node, { separator: ", " });
	      this.space();
	      this.push("}");
	    }
	
	    this.push(" from ");
	  }
	
	  this.print(node.source, node);
	  this.semicolon();
	}
	
	function ImportNamespaceSpecifier(node /*: Object*/) {
	  this.push("* as ");
	  this.print(node.local, node);
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/types.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	/* eslint quotes: 0 */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.Identifier = Identifier;
	exports.RestElement = RestElement;
	exports.ObjectExpression = ObjectExpression;
	exports.ObjectMethod = ObjectMethod;
	exports.ObjectProperty = ObjectProperty;
	exports.ArrayExpression = ArrayExpression;
	exports.RegExpLiteral = RegExpLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.StringLiteral = StringLiteral;
	exports._stringLiteral = _stringLiteral;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function Identifier(node /*: Object*/) {
	  this.push(node.name);
	}
	
	function RestElement(node /*: Object*/) {
	  this.push("...");
	  this.print(node.argument, node);
	}
	
	exports.SpreadElement = RestElement;
	exports.SpreadProperty = RestElement;
	exports.RestProperty = RestElement;
	
	function ObjectExpression(node /*: Object*/) {
	  var props = node.properties;
	
	  this.push("{");
	  this.printInnerComments(node);
	
	  if (props.length) {
	    this.space();
	    this.printList(props, node, { indent: true });
	    this.space();
	  }
	
	  this.push("}");
	}
	
	exports.ObjectPattern = ObjectExpression;
	
	function ObjectMethod(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	  this._method(node);
	}
	
	function ObjectProperty(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	
	  if (node.computed) {
	    this.push("[");
	    this.print(node.key, node);
	    this.push("]");
	  } else {
	    // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`
	    if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
	      this.print(node.value, node);
	      return;
	    }
	
	    this.print(node.key, node);
	
	    // shorthand!
	    if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
	      return;
	    }
	  }
	
	  this.push(":");
	  this.space();
	  this.print(node.value, node);
	}
	
	function ArrayExpression(node /*: Object*/) {
	  var elems = node.elements;
	  var len = elems.length;
	
	  this.push("[");
	  this.printInnerComments(node);
	
	  for (var i = 0; i < elems.length; i++) {
	    var elem = elems[i];
	    if (elem) {
	      if (i > 0) this.space();
	      this.print(elem, node);
	      if (i < len - 1) this.push(",");
	    } else {
	      // If the array expression ends with a hole, that hole
	      // will be ignored by the interpreter, but if it ends with
	      // two (or more) holes, we need to write out two (or more)
	      // commas so that the resulting code is interpreted with
	      // both (all) of the holes.
	      this.push(",");
	    }
	  }
	
	  this.push("]");
	}
	
	exports.ArrayPattern = ArrayExpression;
	
	function RegExpLiteral(node /*: Object*/) {
	  this.push("/" + node.pattern + "/" + node.flags);
	}
	
	function BooleanLiteral(node /*: Object*/) {
	  this.push(node.value ? "true" : "false");
	}
	
	function NullLiteral() {
	  this.push("null");
	}
	
	function NumericLiteral(node /*: Object*/) {
	  this.push(node.value + "");
	}
	
	function StringLiteral(node /*: Object*/, parent /*: Object*/) {
	  this.push(this._stringLiteral(node.value, parent));
	}
	
	function _stringLiteral(val /*: string*/, parent /*: Object*/) /*: string*/ {
	  val = JSON.stringify(val);
	
	  // escape illegal js but valid json unicode characters
	  val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function (c) {
	    return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
	  });
	
	  if (this.format.quotes === "single" && !t.isJSX(parent)) {
	    // remove double quotes
	    val = val.slice(1, -1);
	
	    // unescape double quotes
	    val = val.replace(/\\"/g, '"');
	
	    // escape single quotes
	    val = val.replace(/'/g, "\\'");
	
	    // add single quotes
	    val = "'" + val + "'";
	  }
	
	  return val;
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.AnyTypeAnnotation = AnyTypeAnnotation;
	exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
	exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
	exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
	exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
	exports.DeclareClass = DeclareClass;
	exports.DeclareFunction = DeclareFunction;
	exports.DeclareInterface = DeclareInterface;
	exports.DeclareModule = DeclareModule;
	exports.DeclareTypeAlias = DeclareTypeAlias;
	exports.DeclareVariable = DeclareVariable;
	exports.ExistentialTypeParam = ExistentialTypeParam;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
	exports.FunctionTypeParam = FunctionTypeParam;
	exports.InterfaceExtends = InterfaceExtends;
	exports._interfaceish = _interfaceish;
	exports.InterfaceDeclaration = InterfaceDeclaration;
	exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
	exports.MixedTypeAnnotation = MixedTypeAnnotation;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.NumberTypeAnnotation = NumberTypeAnnotation;
	exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
	exports.StringTypeAnnotation = StringTypeAnnotation;
	exports.ThisTypeAnnotation = ThisTypeAnnotation;
	exports.TupleTypeAnnotation = TupleTypeAnnotation;
	exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
	exports.TypeAlias = TypeAlias;
	exports.TypeAnnotation = TypeAnnotation;
	exports.TypeParameterInstantiation = TypeParameterInstantiation;
	exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
	exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
	exports.ObjectTypeIndexer = ObjectTypeIndexer;
	exports.ObjectTypeProperty = ObjectTypeProperty;
	exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
	exports.UnionTypeAnnotation = UnionTypeAnnotation;
	exports.TypeCastExpression = TypeCastExpression;
	exports.VoidTypeAnnotation = VoidTypeAnnotation;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function AnyTypeAnnotation() {
	  this.push("any");
	}
	
	function ArrayTypeAnnotation(node /*: Object*/) {
	  this.print(node.elementType, node);
	  this.push("[");
	  this.push("]");
	}
	
	function BooleanTypeAnnotation() {
	  this.push("bool");
	}
	
	function BooleanLiteralTypeAnnotation(node /*: Object*/) {
	  this.push(node.value ? "true" : "false");
	}
	
	function NullLiteralTypeAnnotation() {
	  this.push("null");
	}
	
	function DeclareClass(node /*: Object*/) {
	  this.push("declare class ");
	  this._interfaceish(node);
	}
	
	function DeclareFunction(node /*: Object*/) {
	  this.push("declare function ");
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation.typeAnnotation, node);
	  this.semicolon();
	}
	
	function DeclareInterface(node /*: Object*/) {
	  this.push("declare ");
	  this.InterfaceDeclaration(node);
	}
	
	function DeclareModule(node /*: Object*/) {
	  this.push("declare module ");
	  this.print(node.id, node);
	  this.space();
	  this.print(node.body, node);
	}
	
	function DeclareTypeAlias(node /*: Object*/) {
	  this.push("declare ");
	  this.TypeAlias(node);
	}
	
	function DeclareVariable(node /*: Object*/) {
	  this.push("declare var ");
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  this.semicolon();
	}
	
	function ExistentialTypeParam() {
	  this.push("*");
	}
	
	function FunctionTypeAnnotation(node /*: Object*/, parent /*: Object*/) {
	  this.print(node.typeParameters, node);
	  this.push("(");
	  this.printList(node.params, node);
	
	  if (node.rest) {
	    if (node.params.length) {
	      this.push(",");
	      this.space();
	    }
	    this.push("...");
	    this.print(node.rest, node);
	  }
	
	  this.push(")");
	
	  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying
	  if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
	    this.push(":");
	  } else {
	    this.space();
	    this.push("=>");
	  }
	
	  this.space();
	  this.print(node.returnType, node);
	}
	
	function FunctionTypeParam(node /*: Object*/) {
	  this.print(node.name, node);
	  if (node.optional) this.push("?");
	  this.push(":");
	  this.space();
	  this.print(node.typeAnnotation, node);
	}
	
	function InterfaceExtends(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	}
	
	exports.ClassImplements = InterfaceExtends;
	exports.GenericTypeAnnotation = InterfaceExtends;
	
	function _interfaceish(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  if (node["extends"].length) {
	    this.push(" extends ");
	    this.printJoin(node["extends"], node, { separator: ", " });
	  }
	  if (node.mixins && node.mixins.length) {
	    this.push(" mixins ");
	    this.printJoin(node.mixins, node, { separator: ", " });
	  }
	  this.space();
	  this.print(node.body, node);
	}
	
	function InterfaceDeclaration(node /*: Object*/) {
	  this.push("interface ");
	  this._interfaceish(node);
	}
	
	function IntersectionTypeAnnotation(node /*: Object*/) {
	  this.printJoin(node.types, node, { separator: " & " });
	}
	
	function MixedTypeAnnotation() {
	  this.push("mixed");
	}
	
	function NullableTypeAnnotation(node /*: Object*/) {
	  this.push("?");
	  this.print(node.typeAnnotation, node);
	}
	
	var _types = __webpack_require__("./node_modules/babel-generator/lib/generators/types.js");
	
	exports.NumericLiteralTypeAnnotation = _types.NumericLiteral;
	
	function NumberTypeAnnotation() {
	  this.push("number");
	}
	
	function StringLiteralTypeAnnotation(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}
	
	function StringTypeAnnotation() {
	  this.push("string");
	}
	
	function ThisTypeAnnotation() {
	  this.push("this");
	}
	
	function TupleTypeAnnotation(node /*: Object*/) {
	  this.push("[");
	  this.printJoin(node.types, node, { separator: ", " });
	  this.push("]");
	}
	
	function TypeofTypeAnnotation(node /*: Object*/) {
	  this.push("typeof ");
	  this.print(node.argument, node);
	}
	
	function TypeAlias(node /*: Object*/) {
	  this.push("type ");
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  this.space();
	  this.push("=");
	  this.space();
	  this.print(node.right, node);
	  this.semicolon();
	}
	
	function TypeAnnotation(node /*: Object*/) {
	  this.push(":");
	  this.space();
	  if (node.optional) this.push("?");
	  this.print(node.typeAnnotation, node);
	}
	
	function TypeParameterInstantiation(node /*: Object*/) {
	  // istanbul ignore next
	
	  var _this = this;
	
	  this.push("<");
	  this.printJoin(node.params, node, {
	    separator: ", ",
	    iterator: function iterator(node /*: Object*/) {
	      _this.print(node.typeAnnotation, node);
	    }
	  });
	  this.push(">");
	}
	
	exports.TypeParameterDeclaration = TypeParameterInstantiation;
	
	function ObjectTypeAnnotation(node /*: Object*/) {
	  // istanbul ignore next
	
	  var _this2 = this;
	
	  this.push("{");
	  var props = node.properties.concat(node.callProperties, node.indexers);
	
	  if (props.length) {
	    this.space();
	
	    this.printJoin(props, node, {
	      separator: false,
	      indent: true,
	      iterator: function iterator() {
	        if (props.length !== 1) {
	          _this2.semicolon();
	          _this2.space();
	        }
	      }
	    });
	
	    this.space();
	  }
	
	  this.push("}");
	}
	
	function ObjectTypeCallProperty(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.print(node.value, node);
	}
	
	function ObjectTypeIndexer(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.push("[");
	  this.print(node.id, node);
	  this.push(":");
	  this.space();
	  this.print(node.key, node);
	  this.push("]");
	  this.push(":");
	  this.space();
	  this.print(node.value, node);
	}
	
	function ObjectTypeProperty(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.print(node.key, node);
	  if (node.optional) this.push("?");
	  if (!t.isFunctionTypeAnnotation(node.value)) {
	    this.push(":");
	    this.space();
	  }
	  this.print(node.value, node);
	}
	
	function QualifiedTypeIdentifier(node /*: Object*/) {
	  this.print(node.qualification, node);
	  this.push(".");
	  this.print(node.id, node);
	}
	
	function UnionTypeAnnotation(node /*: Object*/) {
	  this.printJoin(node.types, node, { separator: " | " });
	}
	
	function TypeCastExpression(node /*: Object*/) {
	  this.push("(");
	  this.print(node.expression, node);
	  this.print(node.typeAnnotation, node);
	  this.push(")");
	}
	
	function VoidTypeAnnotation() {
	  this.push("void");
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/base.js":
/***/ function(module, exports) {

	/* @flow */
	
	"use strict";
	
	exports.__esModule = true;
	exports.File = File;
	exports.Program = Program;
	exports.BlockStatement = BlockStatement;
	exports.Noop = Noop;
	exports.Directive = Directive;
	exports.DirectiveLiteral = DirectiveLiteral;
	
	function File(node /*: Object*/) {
	  this.print(node.program, node);
	}
	
	function Program(node /*: Object*/) {
	  this.printInnerComments(node, false);
	
	  this.printSequence(node.directives, node);
	  if (node.directives && node.directives.length) this.newline();
	
	  this.printSequence(node.body, node);
	}
	
	function BlockStatement(node /*: Object*/) {
	  this.push("{");
	  this.printInnerComments(node);
	  if (node.body.length) {
	    this.newline();
	
	    this.printSequence(node.directives, node, { indent: true });
	    if (node.directives && node.directives.length) this.newline();
	
	    this.printSequence(node.body, node, { indent: true });
	    if (!this.format.retainLines) this.removeLast("\n");
	    this.rightBrace();
	  } else {
	    this.push("}");
	  }
	}
	
	function Noop() {}
	
	function Directive(node /*: Object*/) {
	  this.print(node.value, node);
	  this.semicolon();
	}
	
	function DirectiveLiteral(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}

/***/ },

/***/ "./node_modules/babel-generator/lib/generators/jsx.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	exports.JSXAttribute = JSXAttribute;
	exports.JSXIdentifier = JSXIdentifier;
	exports.JSXNamespacedName = JSXNamespacedName;
	exports.JSXMemberExpression = JSXMemberExpression;
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	exports.JSXExpressionContainer = JSXExpressionContainer;
	exports.JSXText = JSXText;
	exports.JSXElement = JSXElement;
	exports.JSXOpeningElement = JSXOpeningElement;
	exports.JSXClosingElement = JSXClosingElement;
	exports.JSXEmptyExpression = JSXEmptyExpression;
	
	function JSXAttribute(node /*: Object*/) {
	  this.print(node.name, node);
	  if (node.value) {
	    this.push("=");
	    this.print(node.value, node);
	  }
	}
	
	function JSXIdentifier(node /*: Object*/) {
	  this.push(node.name);
	}
	
	function JSXNamespacedName(node /*: Object*/) {
	  this.print(node.namespace, node);
	  this.push(":");
	  this.print(node.name, node);
	}
	
	function JSXMemberExpression(node /*: Object*/) {
	  this.print(node.object, node);
	  this.push(".");
	  this.print(node.property, node);
	}
	
	function JSXSpreadAttribute(node /*: Object*/) {
	  this.push("{...");
	  this.print(node.argument, node);
	  this.push("}");
	}
	
	function JSXExpressionContainer(node /*: Object*/) {
	  this.push("{");
	  this.print(node.expression, node);
	  this.push("}");
	}
	
	function JSXText(node /*: Object*/) {
	  this.push(node.value, true);
	}
	
	function JSXElement(node /*: Object*/) {
	  var open = node.openingElement;
	  this.print(open, node);
	  if (open.selfClosing) return;
	
	  this.indent();
	  for (var _iterator = (node.children /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var child = _ref;
	
	    this.print(child, node);
	  }
	  this.dedent();
	
	  this.print(node.closingElement, node);
	}
	
	function JSXOpeningElement(node /*: Object*/) {
	  this.push("<");
	  this.print(node.name, node);
	  if (node.attributes.length > 0) {
	    this.push(" ");
	    this.printJoin(node.attributes, node, { separator: " " });
	  }
	  this.push(node.selfClosing ? " />" : ">");
	}
	
	function JSXClosingElement(node /*: Object*/) {
	  this.push("</");
	  this.print(node.name, node);
	  this.push(">");
	}
	
	function JSXEmptyExpression() {}

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/file/logger.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _debugNode = __webpack_require__("./node_modules/debug/node.js");
	
	var _debugNode2 = _interopRequireDefault(_debugNode);
	
	/*:: import type File from "./index";*/
	
	var verboseDebug = _debugNode2["default"]("babel:verbose");
	var generalDebug = _debugNode2["default"]("babel");
	
	var seenDeprecatedMessages = [];
	
	var Logger = (function () {
	  function Logger(file /*: File*/, filename /*: string*/) {
	    _classCallCheck(this, Logger);
	
	    this.filename = filename;
	    this.file = file;
	  }
	
	  Logger.prototype._buildMessage = function _buildMessage(msg /*: string*/) /*: string*/ {
	    var parts = "[BABEL] " + this.filename;
	    if (msg) parts += ": " + msg;
	    return parts;
	  };
	
	  Logger.prototype.warn = function warn(msg /*: string*/) {
	    console.warn(this._buildMessage(msg));
	  };
	
	  Logger.prototype.error = function error(msg /*: string*/) /*: Error*/ {
	    var Constructor /*: typeof Error*/ = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];
	
	    throw new Constructor(this._buildMessage(msg));
	  };
	
	  Logger.prototype.deprecate = function deprecate(msg /*: string*/) {
	    if (this.file.opts && this.file.opts.suppressDeprecationMessages) return;
	
	    msg = this._buildMessage(msg);
	
	    // already seen this message
	    if (seenDeprecatedMessages.indexOf(msg) >= 0) return;
	
	    // make sure we don't see it again
	    seenDeprecatedMessages.push(msg);
	
	    console.error(msg);
	  };
	
	  Logger.prototype.verbose = function verbose(msg /*: string*/) {
	    if (verboseDebug.enabled) verboseDebug(this._buildMessage(msg));
	  };
	
	  Logger.prototype.debug = function debug(msg /*: string*/) {
	    if (generalDebug.enabled) generalDebug(this._buildMessage(msg));
	  };
	
	  Logger.prototype.deopt = function deopt(node /*: Object*/, msg /*: string*/) {
	    this.debug(msg);
	  };
	
	  return Logger;
	})();
	
	exports["default"] = Logger;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babylon/index.js":
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.babylon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	exports.parse = parse;
	
	var _parser = require("./parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	require("./parser/util");
	
	require("./parser/statement");
	
	require("./parser/lval");
	
	require("./parser/expression");
	
	require("./parser/node");
	
	require("./parser/location");
	
	require("./parser/comments");
	
	var _tokenizerTypes = require("./tokenizer/types");
	
	require("./tokenizer");
	
	require("./tokenizer/context");
	
	var _pluginsFlow = require("./plugins/flow");
	
	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);
	
	var _pluginsJsx = require("./plugins/jsx");
	
	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);
	
	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];
	
	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}
	
	exports.tokTypes = _tokenizerTypes.types;
	},{"./parser":5,"./parser/comments":3,"./parser/expression":4,"./parser/location":6,"./parser/lval":7,"./parser/node":8,"./parser/statement":9,"./parser/util":10,"./plugins/flow":11,"./plugins/jsx":12,"./tokenizer":15,"./tokenizer/context":14,"./tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],2:[function(require,module,exports){
	/* @flow */
	// A second optional argument can be given to further configure
	"use strict";
	
	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions /*: {
	                     sourceType: string,
	                     allowReturnOutsideFunction: boolean,
	                     allowImportExportEverywhere: boolean,
	                     allowSuperOutsideMethod: boolean,
	                     plugins: Array<string>,
	                     strictMode: any
	                   }*/ = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // TODO
	  allowSuperOutsideMethod: false,
	  // An array of plugins to enable
	  plugins: [],
	  // TODO
	  strictMode: null
	};
	
	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object
	
	function getOptions(opts /*:: ?: Object*/) /*: Object*/ {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}
	
	// the parser process. These options are recognized:
	},{}],3:[function(require,module,exports){
	/* @flow */
	
	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	function last(stack) {
	  return stack[stack.length - 1];
	}
	
	var pp = _index2["default"].prototype;
	
	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};
	
	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;
	
	  var stack = this.state.commentStack;
	
	  var lastChild = undefined,
	      trailingComments = undefined,
	      i = undefined;
	
	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }
	
	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }
	
	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first ClassMethod,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }
	
	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }
	
	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }
	
	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }
	
	  stack.push(node);
	};
	},{"./index":5,"babel-runtime/helpers/interop-require-default":26}],4:[function(require,module,exports){
	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
	
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = require("../util/identifier");
	
	var pp = _index2["default"].prototype;
	
	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.
	
	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed) return;
	
	  var key = prop.key;
	  var name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;
	      break;
	
	    case "StringLiteral":
	    case "NumericLiteral":
	      name = String(key.value);
	      break;
	
	    default:
	      return;
	  }
	
	  if (name === "__proto__" && prop.kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};
	
	// ### Expression parsing
	
	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.
	
	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).
	
	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};
	
	// Parse an assignment expression. This includes applications of
	// operators like `+=`.
	
	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }
	
	  var failOnShorthandAssign = undefined;
	  if (refShorthandDefaultPos) {
	    failOnShorthandAssign = false;
	  } else {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  }
	
	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;
	
	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }
	
	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly
	
	    this.checkLVal(left);
	
	    if (left.extra && left.extra.parenthesized) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }
	
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	
	  return left;
	};
	
	// Parse a ternary conditional (`?:`) operator.
	
	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};
	
	// Start the precedence parser.
	
	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};
	
	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.
	
	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;
	
	      if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
	        this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
	      }
	
	      var op = this.state.type;
	      this.next();
	
	      var startPos = this.state.start;
	      var startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
	
	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};
	
	// Parse unary operators, both prefix and postfix.
	
	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode();
	    var update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();
	
	    var argType = this.state.type;
	    this.addExtra(node, "parenthesizedArgument", argType === _tokenizerTypes.types.parenL);
	    node.argument = this.parseMaybeUnary();
	
	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	      this.unexpected(refShorthandDefaultPos.start);
	    }
	
	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }
	
	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }
	
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};
	
	// Parse call, dot, and `[]`-subscript expressions.
	
	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var potentialArrowAt = this.state.potentialArrowAt;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);
	
	  if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
	    return expr;
	  }
	
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  }
	
	  return this.parseSubscripts(expr, startPos, startLoc);
	};
	
	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdentifier(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();
	
	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
	      base = this.finishNode(node, "CallExpression");
	
	      if (possibleAsync && this.shouldParseAsyncArrow()) {
	        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};
	
	pp.parseCallExpressionArguments = function (close, allowTrailingComma, possibleAsyncArrow) {
	  var innerParenStart = undefined;
	
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
	    if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	      innerParenStart = this.state.start;
	    }
	
	    elts.push(this.parseExprListItem());
	  }
	
	  // we found an async arrow function so let's not allow any inner parens
	  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
	    this.unexpected();
	  }
	
	  return elts;
	};
	
	pp.shouldParseAsyncArrow = function () {
	  return this.match(_tokenizerTypes.types.arrow);
	};
	
	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.hasPlugin("asyncFunctions")) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};
	
	// Parse a no-call expression (like argument of `new` or `::` operators).
	
	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};
	
	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.
	
	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
	        this.raise(this.state.start, "'super' outside of function or class");
	      }
	
	      node = this.startNode();
	      this.next();
	      if (!this.match(_tokenizerTypes.types.parenL) && !this.match(_tokenizerTypes.types.bracketL) && !this.match(_tokenizerTypes.types.dot)) {
	        this.unexpected();
	      }
	      if (this.match(_tokenizerTypes.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
	        this.raise(node.start, "super() outside of class constructor");
	      }
	      return this.finishNode(node, "Super");
	
	    case _tokenizerTypes.types._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");
	
	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
	      var allowYield = this.shouldAllowYieldIdentifier();
	      var id = this.parseIdentifier(allowAwait || allowYield);
	
	      if (this.hasPlugin("asyncFunctions")) {
	        if (id.name === "await") {
	          if (this.state.inAsync || this.inModule) {
	            return this.parseAwait(node);
	          }
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdentifier()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // let foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }
	
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }
	
	      return id;
	
	    case _tokenizerTypes.types._do:
	      if (this.hasPlugin("doExpressions")) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock(false, true);
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }
	
	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value, "RegExpLiteral");
	      node.pattern = value.pattern;
	      node.flags = value.flags;
	      return node;
	
	    case _tokenizerTypes.types.num:
	      return this.parseLiteral(this.state.value, "NumericLiteral");
	
	    case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value, "StringLiteral");
	
	    case _tokenizerTypes.types._null:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "NullLiteral");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteral");
	
	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);
	
	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);
	
	    case _tokenizerTypes.types._function:
	      return this.parseFunctionExpression();
	
	    case _tokenizerTypes.types.at:
	      this.parseDecorators();
	
	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);
	
	    case _tokenizerTypes.types._new:
	      return this.parseNew();
	
	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();
	
	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseFunctionExpression = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	  if (this.state.inGenerator && this.eat(_tokenizerTypes.types.dot) && this.hasPlugin("functionSent")) {
	    return this.parseMetaProperty(node, meta, "sent");
	  } else {
	    return this.parseFunction(node, false);
	  }
	};
	
	pp.parseMetaProperty = function (node, meta, propertyName) {
	  node.meta = meta;
	  node.property = this.parseIdentifier(true);
	
	  if (node.property.name !== propertyName) {
	    this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
	  }
	
	  return this.finishNode(node, "MetaProperty");
	};
	
	pp.parseLiteral = function (value, type) {
	  var node = this.startNode();
	  this.addExtra(node, "rawValue", value);
	  this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	  node.value = value;
	  this.next();
	  return this.finishNode(node, type);
	};
	
	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};
	
	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;
	
	  var val = undefined;
	  this.next();
	
	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }
	
	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }
	
	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);
	
	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    for (var _i = 0; _i < exprList.length; _i++) {
	      var param = exprList[_i];
	      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
	    }
	
	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }
	
	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	
	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }
	
	  this.addExtra(val, "parenthesized", true);
	  this.addExtra(val, "parenStart", startPos);
	
	  return val;
	};
	
	pp.parseParenItem = function (node) {
	  return node;
	};
	
	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the
	
	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	
	  if (this.eat(_tokenizerTypes.types.dot)) {
	    return this.parseMetaProperty(node, meta, "target");
	  }
	
	  node.callee = this.parseNoCallExpr();
	
	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"));
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }
	
	  return this.finishNode(node, "NewExpression");
	};
	
	// Parse template expression.
	
	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};
	
	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};
	
	// Parse an object literal or binding pattern.
	
	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var decorators = [];
	  var propHash = _Object$create(null);
	  var first = true;
	  var node = this.startNode();
	
	  node.properties = [];
	  this.next();
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }
	
	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }
	
	    if (this.hasPlugin("objectRestSpread") && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = isPattern ? "RestProperty" : "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }
	
	    prop.method = false;
	    prop.shorthand = false;
	
	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }
	
	    if (!isPattern) {
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	    }
	
	    if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();
	
	      var asyncId = this.parseIdentifier();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_tokenizerTypes.types.star);
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }
	
	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);
	
	    if (prop.shorthand) {
	      this.addExtra(prop, "shorthand", true);
	    }
	
	    node.properties.push(prop);
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }
	
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};
	
	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (isAsync || isGenerator || this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "method";
	    prop.method = true;
	    this.parseMethod(prop, isGenerator, isAsync);
	    return this.finishNode(prop, "ObjectMethod");
	  }
	
	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    return this.finishNode(prop, "ObjectProperty");
	  }
	
	  if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    this.parseMethod(prop, false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.params.length !== paramCount) {
	      var start = prop.start;
	      if (prop.kind === "get") {
	        this.raise(start, "getter should have no params");
	      } else {
	        this.raise(start, "setter should have exactly one param");
	      }
	    }
	    return this.finishNode(prop, "ObjectMethod");
	  }
	
	  if (!prop.computed && prop.key.type === "Identifier") {
	    if (isPattern) {
	      var illegalBinding = this.isKeyword(prop.key.name);
	      if (!illegalBinding && this.state.strict) {
	        illegalBinding = _utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name);
	      }
	      if (illegalBinding) {
	        this.raise(prop.key.start, "Binding " + prop.key.name);
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) {
	        refShorthandDefaultPos.start = this.state.start;
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	    return this.finishNode(prop, "ObjectProperty");
	  }
	
	  this.unexpected();
	};
	
	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }
	};
	
	// Initialize empty function node.
	
	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.hasPlugin("asyncFunctions")) {
	    node.async = !!isAsync;
	  }
	};
	
	// Parse object or class method.
	
	pp.parseMethod = function (node, isGenerator, isAsync) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = node.kind || true;
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  this.state.inMethod = oldInMethod;
	  return node;
	};
	
	// Parse arrow function expression with given parameters.
	
	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};
	
	// Parse function body and check parameters.
	
	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);
	
	  var oldInAsync = this.state.inAsync;
	  this.state.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.state.inAsync = oldInAsync;
	
	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  var checkLVal = this.state.strict;
	  var checkLValStrict = false;
	  var isStrict = false;
	
	  // arrow function
	  if (allowExpression) checkLVal = true;
	
	  // normal function
	  if (!isExpression && node.body.directives.length) {
	    for (var _iterator = (node.body.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i2 >= _iterator.length) break;
	        _ref = _iterator[_i2++];
	      } else {
	        _i2 = _iterator.next();
	        if (_i2.done) break;
	        _ref = _i2.value;
	      }
	
	      var directive = _ref;
	
	      if (directive.value.value === "use strict") {
	        isStrict = true;
	        checkLVal = true;
	        checkLValStrict = true;
	        break;
	      }
	    }
	  }
	
	  //
	  if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
	    this.raise(node.id.start, "Binding yield in strict mode");
	  }
	
	  if (checkLVal) {
	    var nameHash = _Object$create(null);
	    var oldStrict = this.state.strict;
	    if (checkLValStrict) this.state.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    for (var _iterator2 = (node.params /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i3 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i3++];
	      } else {
	        _i3 = _iterator2.next();
	        if (_i3.done) break;
	        _ref2 = _i3.value;
	      }
	
	      var param = _ref2;
	
	      this.checkLVal(param, true, nameHash);
	    }
	    this.state.strict = oldStrict;
	  }
	};
	
	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).
	
	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};
	
	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};
	
	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.
	
	pp.parseIdentifier = function (liberal) {
	  var node = this.startNode();
	
	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && this.state.strict && _utilIdentifier.reservedWords.strict(this.state.value)) {
	      this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    }
	
	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	
	  if (!liberal && node.name === "await" && this.state.inAsync) {
	    this.raise(node.start, "invalid use of await inside of an async function");
	  }
	
	  this.next();
	  return this.finishNode(node, "Identifier");
	};
	
	// Parses await expression inside async function.
	
	pp.parseAwait = function (node) {
	  if (!this.state.inAsync) {
	    this.unexpected();
	  }
	  if (this.isLineTerminator()) {
	    this.unexpected();
	  }
	  if (this.match(_tokenizerTypes.types.star)) {
	    this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
	  }
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};
	
	// Parses yield expression inside generator.
	
	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],5:[function(require,module,exports){
	/* @noflow */
	
	"use strict";
	
	var _inherits = require("babel-runtime/helpers/inherits")["default"];
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _utilIdentifier = require("../util/identifier");
	
	var _options = require("../options");
	
	var _tokenizer = require("../tokenizer");
	
	var _tokenizer2 = _interopRequireDefault(_tokenizer);
	
	var plugins = {};
	
	exports.plugins = plugins;
	
	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);
	
	  function Parser(options, input /*: string*/) {
	    _classCallCheck(this, Parser);
	
	    options = _options.getOptions(options);
	    _Tokenizer.call(this, options, input);
	
	    this.options = options;
	    this.inModule = this.options.sourceType === "module";
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.plugins = this.loadPlugins(this.options.plugins);
	
	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }
	
	  Parser.prototype.hasPlugin = function hasPlugin(name /*: string*/) /*: boolean*/ {
	    return !!(this.plugins["*"] || this.plugins[name]);
	  };
	
	  Parser.prototype.extend = function extend(name /*: string*/, f /*: Function*/) {
	    this[name] = f(this[name]);
	  };
	
	  Parser.prototype.loadPlugins = function loadPlugins(plugins /*: Array<string>*/) {
	    var pluginMap = {};
	
	    if (plugins.indexOf("flow") >= 0) {
	      // ensure flow plugin loads last
	      plugins = plugins.filter(function (plugin) {
	        return plugin !== "flow";
	      });
	      plugins.push("flow");
	    }
	
	    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var _name = _ref;
	
	      if (!pluginMap[_name]) {
	        pluginMap[_name] = true;
	
	        var plugin = exports.plugins[_name];
	        if (plugin) plugin(this);
	      }
	    }
	
	    return pluginMap;
	  };
	
	  Parser.prototype.parse = function parse() /*: {
	                                                type: "File",
	                                                program: {
	                                                  type: "Program",
	                                                  body: Array<Object>
	                                                }
	                                              }*/ {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };
	
	  return Parser;
	})(_tokenizer2["default"]);
	
	exports["default"] = Parser;
	},{"../options":2,"../tokenizer":15,"../util/identifier":18,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/inherits":25,"babel-runtime/helpers/interop-require-default":26}],6:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _utilLocation = require("../util/location");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var pp = _index2["default"].prototype;
	
	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.
	
	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/interop-require-default":26}],7:[function(require,module,exports){
	"use strict";
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = require("../util/identifier");
	
	var pp = _index2["default"].prototype;
	
	// Convert existing expression atom to assignable pattern
	// if possible.
	
	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;
	
	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var prop = _ref;
	
	          if (prop.type === "ObjectMethod") {
	            if (prop.kind === "get" || prop.kind === "set") {
	              this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	            } else {
	              this.raise(prop.key.start, "Object pattern can't contain methods");
	            }
	          } else {
	            this.toAssignable(prop, isBinding);
	          }
	        }
	        break;
	
	      case "ObjectProperty":
	        this.toAssignable(node.value, isBinding);
	        break;
	
	      case "SpreadProperty":
	        node.type = "RestProperty";
	        break;
	
	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;
	
	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;
	
	      case "MemberExpression":
	        if (!isBinding) break;
	
	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};
	
	// Convert list of expression atoms to binding list.
	
	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};
	
	// Convert list of expression atoms to a list of
	
	pp.toReferencedList = function (exprList) {
	  return exprList;
	};
	
	// Parses spread element.
	
	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};
	
	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseBindingIdentifier();
	  return this.finishNode(node, "RestElement");
	};
	
	pp.shouldAllowYieldIdentifier = function () {
	  return this.match(_tokenizerTypes.types._yield) && !this.state.strict && !this.state.inGenerator;
	};
	
	pp.parseBindingIdentifier = function () {
	  return this.parseIdentifier(this.shouldAllowYieldIdentifier());
	};
	
	// Parses lvalue (assignable) atom.
	
	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types._yield:
	      if (this.state.strict || this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types.name:
	      return this.parseIdentifier(true);
	
	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [];
	  var first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};
	
	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};
	
	// Parses assignment pattern around given atom if possible.
	
	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};
	
	// Verify that a node is an lval — something that can be assigned
	// to.
	
	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.state.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) {
	        this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      }
	
	      if (checkClashes) {
	        // we need to prefix this with an underscore for the cases where we have a key of
	        // `__proto__`. there's a bug in old V8 where the following wouldn't work:
	        //
	        //   > var obj = Object.create(null);
	        //   undefined
	        //   > obj.__proto__
	        //   null
	        //   > obj.__proto__ = true;
	        //   true
	        //   > obj.__proto__
	        //   null
	        var key = "_" + expr.name;
	
	        if (checkClashes[key]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[key] = true;
	        }
	      }
	      break;
	
	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;
	
	    case "ObjectPattern":
	      for (var _iterator2 = (expr.properties /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;
	
	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }
	
	        var prop = _ref2;
	
	        if (prop.type === "ObjectProperty") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;
	
	    case "ArrayPattern":
	      for (var _iterator3 = (expr.elements /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;
	
	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }
	
	        var elem = _ref3;
	
	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;
	
	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;
	
	    case "RestProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;
	
	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/interop-require-default":26}],8:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilLocation = require("../util/location");
	
	// Start an AST node, attaching a start offset.
	
	var pp = _index2["default"].prototype;
	
	var Node = (function () {
	  function Node(pos /*:: ?: number*/, loc /*:: ?: SourceLocation*/) {
	    _classCallCheck(this, Node);
	
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }
	
	  Node.prototype.__clone = function __clone() /*: Node*/ {
	    var node2 = new Node();
	    for (var key in this) {
	      node2[key] = this[key];
	    }return node2;
	  };
	
	  return Node;
	})();
	
	pp.startNode = function () {
	  return new Node(this.state.start, this.state.startLoc);
	};
	
	pp.startNodeAt = function (pos, loc) {
	  return new Node(pos, loc);
	};
	
	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}
	
	// Finish an AST node, adding `type` and `end` properties.
	
	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};
	
	// Finish node at given position
	
	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],9:[function(require,module,exports){
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = require("../util/whitespace");
	
	var pp = _index2["default"].prototype;
	
	// ### Statement parsing
	
	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.
	
	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;
	
	  this.parseBlockBody(program, true, true, _tokenizerTypes.types.eof);
	
	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;
	
	  return this.finishNode(file, "File");
	};
	
	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };
	
	// TODO
	
	pp.stmtToDirective = function (stmt) {
	  var expr = stmt.expression;
	
	  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
	  var directive = this.startNodeAt(stmt.start, stmt.loc.start);
	
	  var raw = this.input.slice(expr.start, expr.end);
	  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes
	
	  this.addExtra(directiveLiteral, "raw", raw);
	  this.addExtra(directiveLiteral, "rawValue", val);
	
	  directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);
	
	  return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
	};
	
	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.
	
	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }
	
	  var starttype = this.state.type,
	      node = this.startNode();
	
	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.
	
	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);
	
	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);
	
	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);
	
	    case _tokenizerTypes.types._let:
	    case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var
	
	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);
	
	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	        }
	
	        if (!this.inModule) {
	          this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	        }
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);
	
	    case _tokenizerTypes.types.name:
	      if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	  }
	
	  // If the statement does not start with a statement keyword or a
	  // brace, it's an ExpressionStatement or LabeledStatement. We
	  // simply start parsing an expression, and afterwards, if the
	  // next token is a colon and the expression was a simple
	  // Identifier node, we switch to interpreting it as a label.
	  var maybeName = this.state.value;
	  var expr = this.parseExpression();
	
	  if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	    return this.parseLabeledStatement(node, maybeName, expr);
	  } else {
	    return this.parseExpressionStatement(node, expr);
	  }
	};
	
	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};
	
	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }
	
	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }
	
	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};
	
	pp.parseDecorator = function () {
	  if (!this.hasPlugin("decorators")) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};
	
	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();
	
	  if (this.isLineTerminator()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdentifier();
	    this.semicolon();
	  }
	
	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = undefined;
	  for (i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};
	
	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};
	
	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};
	
	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.
	
	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);
	
	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }
	
	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");
	
	    if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	      if (_init.declarations.length === 1 && !_init.declarations[0].init) {
	        return this.parseForIn(node, _init);
	      }
	    }
	
	    return this.parseFor(node, _init);
	  }
	
	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};
	
	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};
	
	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};
	
	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }
	
	  this.next();
	
	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.
	
	  if (this.isLineTerminator()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }
	
	  return this.finishNode(node, "ReturnStatement");
	};
	
	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);
	
	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.
	
	  var cur = undefined;
	  for (var sawDefault = undefined; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (cur) {
	        cur.consequent.push(this.parseStatement(true));
	      } else {
	        this.unexpected();
	      }
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};
	
	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};
	
	// Reused empty array added for node fields that are always empty.
	
	var empty = [];
	
	pp.parseTryStatement = function (node) {
	  this.next();
	
	  node.block = this.parseBlock();
	  node.handler = null;
	
	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();
	
	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true, _Object$create(null));
	    this.expect(_tokenizerTypes.types.parenR);
	
	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }
	
	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;
	
	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }
	
	  return this.finishNode(node, "TryStatement");
	};
	
	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};
	
	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};
	
	pp.parseWithStatement = function (node) {
	  if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};
	
	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};
	
	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var _iterator = (this.state.labels /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var label = _ref;
	
	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }
	
	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }
	
	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};
	
	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};
	
	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).
	
	pp.parseBlock = function (allowDirectives /*:: ?*/) {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types.braceL);
	  this.parseBlockBody(node, allowDirectives, false, _tokenizerTypes.types.braceR);
	  return this.finishNode(node, "BlockStatement");
	};
	
	// TODO
	
	pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
	  node.body = [];
	  node.directives = [];
	
	  var parsedNonDirective = false;
	  var oldStrict = undefined;
	  var octalPosition = undefined;
	
	  while (!this.eat(end)) {
	    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
	      octalPosition = this.state.octalPosition;
	    }
	
	    var stmt = this.parseStatement(true, topLevel);
	
	    if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
	      var directive = this.stmtToDirective(stmt);
	      node.directives.push(directive);
	
	      if (oldStrict === undefined && directive.value.value === "use strict") {
	        oldStrict = this.state.strict;
	        this.setStrict(true);
	
	        if (octalPosition) {
	          this.raise(octalPosition, "Octal literal in strict mode");
	        }
	      }
	
	      continue;
	    }
	
	    parsedNonDirective = true;
	    node.body.push(stmt);
	  }
	
	  if (oldStrict === false) {
	    this.setStrict(false);
	  }
	};
	
	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.
	
	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};
	
	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.
	
	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};
	
	// Parse a list of variable declarations.
	
	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};
	
	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};
	
	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = false;
	
	  this.initFunction(node, isAsync);
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    if (node.async && !this.hasPlugin("asyncGenerators")) {
	      this.unexpected();
	    } else {
	      node.generator = true;
	      this.next();
	    }
	  }
	
	  if (isStatement && !optionalId && !this.match(_tokenizerTypes.types.name) && !this.match(_tokenizerTypes.types._yield)) {
	    this.unexpected();
	  }
	
	  if (this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._yield)) {
	    node.id = this.parseBindingIdentifier();
	  }
	
	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	
	  this.state.inMethod = oldInMethod;
	
	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};
	
	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	};
	
	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseClass = function (node, isStatement, optionalId) {
	  this.next();
	  this.parseClassId(node, isStatement, optionalId);
	  this.parseClassSuper(node);
	  this.parseClassBody(node);
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};
	
	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	pp.parseClassBody = function (node) {
	  // class bodies are implicitly strict
	  var oldStrict = this.state.strict;
	  this.state.strict = true;
	
	  var hadConstructorCall = false;
	  var hadConstructor = false;
	  var decorators = [];
	  var classBody = this.startNode();
	
	  classBody.body = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) {
	      continue;
	    }
	
	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }
	
	    var method = this.startNode();
	
	    // steal the decorators if there are any
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }
	
	    var isConstructorCall = false;
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star);
	    var isGetSet = false;
	    var isAsync = false;
	
	    this.parsePropertyName(method);
	
	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }
	
	    if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
	      if (this.isClassProperty()) {
	        classBody.body.push(this.parseClassProperty(method));
	        continue;
	      }
	
	      if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_tokenizerTypes.types.name) && this.state.value === "constructor") {
	        isConstructorCall = true;
	        this.parsePropertyName(method);
	      }
	    }
	
	    var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
	    if (isAsyncMethod) {
	      if (this.hasPlugin("asyncGenerators") && this.eat(_tokenizerTypes.types.star)) isGenerator = true;
	      isAsync = true;
	      this.parsePropertyName(method);
	    }
	
	    method.kind = "method";
	
	    if (!method.computed) {
	      var key = method.key;
	
	      // handle get/set methods
	      // eg. class Foo { get bar() {} set bar() {} }
	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }
	
	      // disallow invalid constructors
	      var isConstructor = !isConstructorCall && !method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
	      if (isConstructor) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }
	
	      // disallow static prototype method
	      var isStaticPrototype = method["static"] && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
	      if (isStaticPrototype) {
	        this.raise(key.start, "Classes may not have static property named prototype");
	      }
	    }
	
	    // convert constructor to a constructor call
	    if (isConstructorCall) {
	      if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
	      method.kind = "constructorCall";
	      hadConstructorCall = true;
	    }
	
	    // disallow decorators on class constructors
	    if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }
	
	    this.parseClassMethod(classBody, method, isGenerator, isAsync);
	
	    // get methods aren't allowed to have any parameters
	    // set methods must have exactly 1 parameter
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.params.length !== paramCount) {
	        var start = method.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }
	
	  node.body = this.finishNode(classBody, "ClassBody");
	
	  this.state.strict = oldStrict;
	};
	
	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.hasPlugin("classProperties")) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  if (!this.eat(_tokenizerTypes.types.semi)) {
	    this.raise(node.value && node.value.end || node.key.end, "A semicolon is required after a class property");
	  }
	  return this.finishNode(node, "ClassProperty");
	};
	
	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  this.parseMethod(method, isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "ClassMethod"));
	};
	
	pp.parseClassId = function (node, isStatement, optionalId) {
	  if (this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdentifier();
	  } else {
	    if (optionalId || !isStatement) {
	      node.id = null;
	    } else {
	      this.unexpected();
	    }
	  }
	};
	
	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};
	
	// Parses module export declaration.
	
	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
	      specifier.exported = this.parseIdentifier();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdentifier(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdentifier();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var expr = this.startNode();
	    var needsSemi = false;
	    if (this.eat(_tokenizerTypes.types._function)) {
	      expr = this.parseFunction(expr, true, false, false, true);
	    } else if (this.match(_tokenizerTypes.types._class)) {
	      expr = this.parseClass(expr, true, true);
	    } else {
	      needsSemi = true;
	      expr = this.parseMaybeAssign();
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};
	
	pp.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};
	
	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
	  }
	
	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }
	
	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};
	
	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};
	
	pp.parseExportFrom = function (node, expect /*:: ?*/) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }
	
	  this.semicolon();
	};
	
	pp.shouldParseExportDeclaration = function () {
	  return this.hasPlugin("asyncFunctions") && this.isContextual("async");
	};
	
	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};
	
	// Parses a comma-separated list of module exports.
	
	pp.parseExportSpecifiers = function () {
	  var nodes = [];
	  var first = true;
	  var needsFrom = undefined;
	
	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var isDefault = this.match(_tokenizerTypes.types._default);
	    if (isDefault && !needsFrom) needsFrom = true;
	
	    var node = this.startNode();
	    node.local = this.parseIdentifier(isDefault);
	    node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }
	
	  // https://github.com/ember-cli/ember-cli/pull/3739
	  if (needsFrom && !this.isContextual("from")) {
	    this.unexpected();
	  }
	
	  return nodes;
	};
	
	// Parses import declaration.
	
	pp.parseImport = function (node) {
	  this.next();
	
	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};
	
	// Parses a comma-separated list of module imports.
	
	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }
	
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var specifier = this.startNode();
	    specifier.imported = this.parseIdentifier(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdentifier() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};
	
	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],10:[function(require,module,exports){
	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _index = require("./index");
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = require("../util/whitespace");
	
	var pp = _index2["default"].prototype;
	
	// ## Parser utilities
	
	// TODO
	
	pp.addExtra = function (node, key, val) {
	  if (!node) return;
	
	  var extra = node.extra = node.extra || {};
	  extra[key] = val;
	};
	
	// TODO
	
	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};
	
	// TODO
	
	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};
	
	// Tests whether parsed token is a contextual keyword.
	
	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};
	
	// Consumes contextual keyword if possible.
	
	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};
	
	// Asserts that following token is given contextual keyword.
	
	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};
	
	// Test whether a semicolon can be inserted at the current position.
	
	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};
	
	// TODO
	
	pp.isLineTerminator = function () {
	  return this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.
	
	pp.semicolon = function () {
	  if (!this.isLineTerminator()) this.unexpected();
	};
	
	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.
	
	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};
	
	// Raise an unexpected token error.
	
	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/helpers/interop-require-default":26}],11:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _tokenizerTypes = require("../tokenizer/types");
	
	var _parser = require("../parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var pp = _parser2["default"].prototype;
	
	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};
	
	pp.flowParseDeclareFunction = function (node) {
	  this.next();
	
	  var id = node.id = this.parseIdentifier();
	
	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();
	
	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();
	
	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	
	  this.finishNode(id, id.type);
	
	  this.semicolon();
	
	  return this.finishNode(node, "DeclareFunction");
	};
	
	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else if (this.isContextual("type")) {
	    return this.flowParseDeclareTypeAlias(node);
	  } else if (this.isContextual("interface")) {
	    return this.flowParseDeclareInterface(node);
	  } else {
	    this.unexpected();
	  }
	};
	
	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};
	
	pp.flowParseDeclareModule = function (node) {
	  this.next();
	
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdentifier();
	  }
	
	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();
	
	    // todo: declare check
	    this.next();
	
	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	
	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};
	
	pp.flowParseDeclareTypeAlias = function (node) {
	  this.next();
	  this.flowParseTypeAlias(node);
	  return this.finishNode(node, "DeclareTypeAlias");
	};
	
	pp.flowParseDeclareInterface = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node);
	  return this.finishNode(node, "DeclareInterface");
	};
	
	// Interfaces
	
	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdentifier();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node["extends"] = [];
	  node.mixins = [];
	
	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  if (this.isContextual("mixins")) {
	    this.next();
	    do {
	      node.mixins.push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  node.body = this.flowParseObjectType(allowStatic);
	};
	
	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();
	
	  node.id = this.parseIdentifier();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }
	
	  return this.finishNode(node, "InterfaceExtends");
	};
	
	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};
	
	// Type aliases
	
	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdentifier();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();
	
	  return this.finishNode(node, "TypeAlias");
	};
	
	// Type annotations
	
	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  return this.finishNode(node, "TypeParameterDeclaration");
	};
	
	pp.flowParseExistentialTypeParam = function () {
	  if (this.match(_tokenizerTypes.types.star)) {
	    var node = this.startNode();
	    this.next();
	    return this.finishNode(node, "ExistentialTypeParam");
	  }
	};
	
	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];
	
	  this.state.inType = true;
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  this.state.inType = oldInType;
	
	  return this.finishNode(node, "TypeParameterInstantiation");
	};
	
	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	};
	
	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;
	
	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();
	
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};
	
	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();
	
	  return this.finishNode(node, "FunctionTypeAnnotation");
	};
	
	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};
	
	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};
	
	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node = undefined;
	  var propertyKey = undefined;
	  var isStatic = undefined;
	
	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var optional = false;
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }
	
	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdentifier();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }
	
	  this.expect(_tokenizerTypes.types.braceR);
	
	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};
	
	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};
	
	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);
	
	  node.typeParameters = null;
	  node.id = id;
	
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdentifier();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }
	
	  return this.finishNode(node, "GenericTypeAnnotation");
	};
	
	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};
	
	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};
	
	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdentifier();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};
	
	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};
	
	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");
	
	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");
	
	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");
	
	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");
	
	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");
	
	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");
	
	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};
	
	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp = undefined;
	  var type = undefined;
	  var isGroupedType = false;
	
	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
	
	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();
	
	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();
	
	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);
	
	        this.expect(_tokenizerTypes.types.arrow);
	
	        node.returnType = this.flowParseType();
	
	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }
	
	    case _tokenizerTypes.types.parenL:
	      this.next();
	
	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }
	
	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);
	
	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }
	
	        return type;
	      }
	
	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;
	
	      this.expect(_tokenizerTypes.types.parenR);
	
	      this.expect(_tokenizerTypes.types.arrow);
	
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	
	      return this.finishNode(node, "FunctionTypeAnnotation");
	
	    case _tokenizerTypes.types.string:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types.num:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "NumericLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._null:
	      node.value = this.match(_tokenizerTypes.types._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._this:
	      node.value = this.match(_tokenizerTypes.types._this);
	      this.next();
	      return this.finishNode(node, "ThisTypeAnnotation");
	
	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }
	
	  this.unexpected();
	};
	
	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};
	
	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};
	
	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};
	
	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};
	
	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};
	
	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdentifier();
	  var isOptionalParam = false;
	
	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }
	
	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }
	
	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }
	
	  return ident;
	};
	
	exports["default"] = function (instance) {
	  // plain function return types: function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, allowExpression);
	    };
	  });
	
	  // interfaces
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.state.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });
	
	  // declares, interfaces and type aliases
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }
	
	      return inner.call(this, node, expr);
	    };
	  });
	
	  // export type
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
	    };
	  });
	
	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow /*:: ?*/) {
	      var canBeArrow = this.state.potentialArrowAt = startPos;
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	
	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }
	
	        if (canBeArrow && this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var params = node.type === "SequenceExpression" ? node.expressions : [node];
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });
	
	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";
	
	        var declarationNode = this.startNode();
	        this.next();
	
	        if (this.match(_tokenizerTypes.types.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else if (this.isContextual("interface")) {
	        node.exportKind = "type";
	        var declarationNode = this.startNode();
	        this.next();
	        return this.flowParseInterface(declarationNode);
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });
	
	  instance.extend("parseClassId", function (inner) {
	    return function (node) {
	      inner.apply(this, arguments);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });
	
	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });
	
	  // ensure that inside flow types, we bypass the jsx parser plugin
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });
	
	  // don't lex any token as a jsx one inside a flow type
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });
	
	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }
	
	  instance.extend("toAssignable", function (inner) {
	    return function (node) {
	      if (node.type === "TypeCastExpression") {
	        return typeCastToParameter(node);
	      } else {
	        return inner.apply(this, arguments);
	      }
	    };
	  });
	
	  // turn type casts that we found in function parameter head into type annotated params
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });
	
	  // this is a list of nodes, from something like a call expression, we need to filter the
	  // type casts that we've found that are illegal in this context
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }
	
	      return exprList;
	    };
	  });
	
	  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
	  // the position where this function is cal;ed
	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("checkLVal", function (inner) {
	    return function (node) {
	      if (node.type !== "TypeCastExpression") {
	        return inner.apply(this, arguments);
	      }
	    };
	  });
	
	  // parse class property type annotations
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });
	
	  // determine whether or not we're currently in the position where a class property would appear
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  // parse type parameters for class methods
	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      if (this.isRelational("<")) {
	        method.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      this.parseMethod(method, isGenerator, isAsync);
	      classBody.body.push(this.finishNode(method, "ClassMethod"));
	    };
	  });
	
	  // parse a the super class type parameters and implements
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdentifier();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });
	
	  // parse type parameters for object method shorthand
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters = undefined;
	
	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }
	
	      inner.apply(this, arguments);
	
	      // add typeParameters if we found them
	      if (typeParameters) {
	        (prop.value || prop).typeParameters = typeParameters;
	      }
	    };
	  });
	
	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });
	
	  // parse typeof and type imports
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";
	
	      var kind = null;
	      if (this.match(_tokenizerTypes.types._typeof)) {
	        kind = "typeof";
	      } else if (this.isContextual("type")) {
	        kind = "type";
	      }
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }
	
	      inner.call(this, node);
	    };
	  });
	
	  // parse function type parameters - function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });
	
	  // parse flow type annotations on variable declarator heads - let foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });
	
	  // parse the return type of an async arrow function - let foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, call);
	    };
	  });
	
	  // todo description
	  instance.extend("shouldParseAsyncArrow", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  // handle return types for arrow functions
	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;
	
	      if (canBeArrow && this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // let foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);
	
	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // let foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);
	
	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];
	},{"../parser":5,"../tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],12:[function(require,module,exports){
	"use strict";
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _xhtml = require("./xhtml");
	
	var _xhtml2 = _interopRequireDefault(_xhtml);
	
	var _tokenizerTypes = require("../../tokenizer/types");
	
	var _tokenizerContext = require("../../tokenizer/context");
	
	var _parser = require("../../parser");
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var _utilIdentifier = require("../../util/identifier");
	
	var _utilWhitespace = require("../../util/whitespace");
	
	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;
	
	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);
	
	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");
	
	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};
	
	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};
	
	var pp = _parser2["default"].prototype;
	
	// Reads inline JSX contents token.
	
	pp.jsxReadToken = function () {
	  var out = "";
	  var chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	
	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);
	
	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;
	
	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};
	
	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out = undefined;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;
	
	  return out;
	};
	
	pp.jsxReadString = function (quote) {
	  var out = "";
	  var chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};
	
	pp.jsxReadEntity = function () {
	  var str = "";
	  var count = 0;
	  var entity = undefined;
	  var ch = this.input[this.state.pos];
	
	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};
	
	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.
	
	pp.jsxReadWord = function () {
	  var ch = undefined;
	  var start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};
	
	// Transforms JSX element name to string.
	
	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }
	
	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }
	
	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}
	
	// Parse next token as JSX identifier
	
	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};
	
	// Parse namespaced identifier.
	
	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};
	
	// Parses element name in any form - namespaced, member
	// or single identifier.
	
	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};
	
	// Parses any type of JSX attribute value.
	
	pp.jsxParseAttributeValue = function () {
	  var node = undefined;
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }
	
	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      node = this.parseExprAtom();
	      node.extra = null;
	      return node;
	
	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};
	
	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).
	
	pp.jsxParseEmptyExpression = function () {
	  var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
	  return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
	};
	
	// Parses JSX expression enclosed into curly brackets.
	
	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};
	
	// Parses following JSX attribute name-value pair.
	
	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};
	
	// Parses JSX opening tag starting after "<".
	
	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};
	
	// Parses JSX closing tag starting after "</".
	
	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};
	
	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.
	
	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;
	
	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;
	
	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;
	
	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;
	
	        default:
	          this.unexpected();
	      }
	    }
	
	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }
	
	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};
	
	// Parses entire JSX element from current position.
	
	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};
	
	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value, "JSXText");
	        // https://github.com/babel/babel/issues/2078
	        node.extra = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });
	
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();
	
	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }
	
	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }
	
	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }
	
	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }
	
	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }
	
	      return inner.call(this, code);
	    };
	  });
	
	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];
	},{"../../parser":5,"../../tokenizer/context":14,"../../tokenizer/types":17,"../../util/identifier":18,"../../util/whitespace":20,"./xhtml":13,"babel-runtime/helpers/interop-require-default":26}],13:[function(require,module,exports){
	"use strict";
	
	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];
	},{}],14:[function(require,module,exports){
	/* @flow */
	
	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design
	
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var _types = require("./types");
	
	var _utilWhitespace = require("../util/whitespace");
	
	var TokContext = function TokContext(token /*: string*/, isExpr /*:: ?: boolean*/, preserveSpace /*:: ?: boolean*/, override /*:: ?: Function*/) {
	  _classCallCheck(this, TokContext);
	
	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};
	
	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};
	
	exports.types = types;
	// Token-specific context update code
	
	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }
	
	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};
	
	_types.types.name.updateContext = function (prevType) {
	  this.state.exprAllowed = false;
	
	  if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
	    if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.end))) {
	      this.state.exprAllowed = true;
	    }
	  }
	};
	
	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};
	
	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};
	
	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }
	
	  this.state.exprAllowed = false;
	};
	
	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};
	},{"../util/whitespace":20,"./types":17,"babel-runtime/helpers/class-call-check":24}],15:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];
	
	exports.__esModule = true;
	
	var _utilIdentifier = require("../util/identifier");
	
	var _types = require("./types");
	
	var _context = require("./context");
	
	var _utilLocation = require("../util/location");
	
	var _utilWhitespace = require("../util/whitespace");
	
	var _state = require("./state");
	
	var _state2 = _interopRequireDefault(_state);
	
	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.
	
	/*:: import type { TokenType } from "./types";*/
	var Token = function Token(state) {
	  _classCallCheck(this, Token);
	
	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}
	
	// ## Tokenizer
	
	;
	
	exports.Token = Token;
	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  } else {
	    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	  }
	}
	
	var Tokenizer = (function () {
	  function Tokenizer(options, input) {
	    _classCallCheck(this, Tokenizer);
	
	    this.state = new _state2["default"]();
	    this.state.init(options, input);
	  }
	
	  // Move to the next token
	
	  Tokenizer.prototype.next = function next() {
	    if (!this.isLookahead) {
	      this.state.tokens.push(new Token(this.state));
	    }
	
	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };
	
	  // TODO
	
	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  // TODO
	
	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };
	
	  // TODO
	
	  Tokenizer.prototype.isKeyword = function isKeyword(word) {
	    return _utilIdentifier.isKeyword(word);
	  };
	
	  // TODO
	
	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone(true);
	
	    this.isLookahead = true;
	    this.next();
	    this.isLookahead = false;
	
	    var curr = this.state.clone(true);
	    this.state = old;
	    return curr;
	  };
	
	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).
	
	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.state.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };
	
	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };
	
	  // Read a single token, updating the parser object's token-related
	  // properties.
	
	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();
	
	    this.state.containsOctal = false;
	    this.state.octalPosition = null;
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);
	
	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };
	
	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code) || code === 92 /* '\' */) {
	        return this.readWord();
	      } else {
	      return this.getTokenFromCode(code);
	    }
	  };
	
	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };
	
	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc)
	    };
	
	    if (!this.isLookahead) {
	      this.state.tokens.push(comment);
	      this.state.comments.push(comment);
	    }
	
	    this.addComment(comment);
	  };
	
	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");
	
	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }
	
	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }
	
	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.
	
	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;
	
	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }
	
	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;
	
	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;
	
	            case 47:
	              this.skipLineComment(2);
	              break;
	
	            default:
	              break loop;
	          }
	          break;
	
	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };
	
	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.
	
	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;
	
	    this.updateContext(prevType);
	  };
	
	  // ### Token reading
	
	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //
	
	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }
	
	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };
	
	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === 42 && this.hasPlugin("exponentiationOperator")) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }
	
	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }
	
	    return this.finishOp(type, width);
	  };
	
	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };
	
	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }
	
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;
	
	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }
	
	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }
	
	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }
	
	    return this.finishOp(_types.types.relational, size);
	  };
	
	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };
	
	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();
	
	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);
	
	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }
	
	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);
	
	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);
	
	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);
	
	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);
	
	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.
	
	      case 47:
	        // '/'
	        return this.readToken_slash();
	
	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);
	
	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);
	
	      case 94:
	        // '^'
	        return this.readToken_caret();
	
	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);
	
	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);
	
	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);
	
	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }
	
	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };
	
	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };
	
	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  };
	
	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.
	
	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;
	
	    return total;
	  };
	
	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read an integer, octal integer, or floating-point number.
	
	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	
	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.state.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read a string value, interpreting backslash-escapes.
	
	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;
	
	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };
	
	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };
	
	  // Reads template string tokens.
	
	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };
	
	  // Used to read escaped characters
	
	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0) {
	            if (!this.state.containsOctal) {
	              this.state.containsOctal = true;
	              this.state.octalPosition = this.state.pos - 2;
	            }
	            if (this.state.strict || inTemplate) {
	              this.raise(this.state.pos - 2, "Octal literal in strict mode");
	            }
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };
	
	  // Used to read character escape sequences ('\x', '\u', '\U').
	
	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };
	
	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.
	
	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;
	
	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;
	
	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }
	
	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }
	
	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };
	
	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.
	
	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) {
	      type = _types.keywords[word];
	    }
	    return this.finishToken(type, word);
	  };
	
	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }
	
	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }
	
	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
	      return true;
	    }
	
	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }
	
	    return !this.state.exprAllowed;
	  };
	
	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };
	
	  return Tokenizer;
	})();
	
	exports["default"] = Tokenizer;
	},{"../util/identifier":18,"../util/location":19,"../util/whitespace":20,"./context":14,"./state":16,"./types":17,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],16:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var _utilLocation = require("../util/location");
	
	var _context = require("./context");
	
	var _types = require("./types");
	
	/*:: import type { TokContext } from "./context";*/
	/*:: import type { Token } from "./index";*/
	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }
	
	  State.prototype.init = function init(options /*: Object*/, input /*: string*/) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";
	
	    this.input = input;
	
	    this.potentialArrowAt = -1;
	
	    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;
	
	    this.labels = [];
	
	    this.decorators = [];
	
	    this.tokens = [];
	
	    this.comments = [];
	
	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];
	
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;
	
	    this.type = _types.types.eof;
	    this.value = null;
	    this.start = this.end = this.pos;
	    this.startLoc = this.endLoc = this.curPosition();
	
	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;
	
	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;
	
	    this.containsEsc = this.containsOctal = false;
	    this.octalPosition = null;
	
	    return this;
	  };
	
	  // TODO
	
	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };
	
	  State.prototype.clone = function clone(skipArrays /*:: ?*/) {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];
	
	      if ((!skipArrays || key === "context") && Array.isArray(val)) {
	        val = val.slice();
	      }
	
	      state[key] = val;
	    }
	    return state;
	  };
	
	  return State;
	})();
	
	exports["default"] = State;
	module.exports = exports["default"];
	
	// TODO
	
	// Used to signify the start of a potential arrow function
	
	// Flags to track whether we are in a function, a generator.
	
	// Labels in scope.
	
	// Leading decorators.
	
	// Token store.
	
	// Comment store.
	
	// Comment attachment store
	
	// The current position of the tokenizer in the input.
	
	// Properties of the current token:
	// Its type
	
	// For tokens that include more information than their type, the value
	
	// Its start and end offset
	
	// And, if locations are used, the {line, column} object
	// corresponding to those offsets
	
	// Position information for the previous token
	
	// The context stack is used to superficially track syntactic
	// context to predict whether a regular expression is allowed in a
	// given position.
	
	// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.
	
	// TODO
	},{"../util/location":19,"./context":14,"./types":17,"babel-runtime/helpers/class-call-check":24}],17:[function(require,module,exports){
	// ## Token types
	
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.
	
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	
	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  _classCallCheck(this, TokenType);
	
	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};
	
	exports.TokenType = TokenType;
	
	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };
	
	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),
	
	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),
	
	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.
	
	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};
	
	exports.types = types;
	// Map keyword names to token types.
	
	var keywords = {};
	
	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}
	
	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true, beforeExpr: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });
	},{"babel-runtime/helpers/class-call-check":24}],18:[function(require,module,exports){
	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}
	
	// Reserved word lists for various dialects of the language
	
	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};
	
	exports.reservedWords = reservedWords;
	// And the keywords
	
	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");
	
	exports.isKeyword = isKeyword;
	// ## Character categories
	
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.
	
	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";
	
	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	
	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];
	
	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}
	
	// Test whether a given character code starts an identifier.
	
	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}
	
	// Test whether a given character is part of an identifier.
	
	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}
	},{}],19:[function(require,module,exports){
	"use strict";
	
	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
	
	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;
	
	var _whitespace = require("./whitespace");
	
	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.
	
	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);
	
	  this.line = line;
	  this.column = col;
	};
	
	exports.Position = Position;
	
	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);
	
	  this.start = start;
	  this.end = end;
	}
	
	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.
	
	;
	
	exports.SourceLocation = SourceLocation;
	
	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}
	},{"./whitespace":20,"babel-runtime/helpers/class-call-check":24}],20:[function(require,module,exports){
	/* @flow */
	
	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");
	
	exports.lineBreakG = lineBreakG;
	
	function isNewLine(code /*: number*/) /*: boolean*/ {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}
	
	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;
	},{}],21:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
	},{"core-js/library/fn/get-iterator":27}],22:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
	},{"core-js/library/fn/object/create":28}],23:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
	},{"core-js/library/fn/object/set-prototype-of":29}],24:[function(require,module,exports){
	"use strict";
	
	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	exports.__esModule = true;
	},{}],25:[function(require,module,exports){
	"use strict";
	
	var _Object$create = require("babel-runtime/core-js/object/create")["default"];
	
	var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];
	
	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }
	
	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	exports.__esModule = true;
	},{"babel-runtime/core-js/object/create":22,"babel-runtime/core-js/object/set-prototype-of":23}],26:[function(require,module,exports){
	"use strict";
	
	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};
	
	exports.__esModule = true;
	},{}],27:[function(require,module,exports){
	require('../modules/web.dom.iterable');
	require('../modules/es6.string.iterator');
	module.exports = require('../modules/core.get-iterator');
	},{"../modules/core.get-iterator":63,"../modules/es6.string.iterator":66,"../modules/web.dom.iterable":67}],28:[function(require,module,exports){
	var $ = require('../../modules/$');
	module.exports = function create(P, D){
	  return $.create(P, D);
	};
	},{"../../modules/$":50}],29:[function(require,module,exports){
	require('../../modules/es6.object.set-prototype-of');
	module.exports = require('../../modules/$.core').Object.setPrototypeOf;
	},{"../../modules/$.core":35,"../../modules/es6.object.set-prototype-of":65}],30:[function(require,module,exports){
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	},{}],31:[function(require,module,exports){
	module.exports = function(){ /* empty */ };
	},{}],32:[function(require,module,exports){
	var isObject = require('./$.is-object');
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	},{"./$.is-object":45}],33:[function(require,module,exports){
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = require('./$.cof')
	  , TAG = require('./$.wks')('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	},{"./$.cof":34,"./$.wks":61}],34:[function(require,module,exports){
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	},{}],35:[function(require,module,exports){
	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	},{}],36:[function(require,module,exports){
	// optional / simple context binding
	var aFunction = require('./$.a-function');
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	},{"./$.a-function":30}],37:[function(require,module,exports){
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	},{}],38:[function(require,module,exports){
	// Thank's IE8 for his funny defineProperty
	module.exports = !require('./$.fails')(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	},{"./$.fails":40}],39:[function(require,module,exports){
	var global    = require('./$.global')
	  , core      = require('./$.core')
	  , ctx       = require('./$.ctx')
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;
	},{"./$.core":35,"./$.ctx":36,"./$.global":41}],40:[function(require,module,exports){
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	},{}],41:[function(require,module,exports){
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	},{}],42:[function(require,module,exports){
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	},{}],43:[function(require,module,exports){
	var $          = require('./$')
	  , createDesc = require('./$.property-desc');
	module.exports = require('./$.descriptors') ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	},{"./$":50,"./$.descriptors":38,"./$.property-desc":52}],44:[function(require,module,exports){
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = require('./$.cof');
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	},{"./$.cof":34}],45:[function(require,module,exports){
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	},{}],46:[function(require,module,exports){
	'use strict';
	var $              = require('./$')
	  , descriptor     = require('./$.property-desc')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	},{"./$":50,"./$.hide":43,"./$.property-desc":52,"./$.set-to-string-tag":55,"./$.wks":61}],47:[function(require,module,exports){
	'use strict';
	var LIBRARY        = require('./$.library')
	  , $export        = require('./$.export')
	  , redefine       = require('./$.redefine')
	  , hide           = require('./$.hide')
	  , has            = require('./$.has')
	  , Iterators      = require('./$.iterators')
	  , $iterCreate    = require('./$.iter-create')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , getProto       = require('./$').getProto
	  , ITERATOR       = require('./$.wks')('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	},{"./$":50,"./$.export":39,"./$.has":42,"./$.hide":43,"./$.iter-create":46,"./$.iterators":49,"./$.library":51,"./$.redefine":53,"./$.set-to-string-tag":55,"./$.wks":61}],48:[function(require,module,exports){
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	},{}],49:[function(require,module,exports){
	module.exports = {};
	},{}],50:[function(require,module,exports){
	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};
	},{}],51:[function(require,module,exports){
	module.exports = true;
	},{}],52:[function(require,module,exports){
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	},{}],53:[function(require,module,exports){
	module.exports = require('./$.hide');
	},{"./$.hide":43}],54:[function(require,module,exports){
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = require('./$').getDesc
	  , isObject = require('./$.is-object')
	  , anObject = require('./$.an-object');
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};
	},{"./$":50,"./$.an-object":32,"./$.ctx":36,"./$.is-object":45}],55:[function(require,module,exports){
	var def = require('./$').setDesc
	  , has = require('./$.has')
	  , TAG = require('./$.wks')('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	},{"./$":50,"./$.has":42,"./$.wks":61}],56:[function(require,module,exports){
	var global = require('./$.global')
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	},{"./$.global":41}],57:[function(require,module,exports){
	var toInteger = require('./$.to-integer')
	  , defined   = require('./$.defined');
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	},{"./$.defined":37,"./$.to-integer":58}],58:[function(require,module,exports){
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	},{}],59:[function(require,module,exports){
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = require('./$.iobject')
	  , defined = require('./$.defined');
	module.exports = function(it){
	  return IObject(defined(it));
	};
	},{"./$.defined":37,"./$.iobject":44}],60:[function(require,module,exports){
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	},{}],61:[function(require,module,exports){
	var store  = require('./$.shared')('wks')
	  , uid    = require('./$.uid')
	  , Symbol = require('./$.global').Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};
	},{"./$.global":41,"./$.shared":56,"./$.uid":60}],62:[function(require,module,exports){
	var classof   = require('./$.classof')
	  , ITERATOR  = require('./$.wks')('iterator')
	  , Iterators = require('./$.iterators');
	module.exports = require('./$.core').getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	},{"./$.classof":33,"./$.core":35,"./$.iterators":49,"./$.wks":61}],63:[function(require,module,exports){
	var anObject = require('./$.an-object')
	  , get      = require('./core.get-iterator-method');
	module.exports = require('./$.core').getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};
	},{"./$.an-object":32,"./$.core":35,"./core.get-iterator-method":62}],64:[function(require,module,exports){
	'use strict';
	var addToUnscopables = require('./$.add-to-unscopables')
	  , step             = require('./$.iter-step')
	  , Iterators        = require('./$.iterators')
	  , toIObject        = require('./$.to-iobject');
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	},{"./$.add-to-unscopables":31,"./$.iter-define":47,"./$.iter-step":48,"./$.iterators":49,"./$.to-iobject":59}],65:[function(require,module,exports){
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = require('./$.export');
	$export($export.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
	},{"./$.export":39,"./$.set-proto":54}],66:[function(require,module,exports){
	'use strict';
	var $at  = require('./$.string-at')(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	require('./$.iter-define')(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	},{"./$.iter-define":47,"./$.string-at":57}],67:[function(require,module,exports){
	require('./es6.array.iterator');
	var Iterators = require('./$.iterators');
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
	},{"./$.iterators":49,"./es6.array.iterator":64}]},{},[1])(1)
	});

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/internal-plugins/block-hoist.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _plugin = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/plugin.js");
	
	var _plugin2 = _interopRequireDefault(_plugin);
	
	var _lodashCollectionSortBy = __webpack_require__("./node_modules/lodash/collection/sortBy.js");
	
	var _lodashCollectionSortBy2 = _interopRequireDefault(_lodashCollectionSortBy);
	
	exports["default"] = new _plugin2["default"]({
	  /**
	   * [Please add a description.]
	   *
	   * Priority:
	   *
	   *  - 0 We want this to be at the **very** bottom
	   *  - 1 Default node position
	   *  - 2 Priority over normal nodes
	   *  - 3 We want this to be at the **very** top
	   */
	
	  visitor: {
	    Block: {
	      exit: function exit(_ref) {
	        var node = _ref.node;
	
	        var hasChange = false;
	        for (var i = 0; i < node.body.length; i++) {
	          var bodyNode = node.body[i];
	          if (bodyNode && bodyNode._blockHoist != null) {
	            hasChange = true;
	            break;
	          }
	        }
	        if (!hasChange) return;
	
	        node.body = _lodashCollectionSortBy2["default"](node.body, function (bodyNode) {
	          var priority = bodyNode && bodyNode._blockHoist;
	          if (priority == null) priority = 1;
	          if (priority === true) priority = 2;
	
	          // Higher priorities should move toward the top.
	          return -1 * priority;
	        });
	      }
	    }
	  }
	});
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/transformation/internal-plugins/shadow-functions.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _plugin = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/transformation/plugin.js");
	
	var _plugin2 = _interopRequireDefault(_plugin);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = new _plugin2["default"]({
	  visitor: {
	    ThisExpression: function ThisExpression(path) {
	      remap(path, "this", function () {
	        return t.thisExpression();
	      });
	    },
	
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      if (path.node.name === "arguments") {
	        remap(path, "arguments", function () {
	          return t.identifier("arguments");
	        });
	      }
	    }
	  }
	});
	
	function shouldShadow(path, shadowPath) {
	  if (path.is("_forceShadow")) {
	    return true;
	  } else {
	    return shadowPath && !shadowPath.isArrowFunctionExpression();
	  }
	}
	
	function remap(path, key, create) {
	  // ensure that we're shadowed
	  var shadowPath = path.inShadow(key);
	  if (!shouldShadow(path, shadowPath)) return;
	
	  var shadowFunction = path.node._shadowedFunctionLiteral;
	  var currentFunction = undefined;
	
	  var fnPath = path.findParent(function (path) {
	    if (path.isProgram() || path.isFunction()) {
	      // catch current function in case this is the shadowed one and we can ignore it
	      currentFunction = currentFunction || path;
	    }
	
	    if (path.isProgram()) {
	      return true;
	    } else if (path.isFunction()) {
	      if (shadowFunction) {
	        return path === shadowFunction || path.node === shadowFunction.node;
	      } else {
	        return !path.is("shadow");
	      }
	    }
	
	    return false;
	  });
	
	  // no point in realiasing if we're in this function
	  if (fnPath === currentFunction) return;
	
	  var cached = fnPath.getData(key);
	  if (cached) return path.replaceWith(cached);
	
	  var init = create();
	  var id = path.scope.generateUidIdentifier(key);
	
	  fnPath.setData(key, id);
	  fnPath.scope.push({ id: id, init: init });
	
	  return path.replaceWith(id);
	}
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/lib/tools/build-external-helpers.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelpers = __webpack_require__("./node_modules/babel-helpers/lib/index.js");
	
	var helpers = _interopRequireWildcard(_babelHelpers);
	
	var _babelGenerator = __webpack_require__("./node_modules/babel-generator/lib/index.js");
	
	var _babelGenerator2 = _interopRequireDefault(_babelGenerator);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var buildUmdWrapper = _babelTemplate2["default"]("\n  (function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === \"object\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n");
	
	function buildGlobal(namespace, builder) {
	  var body = [];
	  var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
	  var tree = t.program([t.expressionStatement(t.callExpression(container, [helpers.get("selfGlobal")]))]);
	
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));
	
	  builder(body);
	
	  return tree;
	}
	
	function buildUmd(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));
	
	  builder(body);
	
	  return t.program([buildUmdWrapper({
	    FACTORY_PARAMETERS: t.identifier("global"),
	    BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression([])),
	    COMMON_ARGUMENTS: t.identifier("exports"),
	    AMD_ARGUMENTS: t.arrayExpression([t.stringLiteral("exports")]),
	    FACTORY_BODY: body,
	    UMD_ROOT: t.identifier("this")
	  })]);
	}
	
	function buildVar(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression([]))]));
	  builder(body);
	  body.push(t.expressionStatement(namespace));
	  return t.program(body);
	}
	
	function buildHelpers(body, namespace, whitelist) {
	  _lodashCollectionEach2["default"](helpers.list, function (name) {
	    if (whitelist && whitelist.indexOf(name) < 0) return;
	
	    var key = t.identifier(name);
	    body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), helpers.get(name))));
	  });
	}
	
	exports["default"] = function (whitelist /*:: ?: Array<string>*/) {
	  var outputType /*: "global" | "umd" | "var"*/ = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];
	
	  var namespace = t.identifier("babelHelpers");
	
	  var builder = function builder(body) {
	    return buildHelpers(body, namespace, whitelist);
	  };
	
	  var tree = undefined;
	
	  var build = ({
	    global: buildGlobal,
	    umd: buildUmd,
	    "var": buildVar
	  })[outputType];
	
	  if (build) {
	    tree = build(namespace, builder);
	  } else {
	    throw new Error(messages.get("unsupportedOutputType", outputType));
	  }
	
	  return _babelGenerator2["default"](tree).code;
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-preset-es2015/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-template-literals/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-literals/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-function-name/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-arrow-functions/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-block-scoped-functions/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-object-super/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-shorthand-properties/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-computed-properties/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-for-of/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-sticky-regex/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-unicode-regex/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-check-es2015-constants/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-spread/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-parameters/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-block-scoping/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-typeof-symbol/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/lib/index.js"),
	    [__webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/index.js"), { async: false, asyncGenerators: false }],
	  ]
	};


/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-template-literals/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref4) {
	  var t = _ref4.types;
	
	  function isString(node) {
	    return t.isLiteral(node) && typeof node.value === "string";
	  }
	
	  function buildBinaryExpression(left, right) {
	    return t.binaryExpression("+", left, right);
	  }
	
	  return {
	    visitor: {
	      TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
	        var node = path.node;
	
	        var quasi = node.quasi;
	        var args = [];
	
	        var strings = [];
	        var raw = [];
	
	        for (var _iterator = (quasi.quasis /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var elem = _ref;
	
	          strings.push(t.stringLiteral(elem.value.cooked));
	          raw.push(t.stringLiteral(elem.value.raw));
	        }
	
	        strings = t.arrayExpression(strings);
	        raw = t.arrayExpression(raw);
	
	        var templateName = "taggedTemplateLiteral";
	        if (state.opts.loose) templateName += "Loose";
	
	        var templateObject = state.file.addTemplateObject(templateName, strings, raw);
	        args.push(templateObject);
	
	        args = args.concat(quasi.expressions);
	
	        path.replaceWith(t.callExpression(node.tag, args));
	      },
	
	      TemplateLiteral: function TemplateLiteral(path, state) {
	        var nodes /*: Array<Object>*/ = [];
	
	        var expressions = path.get("expressions");
	
	        for (var _iterator2 = (path.node.quasis /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var elem = _ref2;
	
	          nodes.push(t.stringLiteral(elem.value.cooked));
	
	          var expr = expressions.shift();
	          if (expr) {
	            if (state.opts.spec && !expr.isBaseType("string") && !expr.isBaseType("number")) {
	              nodes.push(t.callExpression(t.identifier("String"), [expr.node]));
	            } else {
	              nodes.push(expr.node);
	            }
	          }
	        }
	
	        // filter out empty string literals
	        nodes = nodes.filter(function (n) {
	          return !t.isLiteral(n, { value: "" });
	        });
	
	        // since `+` is left-to-right associative
	        // ensure the first node is a string if first/second isn't
	        if (!isString(nodes[0]) && !isString(nodes[1])) {
	          nodes.unshift(t.stringLiteral(""));
	        }
	
	        if (nodes.length > 1) {
	          var root = buildBinaryExpression(nodes.shift(), nodes.shift());
	
	          for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;
	
	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }
	
	            var node = _ref3;
	
	            root = buildBinaryExpression(root, node);
	          }
	
	          path.replaceWith(root);
	        } else {
	          path.replaceWith(nodes[0]);
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-literals/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    visitor: {
	      NumericLiteral: function NumericLiteral(_ref) {
	        var node = _ref.node;
	
	        // number octal like 0b10 or 0o70
	        if (node.extra && /^0[ob]/i.test(node.extra.raw)) {
	          node.extra = undefined;
	        }
	      },
	
	      StringLiteral: function StringLiteral(_ref2) {
	        var node = _ref2.node;
	
	        // unicode escape
	        if (node.extra && /\\[u]/gi.test(node.extra.raw)) {
	          node.extra = undefined;
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-function-name/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperFunctionName = __webpack_require__("./node_modules/babel-helper-function-name/lib/index.js");
	
	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
	
	exports["default"] = function () {
	  return {
	    visitor: {
	      "ArrowFunctionExpression|FunctionExpression": {
	        exit: function exit(path) {
	          if (path.key !== "value" && !path.parentPath.isObjectProperty()) {
	            var replacement = _babelHelperFunctionName2["default"](path);
	            if (replacement) path.replaceWith(replacement);
	          }
	        }
	      },
	
	      ObjectProperty: function ObjectProperty(path) {
	        var value = path.get("value");
	        if (value.isFunction()) {
	          var newNode = _babelHelperFunctionName2["default"](value);
	          if (newNode) value.replaceWith(newNode);
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-function-name/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperGetFunctionArity = __webpack_require__("./node_modules/babel-helper-get-function-arity/lib/index.js");
	
	var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var buildPropertyMethodAssignmentWrapper = _babelTemplate2["default"]("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");
	
	var buildGeneratorPropertyMethodAssignmentWrapper = _babelTemplate2["default"]("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");
	
	var visitor = {
	  "ReferencedIdentifier|BindingIdentifier": function ReferencedIdentifierBindingIdentifier(path, state) {
	    // check if this node matches our function id
	    if (path.node.name !== state.name) return;
	
	    // check that we don't have a local variable declared as that removes the need
	    // for the wrapper
	    var localDeclar = path.scope.getBindingIdentifier(state.name);
	    if (localDeclar !== state.outerDeclar) return;
	
	    state.selfReference = true;
	    path.stop();
	  }
	};
	
	function wrap(state, method, id, scope) {
	  if (state.selfReference) {
	    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
	      // we can just munge the local binding
	      scope.rename(id.name);
	    } else {
	      // we don't currently support wrapping class expressions
	      if (!t.isFunction(method)) return;
	
	      // need to add a wrapper since we can't change the references
	      var build = buildPropertyMethodAssignmentWrapper;
	      if (method.generator) build = buildGeneratorPropertyMethodAssignmentWrapper;
	      var _template = build({
	        FUNCTION: method,
	        FUNCTION_ID: id,
	        FUNCTION_KEY: scope.generateUidIdentifier(id.name)
	      }).expression;
	      _template.callee._skipModulesRemap = true;
	
	      // shim in dummy params to retain function arity, if you try to read the
	      // source then you'll get the original since it's proxied so it's all good
	      var params = _template.callee.body.body[0].params;
	      for (var i = 0, len = _babelHelperGetFunctionArity2["default"](method); i < len; i++) {
	        params.push(scope.generateUidIdentifier("x"));
	      }
	
	      return _template;
	    }
	  }
	
	  method.id = id;
	  scope.getProgramParent().references[id.name] = true;
	}
	
	function visit(node, name, scope) {
	  var state = {
	    selfAssignment: false,
	    selfReference: false,
	    outerDeclar: scope.getBindingIdentifier(name),
	    references: [],
	    name: name
	  };
	
	  // check to see if we have a local binding of the id we're setting inside of
	  // the function, this is important as there are caveats associated
	
	  var binding = scope.getOwnBinding(name);
	
	  if (binding) {
	    if (binding.kind === "param") {
	      // safari will blow up in strict mode with code like:
	      //
	      //   let t = function t(t) {};
	      //
	      // with the error:
	      //
	      //   Cannot declare a parameter named 't' as it shadows the name of a
	      //   strict mode function.
	      //
	      // this isn't to the spec and they've invented this behaviour which is
	      // **extremely** annoying so we avoid setting the name if it has a param
	      // with the same id
	      state.selfReference = true;
	    } else {
	      // otherwise it's defined somewhere in scope like:
	      //
	      //   let t = function () {
	      //     let t = 2;
	      //   };
	      //
	      // so we can safely just set the id and move along as it shadows the
	      // bound function id
	    }
	  } else if (state.outerDeclar || scope.hasGlobal(name)) {
	      scope.traverse(node, visitor, state);
	    }
	
	  return state;
	}
	
	exports["default"] = function (_ref) {
	  var node = _ref.node;
	  var parent = _ref.parent;
	  var scope = _ref.scope;
	  var id = _ref.id;
	
	  // has an `id` so we don't need to infer one
	  if (node.id) return;
	
	  if ((t.isObjectProperty(parent) || t.isObjectMethod(parent, { kind: "method" })) && (!parent.computed || t.isLiteral(parent.key))) {
	    // { foo() {} };
	    id = parent.key;
	  } else if (t.isVariableDeclarator(parent)) {
	    // let foo = function () {};
	    id = parent.id;
	
	    if (t.isIdentifier(id)) {
	      var binding = scope.parent.getBinding(id.name);
	      if (binding && binding.constant && scope.getBinding(id.name) === binding) {
	        // always going to reference this method
	        node.id = id;
	        node.id[t.NOT_LOCAL_BINDING] = true;
	        return;
	      }
	    }
	  } else if (t.isAssignmentExpression(parent)) {
	    // foo = function () {};
	    id = parent.left;
	  } else if (!id) {
	    return;
	  }
	
	  var name = undefined;
	  if (id && t.isLiteral(id)) {
	    name = id.value;
	  } else if (id && t.isIdentifier(id)) {
	    name = id.name;
	  } else {
	    return;
	  }
	
	  name = t.toBindingIdentifierName(name);
	  id = t.identifier(name);
	
	  // The id shouldn't be considered a local binding to the function because
	  // we are simply trying to set the function name and not actually create
	  // a local binding.
	  id[t.NOT_LOCAL_BINDING] = true;
	
	  var state = visit(node, name, scope);
	  return wrap(state, node, id, scope) || node;
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-get-function-arity/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = function (node) /*: number*/ {
	  var params /*: Array<Object>*/ = node.params;
	  for (var i = 0; i < params.length; i++) {
	    var param = params[i];
	    if (t.isAssignmentPattern(param) || t.isRestElement(param)) {
	      return i;
	    }
	  }
	  return params.length;
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-arrow-functions/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  return {
	    visitor: {
	      ArrowFunctionExpression: function ArrowFunctionExpression(path, state) {
	        if (state.opts.spec) {
	          var node = path.node;
	
	          if (node.shadow) return;
	
	          node.shadow = { "this": false };
	          node.type = "FunctionExpression";
	
	          var boundThis = t.thisExpression();
	          boundThis._forceShadow = path;
	
	          // make sure that arrow function won't be instantiated
	          path.ensureBlock();
	          path.get("body").unshiftContainer("body", t.expressionStatement(t.callExpression(state.addHelper("newArrowCheck"), [t.thisExpression(), boundThis])));
	
	          path.replaceWith(t.callExpression(t.memberExpression(node, t.identifier("bind")), [t.thisExpression()]));
	        } else {
	          path.arrowFunctionToShadowed();
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-block-scoped-functions/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  function statementList(key, path) {
	    var paths /*: Array*/ = path.get(key);
	
	    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var _path = _ref;
	
	      var func = _path.node;
	      if (!_path.isFunctionDeclaration()) continue;
	
	      var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);
	
	      // hoist it up above everything else
	      declar._blockHoist = 2;
	
	      // todo: name this
	      func.id = null;
	
	      _path.replaceWith(declar);
	    }
	  }
	
	  return {
	    visitor: {
	      BlockStatement: function BlockStatement(path) {
	        var node = path.node;
	        var parent = path.parent;
	
	        if (t.isFunction(parent, { body: node }) || t.isExportDeclaration(parent)) {
	          return;
	        }
	
	        statementList("body", path);
	      },
	
	      SwitchCase: function SwitchCase(path) {
	        statementList("consequent", path);
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _loose = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/lib/loose.js");
	
	var _loose2 = _interopRequireDefault(_loose);
	
	var _vanilla = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/lib/vanilla.js");
	
	var _vanilla2 = _interopRequireDefault(_vanilla);
	
	var _babelHelperFunctionName = __webpack_require__("./node_modules/babel-helper-function-name/lib/index.js");
	
	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  // todo: investigate traversal requeueing
	  var VISITED = _Symbol();
	
	  return {
	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
	        if (!path.get("declaration").isClassDeclaration()) return;
	
	        var node = path.node;
	
	        var ref = node.declaration.id || path.scope.generateUidIdentifier("class");
	        node.declaration.id = ref;
	
	        // Split the class declaration and the export into two separate statements.
	        path.replaceWith(node.declaration);
	        path.insertAfter(t.exportDefaultDeclaration(ref));
	      },
	
	      ClassDeclaration: function ClassDeclaration(path) {
	        var node = path.node;
	
	        var ref = node.id || path.scope.generateUidIdentifier("class");
	
	        path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(ref, t.toExpression(node))]));
	      },
	
	      ClassExpression: function ClassExpression(path, state) {
	        var node = path.node;
	
	        if (node[VISITED]) return;
	
	        var inferred = _babelHelperFunctionName2["default"](path);
	        if (inferred && inferred !== node) return path.replaceWith(inferred);
	
	        node[VISITED] = true;
	
	        var Constructor = _vanilla2["default"];
	        if (state.opts.loose) Constructor = _loose2["default"];
	
	        path.replaceWith(new Constructor(path, state.file).run());
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/lib/loose.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _inherits = __webpack_require__("./node_modules/babel-runtime/helpers/inherits.js")["default"];
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperFunctionName = __webpack_require__("./node_modules/babel-helper-function-name/lib/index.js");
	
	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
	
	var _vanilla = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/lib/vanilla.js");
	
	var _vanilla2 = _interopRequireDefault(_vanilla);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var LooseClassTransformer = (function (_VanillaTransformer) {
	  _inherits(LooseClassTransformer, _VanillaTransformer);
	
	  function LooseClassTransformer() {
	    _classCallCheck(this, LooseClassTransformer);
	
	    _VanillaTransformer.apply(this, arguments);
	    this.isLoose = true;
	  }
	
	  LooseClassTransformer.prototype._processMethod = function _processMethod(node, scope) {
	    if (!node.decorators) {
	      // use assignments instead of define properties for loose classes
	
	      var classRef = this.classRef;
	      if (!node["static"]) classRef = t.memberExpression(classRef, t.identifier("prototype"));
	      var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));
	
	      var func = t.functionExpression(null, node.params, node.body, node.generator, node.async);
	      var key = t.toComputedKey(node, node.key);
	      if (t.isStringLiteral(key)) {
	        func = _babelHelperFunctionName2["default"]({
	          node: func,
	          id: key,
	          scope: scope
	        });
	      }
	
	      var expr = t.expressionStatement(t.assignmentExpression("=", methodName, func));
	      t.inheritsComments(expr, node);
	      this.body.push(expr);
	      return true;
	    }
	  };
	
	  return LooseClassTransformer;
	})(_vanilla2["default"]);
	
	exports["default"] = LooseClassTransformer;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/lib/vanilla.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelHelperReplaceSupers = __webpack_require__("./node_modules/babel-helper-replace-supers/lib/index.js");
	
	var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);
	
	var _babelHelperOptimiseCallExpression = __webpack_require__("./node_modules/babel-helper-optimise-call-expression/lib/index.js");
	
	var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);
	
	var _babelHelperDefineMap = __webpack_require__("./node_modules/babel-helper-define-map/lib/index.js");
	
	var defineMap = _interopRequireWildcard(_babelHelperDefineMap);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type { NodePath } from "babel-traverse";*/
	
	var buildDerivedConstructor = _babelTemplate2["default"]("\n  (function () {\n    super(...arguments);\n  })\n");
	
	var noMethodVisitor = {
	  "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
	    if (!path.is("shadow")) {
	      path.skip();
	    }
	  },
	
	  Method: function Method(path) {
	    path.skip();
	  }
	};
	
	var verifyConstructorVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
	  Super: function Super(path) {
	    if (this.isDerived && !this.hasBareSuper && !path.parentPath.isCallExpression({ callee: path.node })) {
	      throw path.buildCodeFrameError("'super.*' is not allowed before super()");
	    }
	  },
	
	  CallExpression: {
	    exit: function exit(path) {
	      if (path.get("callee").isSuper()) {
	        this.hasBareSuper = true;
	
	        if (!this.isDerived) {
	          throw path.buildCodeFrameError("super() is only allowed in a derived constructor");
	        }
	      }
	    }
	  },
	
	  ThisExpression: function ThisExpression(path) {
	    if (this.isDerived && !this.hasBareSuper) {
	      if (!path.inShadow("this")) {
	        throw path.buildCodeFrameError("'this' is not allowed before super()");
	      }
	    }
	  }
	}]);
	
	var findThisesVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
	  ThisExpression: function ThisExpression(path) {
	    this.superThises.push(path);
	  }
	}]);
	
	var ClassTransformer = (function () {
	  function ClassTransformer(path /*: NodePath*/, file) {
	    _classCallCheck(this, ClassTransformer);
	
	    this.parent = path.parent;
	    this.scope = path.scope;
	    this.node = path.node;
	    this.path = path;
	    this.file = file;
	
	    this.clearDescriptors();
	
	    this.instancePropBody = [];
	    this.instancePropRefs = {};
	    this.staticPropBody = [];
	    this.body = [];
	
	    this.bareSuperAfter = [];
	    this.bareSupers = [];
	
	    this.pushedConstructor = false;
	    this.pushedInherits = false;
	    this.isLoose = false;
	
	    this.superThises = [];
	
	    // class id
	    this.classId = this.node.id;
	
	    // this is the name of the binding that will **always** reference the class we've constructed
	    this.classRef = this.node.id || this.scope.generateUidIdentifier("class");
	
	    this.superName = this.node.superClass || t.identifier("Function");
	    this.isDerived = !!this.node.superClass;
	  }
	
	  ClassTransformer.prototype.run = function run() {
	    // istanbul ignore next
	
	    var _this = this;
	
	    var superName = this.superName;
	    var file = this.file;
	    var body = this.body;
	
	    //
	
	    var constructorBody = this.constructorBody = t.blockStatement([]);
	    this.constructor = this.buildConstructor();
	
	    //
	
	    var closureParams = [];
	    var closureArgs = [];
	
	    //
	    if (this.isDerived) {
	      closureArgs.push(superName);
	
	      superName = this.scope.generateUidIdentifierBasedOnNode(superName);
	      closureParams.push(superName);
	
	      this.superName = superName;
	    }
	
	    //
	    this.buildBody();
	
	    // make sure this class isn't directly called
	    constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("classCallCheck"), [t.thisExpression(), this.classRef])));
	
	    body = body.concat(this.staticPropBody.map(function (fn) {
	      return fn(_this.classRef);
	    }));
	
	    if (this.classId) {
	      // named class with only a constructor
	      if (body.length === 1) return t.toExpression(body[0]);
	    }
	
	    //
	    body.push(t.returnStatement(this.classRef));
	
	    var container = t.functionExpression(null, closureParams, t.blockStatement(body));
	    container.shadow = true;
	    return t.callExpression(container, closureArgs);
	  };
	
	  ClassTransformer.prototype.buildConstructor = function buildConstructor() {
	    var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
	    t.inherits(func, this.node);
	    return func;
	  };
	
	  ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable, kind, scope /*:: ?*/) {
	    if (kind === undefined) kind = "value";
	
	    var mutatorMap = undefined;
	    if (node["static"]) {
	      this.hasStaticDescriptors = true;
	      mutatorMap = this.staticMutatorMap;
	    } else {
	      this.hasInstanceDescriptors = true;
	      mutatorMap = this.instanceMutatorMap;
	    }
	
	    var map = defineMap.push(mutatorMap, node, kind, this.file, scope);
	
	    if (enumerable) {
	      map.enumerable = t.booleanLiteral(true);
	    }
	
	    return map;
	  };
	
	  /**
	   * [Please add a description.]
	   * https://www.youtube.com/watch?v=fWNaR-rxAic
	   */
	
	  ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
	    var hasConstructor = false;
	    var paths = this.path.get("body.body");
	    for (var _iterator = (paths /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var path = _ref;
	
	      hasConstructor = path.equals("kind", "constructor");
	      if (hasConstructor) break;
	    }
	    if (hasConstructor) return;
	
	    var params = undefined,
	        body = undefined;
	
	    if (this.isDerived) {
	      var _constructor = buildDerivedConstructor().expression;
	      params = _constructor.params;
	      body = _constructor.body;
	    } else {
	      params = [];
	      body = t.blockStatement([]);
	    }
	
	    this.path.get("body").unshiftContainer("body", t.classMethod("constructor", t.identifier("constructor"), params, body));
	  };
	
	  ClassTransformer.prototype.buildBody = function buildBody() {
	    this.constructorMeMaybe();
	    this.pushBody();
	    this.verifyConstructor();
	
	    if (this.userConstructor) {
	      var constructorBody = this.constructorBody;
	      constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
	      t.inherits(this.constructor, this.userConstructor);
	      t.inherits(constructorBody, this.userConstructor.body);
	    }
	
	    this.pushDescriptors();
	  };
	
	  ClassTransformer.prototype.pushBody = function pushBody() {
	    var classBodyPaths /*: Array<Object>*/ = this.path.get("body.body");
	
	    for (var _iterator2 = classBodyPaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var path = _ref2;
	
	      var node = path.node;
	
	      if (path.isClassProperty()) {
	        throw path.buildCodeFrameError("Missing class properties transform.");
	      }
	
	      if (node.decorators) {
	        throw path.buildCodeFrameError("Method has decorators, put the decorator plugin before the classes one.");
	      }
	
	      if (t.isClassMethod(node)) {
	        var isConstructor = node.kind === "constructor";
	
	        if (isConstructor) {
	          path.traverse(verifyConstructorVisitor, this);
	
	          if (!this.hasBareSuper && this.isDerived) {
	            throw path.buildCodeFrameError("missing super() call in constructor");
	          }
	        }
	
	        var replaceSupers = new _babelHelperReplaceSupers2["default"]({
	          forceSuperMemoisation: isConstructor,
	          methodPath: path,
	          methodNode: node,
	          objectRef: this.classRef,
	          superRef: this.superName,
	          isStatic: node["static"],
	          isLoose: this.isLoose,
	          scope: this.scope,
	          file: this.file
	        }, true);
	
	        replaceSupers.replace();
	
	        if (isConstructor) {
	          this.pushConstructor(replaceSupers, node, path);
	        } else {
	          this.pushMethod(node, path);
	        }
	      }
	    }
	  };
	
	  ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
	    this.hasInstanceDescriptors = false;
	    this.hasStaticDescriptors = false;
	
	    this.instanceMutatorMap = {};
	    this.staticMutatorMap = {};
	  };
	
	  ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
	    this.pushInherits();
	
	    var body = this.body;
	
	    var instanceProps = undefined;
	    var staticProps = undefined;
	
	    if (this.hasInstanceDescriptors) {
	      instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
	    }
	
	    if (this.hasStaticDescriptors) {
	      staticProps = defineMap.toClassObject(this.staticMutatorMap);
	    }
	
	    if (instanceProps || staticProps) {
	      if (instanceProps) instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
	      if (staticProps) staticProps = defineMap.toComputedObjectFromClass(staticProps);
	
	      var nullNode = t.nullLiteral();
	
	      // (Constructor, instanceDescriptors, staticDescriptors, instanceInitializers, staticInitializers)
	      var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];
	
	      if (instanceProps) args[1] = instanceProps;
	      if (staticProps) args[2] = staticProps;
	
	      if (this.instanceInitializersId) {
	        args[3] = this.instanceInitializersId;
	        body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
	      }
	
	      if (this.staticInitializersId) {
	        args[4] = this.staticInitializersId;
	        body.unshift(this.buildObjectAssignment(this.staticInitializersId));
	      }
	
	      var lastNonNullIndex = 0;
	      for (var i = 0; i < args.length; i++) {
	        if (args[i] !== nullNode) lastNonNullIndex = i;
	      }
	      args = args.slice(0, lastNonNullIndex + 1);
	
	      body.push(t.expressionStatement(t.callExpression(this.file.addHelper("createClass"), args)));
	    }
	
	    this.clearDescriptors();
	  };
	
	  ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
	    return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
	  };
	
	  ClassTransformer.prototype.wrapSuperCall = function wrapSuperCall(bareSuper, superRef, thisRef, body) {
	    var bareSuperNode = bareSuper.node;
	
	    if (this.isLoose) {
	      bareSuperNode.arguments.unshift(t.thisExpression());
	      if (bareSuperNode.arguments.length === 2 && t.isSpreadElement(bareSuperNode.arguments[1]) && t.isIdentifier(bareSuperNode.arguments[1].argument, { name: "arguments" })) {
	        // special case single arguments spread
	        bareSuperNode.arguments[1] = bareSuperNode.arguments[1].argument;
	        bareSuperNode.callee = t.memberExpression(superRef, t.identifier("apply"));
	      } else {
	        bareSuperNode.callee = t.memberExpression(superRef, t.identifier("call"));
	      }
	    } else {
	      bareSuperNode = _babelHelperOptimiseCallExpression2["default"](t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.classRef]), t.thisExpression(), bareSuperNode.arguments);
	    }
	
	    var call = t.callExpression(this.file.addHelper("possibleConstructorReturn"), [t.thisExpression(), bareSuperNode]);
	
	    var bareSuperAfter = this.bareSuperAfter.map(function (fn) {
	      return fn(thisRef);
	    });
	
	    if (bareSuper.parentPath.isExpressionStatement() && bareSuper.parentPath.container === body.node.body && body.node.body.length - 1 === bareSuper.parentPath.key) {
	      // this super call is the last statement in the body so we can just straight up
	      // turn it into a return
	
	      if (this.superThises.length || bareSuperAfter.length) {
	        bareSuper.scope.push({ id: thisRef });
	        call = t.assignmentExpression("=", thisRef, call);
	      }
	
	      if (bareSuperAfter.length) {
	        call = t.toSequenceExpression([call].concat(bareSuperAfter, [thisRef]));
	      }
	
	      bareSuper.parentPath.replaceWith(t.returnStatement(call));
	    } else {
	      bareSuper.replaceWithMultiple([t.variableDeclaration("var", [t.variableDeclarator(thisRef, call)])].concat(bareSuperAfter, [t.expressionStatement(thisRef)]));
	    }
	  };
	
	  ClassTransformer.prototype.verifyConstructor = function verifyConstructor() {
	    // istanbul ignore next
	
	    var _this2 = this;
	
	    if (!this.isDerived) return;
	
	    var path = this.userConstructorPath;
	    var body = path.get("body");
	
	    path.traverse(findThisesVisitor, this);
	
	    var guaranteedSuperBeforeFinish = !!this.bareSupers.length;
	
	    var superRef = this.superName || t.identifier("Function");
	    var thisRef = path.scope.generateUidIdentifier("this");
	
	    for (var _iterator3 = this.bareSupers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var bareSuper = _ref3;
	
	      this.wrapSuperCall(bareSuper, superRef, thisRef, body);
	
	      if (guaranteedSuperBeforeFinish) {
	        bareSuper.find(function (parentPath) {
	          // hit top so short circuit
	          if (parentPath === path) {
	            return true;
	          }
	
	          if (parentPath.isLoop() || parentPath.isConditional()) {
	            guaranteedSuperBeforeFinish = false;
	            return true;
	          }
	        });
	      }
	    }
	
	    for (var _iterator4 = this.superThises, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;
	
	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }
	
	      var thisPath = _ref4;
	
	      thisPath.replaceWith(thisRef);
	    }
	
	    var wrapReturn = function wrapReturn(returnArg) {
	      return t.callExpression(_this2.file.addHelper("possibleConstructorReturn"), [thisRef].concat(returnArg || []));
	    };
	
	    // if we have a return as the last node in the body then we've already caught that
	    // return
	    var bodyPaths = body.get("body");
	    if (bodyPaths.length && !bodyPaths.pop().isReturnStatement()) {
	      body.pushContainer("body", t.returnStatement(guaranteedSuperBeforeFinish ? thisRef : wrapReturn()));
	    }
	
	    for (var _iterator5 = this.superReturns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	      var _ref5;
	
	      if (_isArray5) {
	        if (_i5 >= _iterator5.length) break;
	        _ref5 = _iterator5[_i5++];
	      } else {
	        _i5 = _iterator5.next();
	        if (_i5.done) break;
	        _ref5 = _i5.value;
	      }
	
	      var returnPath = _ref5;
	
	      if (returnPath.node.argument) {
	        var ref = returnPath.scope.generateDeclaredUidIdentifier("ret");
	        returnPath.get("argument").replaceWithMultiple([t.assignmentExpression("=", ref, returnPath.node.argument), wrapReturn(ref)]);
	      } else {
	        returnPath.get("argument").replaceWith(wrapReturn());
	      }
	    }
	  };
	
	  /**
	   * Push a method to its respective mutatorMap.
	   */
	
	  ClassTransformer.prototype.pushMethod = function pushMethod(node /*: { type: "ClassMethod" }*/, path /*:: ?: NodePath*/) {
	    var scope = path ? path.scope : this.scope;
	
	    if (node.kind === "method") {
	      if (this._processMethod(node, scope)) return;
	    }
	
	    this.pushToMap(node, false, null, scope);
	  };
	
	  ClassTransformer.prototype._processMethod = function _processMethod() {
	    return false;
	  };
	
	  /**
	   * Replace the constructor body of our class.
	   */
	
	  ClassTransformer.prototype.pushConstructor = function pushConstructor(replaceSupers, method /*: { type: "ClassMethod" }*/, path /*: NodePath*/) {
	    this.bareSupers = replaceSupers.bareSupers;
	    this.superReturns = replaceSupers.returns;
	
	    // https://github.com/babel/babel/issues/1077
	    if (path.scope.hasOwnBinding(this.classRef.name)) {
	      path.scope.rename(this.classRef.name);
	    }
	
	    var construct = this.constructor;
	
	    this.userConstructorPath = path;
	    this.userConstructor = method;
	    this.hasConstructor = true;
	
	    t.inheritsComments(construct, method);
	
	    construct._ignoreUserWhitespace = true;
	    construct.params = method.params;
	
	    t.inherits(construct.body, method.body);
	    construct.body.directives = method.body.directives;
	
	    // push constructor to body
	    this._pushConstructor();
	  };
	
	  ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
	    if (this.pushedConstructor) return;
	    this.pushedConstructor = true;
	
	    // we haven't pushed any descriptors yet
	    if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
	      this.pushDescriptors();
	    }
	
	    this.body.push(this.constructor);
	
	    this.pushInherits();
	  };
	
	  /**
	   * Push inherits helper to body.
	   */
	
	  ClassTransformer.prototype.pushInherits = function pushInherits() {
	    if (!this.isDerived || this.pushedInherits) return;
	
	    // Unshift to ensure that the constructor inheritance is set up before
	    // any properties can be assigned to the prototype.
	    this.pushedInherits = true;
	    this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
	  };
	
	  return ClassTransformer;
	})();
	
	exports["default"] = ClassTransformer;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-replace-supers/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperOptimiseCallExpression = __webpack_require__("./node_modules/babel-helper-optimise-call-expression/lib/index.js");
	
	var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);
	
	var _babelMessages = __webpack_require__("./node_modules/babel-messages/lib/index.js");
	
	var messages = _interopRequireWildcard(_babelMessages);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	// ✌️
	
	/*:: import type { NodePath, Scope } from "babel-traverse";*/var HARDCORE_THIS_REF = _Symbol();
	
	function isIllegalBareSuper(node, parent) {
	  if (!t.isSuper(node)) return false;
	  if (t.isMemberExpression(parent, { computed: false })) return false;
	  if (t.isCallExpression(parent, { callee: node })) return false;
	  return true;
	}
	
	function isMemberExpressionSuper(node) {
	  return t.isMemberExpression(node) && t.isSuper(node.object);
	}
	
	var visitor = {
	  "ObjectMethod|ClassMethod": function ObjectMethodClassMethod(path) {
	    path.skip();
	  },
	
	  "FunctionDeclaration|FunctionExpression": function FunctionDeclarationFunctionExpression(path) {
	    if (!path.inShadow("this")) {
	      path.skip();
	    }
	  },
	
	  ReturnStatement: function ReturnStatement(path, state) {
	    if (!path.inShadow("this")) {
	      state.returns.push(path);
	    }
	  },
	
	  ThisExpression: function ThisExpression(path, state) {
	    if (!path.node[HARDCORE_THIS_REF]) {
	      state.thises.push(path);
	    }
	  },
	
	  enter: function enter(path, state) {
	    var callback = state.specHandle;
	    if (state.isLoose) callback = state.looseHandle;
	
	    var isBareSuper = path.isCallExpression() && path.get("callee").isSuper();
	
	    var result = callback.call(state, path);
	
	    if (result) {
	      state.hasSuper = true;
	    }
	
	    if (isBareSuper) {
	      state.bareSupers.push(path);
	    }
	
	    if (result === true) {
	      path.requeue();
	    }
	
	    if (result !== true && result) {
	      if (Array.isArray(result)) {
	        path.replaceWithMultiple(result);
	      } else {
	        path.replaceWith(result);
	      }
	    }
	  }
	};
	
	var ReplaceSupers = (function () {
	  function ReplaceSupers(opts /*: Object*/) {
	    var inClass /*:: ?: boolean*/ = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    _classCallCheck(this, ReplaceSupers);
	
	    this.forceSuperMemoisation = opts.forceSuperMemoisation;
	    this.methodPath = opts.methodPath;
	    this.methodNode = opts.methodNode;
	    this.superRef = opts.superRef;
	    this.isStatic = opts.isStatic;
	    this.hasSuper = false;
	    this.inClass = inClass;
	    this.isLoose = opts.isLoose;
	    this.scope = this.methodPath.scope;
	    this.file = opts.file;
	    this.opts = opts;
	
	    this.bareSupers = [];
	    this.returns = [];
	    this.thises = [];
	  }
	
	  ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
	    return this.opts.objectRef || this.opts.getObjectRef();
	  };
	
	  /**
	   * Sets a super class value of the named property.
	   *
	   * @example
	   *
	   *   _set(Object.getPrototypeOf(CLASS.prototype), "METHOD", "VALUE", this)
	   *
	   */
	
	  ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property /*: Object*/, value /*: Object*/, isComputed /*: boolean*/) /*: Object*/ {
	    return t.callExpression(this.file.addHelper("set"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), value, t.thisExpression()]);
	  };
	
	  /**
	   * Gets a node representing the super class value of the named property.
	   *
	   * @example
	   *
	   *   _get(Object.getPrototypeOf(CLASS.prototype), "METHOD", this)
	   *
	   */
	
	  ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property /*: Object*/, isComputed /*: boolean*/) /*: Object*/ {
	    return t.callExpression(this.file.addHelper("get"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), t.thisExpression()]);
	  };
	
	  ReplaceSupers.prototype.replace = function replace() {
	    this.methodPath.traverse(visitor, this);
	  };
	
	  ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id /*: Object*/, parent /*: Object*/) {
	    var methodNode = this.methodNode;
	    var superRef = this.superRef || t.identifier("Function");
	
	    if (parent.property === id) {
	      return;
	    } else if (t.isCallExpression(parent, { callee: id })) {
	      return;
	    } else if (t.isMemberExpression(parent) && !methodNode["static"]) {
	      // super.test -> objectRef.prototype.test
	      return t.memberExpression(superRef, t.identifier("prototype"));
	    } else {
	      return superRef;
	    }
	  };
	
	  ReplaceSupers.prototype.looseHandle = function looseHandle(path /*: NodePath*/) {
	    var node = path.node;
	    if (path.isSuper()) {
	      return this.getLooseSuperProperty(node, path.parent);
	    } else if (path.isCallExpression()) {
	      var callee = node.callee;
	      if (!t.isMemberExpression(callee)) return;
	      if (!t.isSuper(callee.object)) return;
	
	      // super.test(); -> objectRef.prototype.MethodName.call(this);
	      t.appendToMemberExpression(callee, t.identifier("call"));
	      node.arguments.unshift(t.thisExpression());
	      return true;
	    }
	  };
	
	  ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node) {
	    if (node.operator === "=") {
	      // super.name = "val"; -> _set(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      return this.setSuperProperty(node.left.property, node.right, node.left.computed);
	    } else {
	      // super.age += 2; -> let _ref = super.age; super.age = _ref + 2;
	      ref = ref || path.scope.generateUidIdentifier("ref");
	      return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
	    }
	  };
	
	  ReplaceSupers.prototype.specHandle = function specHandle(path /*: NodePath*/) {
	    var property = undefined;
	    var computed = undefined;
	    var args = undefined;
	    var thisReference = undefined;
	
	    var parent = path.parent;
	    var node = path.node;
	
	    if (isIllegalBareSuper(node, parent)) {
	      throw path.buildCodeFrameError(messages.get("classesIllegalBareSuper"));
	    }
	
	    if (t.isCallExpression(node)) {
	      var callee = node.callee;
	      if (t.isSuper(callee)) {
	        return;
	      } else if (isMemberExpressionSuper(callee)) {
	        // super.test(); -> _get(Object.getPrototypeOf(objectRef.prototype), "test", this).call(this);
	        property = callee.property;
	        computed = callee.computed;
	        args = node.arguments;
	      }
	    } else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
	      // super.name; -> _get(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      property = node.property;
	      computed = node.computed;
	    } else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
	      var binary = t.binaryExpression(node.operator[0], node.argument, t.numericLiteral(1));
	      if (node.prefix) {
	        // ++super.foo; -> super.foo += 1;
	        return this.specHandleAssignmentExpression(null, path, binary);
	      } else {
	        // super.foo++; -> let _ref = super.foo; super.foo = _ref + 1;
	        var ref = path.scope.generateUidIdentifier("ref");
	        return this.specHandleAssignmentExpression(ref, path, binary).concat(t.expressionStatement(ref));
	      }
	    } else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
	      return this.specHandleAssignmentExpression(null, path, node);
	    }
	
	    if (!property) return;
	
	    var superProperty = this.getSuperProperty(property, computed, thisReference);
	
	    if (args) {
	      return this.optimiseCall(superProperty, args);
	    } else {
	      return superProperty;
	    }
	  };
	
	  ReplaceSupers.prototype.optimiseCall = function optimiseCall(callee, args) {
	    var thisNode = t.thisExpression();
	    thisNode[HARDCORE_THIS_REF] = true;
	    return _babelHelperOptimiseCallExpression2["default"](callee, thisNode, args);
	  };
	
	  return ReplaceSupers;
	})();
	
	exports["default"] = ReplaceSupers;
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-optimise-call-expression/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = function (callee, thisNode, args) {
	  if (args.length === 1 && t.isSpreadElement(args[0]) && t.isIdentifier(args[0].argument, { name: "arguments" })) {
	    // eg. super(...arguments);
	    return t.callExpression(t.memberExpression(callee, t.identifier("apply")), [thisNode, args[0].argument]);
	  } else {
	    return t.callExpression(t.memberExpression(callee, t.identifier("call")), [thisNode].concat(args));
	  }
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-define-map/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.push = push;
	exports.hasComputed = hasComputed;
	exports.toComputedObjectFromClass = toComputedObjectFromClass;
	exports.toClassObject = toClassObject;
	exports.toDefineObject = toDefineObject;
	
	var _babelHelperFunctionName = __webpack_require__("./node_modules/babel-helper-function-name/lib/index.js");
	
	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashObjectHas = __webpack_require__("./node_modules/lodash/object/has.js");
	
	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function toKind(node /*: Object*/) {
	  if (t.isClassMethod(node) || t.isObjectMethod(node)) {
	    if (node.kind === "get" || node.kind === "set") {
	      return node.kind;
	    }
	  }
	
	  return "value";
	}
	
	function push(mutatorMap /*: Object*/, node /*: Object*/, kind /*: string*/, file, scope /*:: ?*/) /*: Object*/ {
	  var alias = t.toKeyAlias(node);
	
	  //
	
	  var map = {};
	  if (_lodashObjectHas2["default"](mutatorMap, alias)) map = mutatorMap[alias];
	  mutatorMap[alias] = map;
	
	  //
	
	  map._inherits = map._inherits || [];
	  map._inherits.push(node);
	
	  map._key = node.key;
	
	  if (node.computed) {
	    map._computed = true;
	  }
	
	  if (node.decorators) {
	    var decorators = map.decorators = map.decorators || t.arrayExpression([]);
	    decorators.elements = decorators.elements.concat(node.decorators.map(function (dec) {
	      return dec.expression;
	    }).reverse());
	  }
	
	  if (map.value || map.initializer) {
	    throw file.buildCodeFrameError(node, "Key conflict with sibling node");
	  }
	
	  var key = undefined,
	      value = undefined;
	
	  // save the key so we can possibly do function name inferences
	  if (t.isObjectProperty(node) || t.isObjectMethod(node) || t.isClassMethod(node)) {
	    key = t.toComputedKey(node, node.key);
	  }
	
	  if (t.isObjectProperty(node) || t.isClassProperty(node)) {
	    value = node.value;
	  } else if (t.isObjectMethod(node) || t.isClassMethod(node)) {
	    value = t.functionExpression(null, node.params, node.body, node.generator, node.async);
	  }
	
	  var inheritedKind = toKind(node);
	  if (!kind || inheritedKind !== "value") {
	    kind = inheritedKind;
	  }
	
	  // infer function name
	  if (scope && t.isStringLiteral(key) && (kind === "value" || kind === "initializer") && t.isFunctionExpression(value)) {
	    value = _babelHelperFunctionName2["default"]({ id: key, node: value, scope: scope });
	  }
	
	  if (value) {
	    t.inheritsComments(value, node);
	    map[kind] = value;
	  }
	
	  return map;
	}
	
	function hasComputed(mutatorMap /*: Object*/) /*: boolean*/ {
	  for (var key in mutatorMap) {
	    if (mutatorMap[key]._computed) {
	      return true;
	    }
	  }
	  return false;
	}
	
	function toComputedObjectFromClass(obj /*: Object*/) /*: Object*/ {
	  var objExpr = t.arrayExpression([]);
	
	  for (var i = 0; i < obj.properties.length; i++) {
	    var prop = obj.properties[i];
	    var val = prop.value;
	    val.properties.unshift(t.objectProperty(t.identifier("key"), t.toComputedKey(prop)));
	    objExpr.elements.push(val);
	  }
	
	  return objExpr;
	}
	
	function toClassObject(mutatorMap /*: Object*/) /*: Object*/ {
	  var objExpr = t.objectExpression([]);
	
	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    var mapNode = t.objectExpression([]);
	
	    var propNode = t.objectProperty(map._key, mapNode, map._computed);
	
	    _lodashCollectionEach2["default"](map, function (node, key) {
	      if (key[0] === "_") return;
	
	      var inheritNode = node;
	      if (t.isClassMethod(node) || t.isClassProperty(node)) node = node.value;
	
	      var prop = t.objectProperty(t.identifier(key), node);
	      t.inheritsComments(prop, inheritNode);
	      t.removeComments(inheritNode);
	
	      mapNode.properties.push(prop);
	    });
	
	    objExpr.properties.push(propNode);
	  });
	
	  return objExpr;
	}
	
	function toDefineObject(mutatorMap /*: Object*/) /*: Object*/ {
	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    if (map.value) map.writable = t.booleanLiteral(true);
	    map.configurable = t.booleanLiteral(true);
	    map.enumerable = t.booleanLiteral(true);
	  });
	
	  return toClassObject(mutatorMap);
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _defaults = __webpack_require__("./node_modules/babel-runtime/helpers/defaults.js")["default"];
	
	var _interopExportWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-export-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneWithoutLoc = cloneWithoutLoc;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;
	
	var _toFastProperties = __webpack_require__("./node_modules/to-fast-properties/index.js");
	
	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
	
	var _lodashArrayCompact = __webpack_require__("./node_modules/lodash/array/compact.js");
	
	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashArrayUniq = __webpack_require__("./node_modules/lodash/array/uniq.js");
	
	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/init.js");
	
	var _definitions = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _react2 = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/react.js");
	
	var _react = _interopRequireWildcard(_react2);
	
	var t = exports;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */
	
	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };
	
	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}
	
	//
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/constants.js");
	
	_defaults(exports, _interopExportWildcard(_constants, _defaults));
	
	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */
	
	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}
	
	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */
	
	t.FLIPPED_ALIAS_KEYS = {};
	
	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});
	
	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */
	
	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});
	
	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));
	
	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */
	
	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;
	
	  var matches = isType(node.type, type);
	  if (!matches) return false;
	
	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}
	
	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */
	
	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;
	
	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;
	
	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var alias = _ref;
	
	      if (nodeType === alias) return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Description
	 */
	
	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }
	
	    var node = {};
	    node.type = type;
	
	    var i = 0;
	
	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      var field = t.NODE_FIELDS[type][key];
	
	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);
	
	      node[key] = arg;
	    }
	
	    for (var key in node) {
	      validate(node, key, node[key]);
	    }
	
	    return node;
	  }
	
	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});
	
	/**
	 * Description
	 */
	
	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };
	
	  var newType = t.DEPRECATED_KEYS[type];
	
	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};
	
	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}
	
	/**
	 * Description
	 */
	
	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;
	
	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;
	
	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;
	
	  field.validate(node, key, val);
	}
	
	/**
	 * Test if an object is shallowly equal.
	 */
	
	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);
	
	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;
	
	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }
	
	    var key = _ref3;
	
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Append a node to a member expression.
	 */
	
	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}
	
	/**
	 * Prepend a node to a member expression.
	 */
	
	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}
	
	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */
	
	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
	
	  return node[key] = t.toBlock(node[key], node);
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */
	
	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` and location properties.
	 */
	
	function cloneWithoutLoc(node /*: Object*/) /*: Object*/ {
	  var newNode = clone(node);
	  delete newNode.loc;
	  return newNode;
	}
	
	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */
	
	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	
	  for (var key in node) {
	    if (key[0] === "_") continue;
	
	    var val = node[key];
	
	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }
	
	    newNode[key] = val;
	  }
	
	  return newNode;
	}
	
	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */
	
	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");
	
	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;
	
	    var search = [member];
	    var i = 0;
	
	    while (search.length) {
	      var node = search.shift();
	
	      if (allowPartial && i === parts.length) {
	        return true;
	      }
	
	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }
	
	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }
	
	    return true;
	  };
	}
	
	/**
	 * Remove comment properties from a node.
	 */
	
	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    delete node[key];
	  }
	  return node;
	}
	
	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */
	
	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}
	
	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}
	
	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}
	
	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}
	
	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}
	
	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */
	
	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;
	
	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var key = _ref5;
	
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }
	
	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }
	
	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;
	
	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }
	
	    var key = _ref6;
	
	    child[key] = parent[key];
	  }
	
	  t.inheritsComments(child, parent);
	
	  return child;
	}
	
	/**
	 * TODO
	 */
	
	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    // $FlowFixMe
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}
	
	/**
	 * TODO
	 */
	
	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}
	
	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);
	
	//
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/retrievers.js");
	
	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));
	
	var _validators = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/validators.js");
	
	_defaults(exports, _interopExportWildcard(_validators, _defaults));
	
	var _converters = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/converters.js");
	
	_defaults(exports, _interopExportWildcard(_converters, _defaults));
	
	var _flow = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/flow.js");
	
	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/init.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/core.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/es2015.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/flow.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/jsx.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/misc.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/experimental.js");

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};
	
	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}
	
	function assertEach(callback /*: Function*/) /*: Function*/ {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;
	
	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  }
	  validator.each = callback;
	  return validator;
	}
	
	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }
	
	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }
	
	  validate.oneOf = vals;
	
	  return validate;
	}
	
	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var type = _ref;
	
	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeTypes = types;
	
	  return validate;
	}
	
	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var type = _ref2;
	
	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeOrValueTypes = types;
	
	  return validate;
	}
	
	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }
	
	  validate.type = type;
	
	  return validate;
	}
	
	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }
	
	  function validate() {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var fn = _ref3;
	
	      fn.apply(undefined, arguments);
	    }
	  }
	  validate.chainOf = fns;
	  return validate;
	}
	
	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  var inherits = opts.inherits && store[opts.inherits] || {};
	
	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];
	
	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }
	
	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    opts.fields[key] = opts.fields[key] || {};
	  }
	
	  for (var key in opts.fields) {
	    var field = opts.fields[key];
	
	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }
	
	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;
	
	  store[type] = opts;
	}
	
	var store = {};

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/core.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/constants.js");
	
	var _index2 = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _index3 = _interopRequireDefault(_index2);
	
	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement"))),
	      "default": []
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});
	
	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});
	
	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});
	
	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});
	
	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});
	
	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});
	
	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});
	
	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});
	
	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});
	
	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});
	
	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});
	
	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});
	
	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});
	
	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});
	
	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});
	
	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});
	
	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});
	
	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});
	
	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});
	
	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});
	
	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});
	
	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});
	
	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});
	
	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});
	
	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": true
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});
	
	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});
	
	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});
	
	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel6/node_modules/babel-core/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__("./node_modules/babel6/node_modules/babel-core/lib/api/node.js");


/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/es2015.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});
	
	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});
	
	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});
	
	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});
	
	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});
	
	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});
	
	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});
	
	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});
	
	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});
	
	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareInterface", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});
	
	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});
	
	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/jsx.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});
	
	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});
	
	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXText", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});
	
	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});
	
	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});
	
	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/misc.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("Noop", {
	  visitor: []
	});
	
	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/experimental.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});
	
	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/react.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var isReactComponent = t.buildMatchMemberExpression("React.Component");
	
	exports.isReactComponent = isReactComponent;
	
	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}
	
	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);
	
	  var lastNonEmptyLine = 0;
	
	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }
	
	  var str = "";
	
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	
	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;
	
	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");
	
	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }
	
	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }
	
	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }
	
	      str += trimmedLine;
	    }
	  }
	
	  if (str) args.push(t.stringLiteral(str));
	}
	
	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];
	
	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];
	
	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }
	
	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;
	
	    elems.push(child);
	  }
	
	  return elems;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/retrievers.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */
	
	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);
	
	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;
	
	    var keys = t.getBindingIdentifiers.keys[id.type];
	
	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }
	
	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }
	
	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }
	
	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }
	
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }
	
	  return ids;
	}
	
	/**
	 * Mapping of types to their identifier keys.
	 */
	
	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],
	
	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],
	
	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],
	
	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],
	
	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],
	
	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],
	
	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],
	
	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],
	
	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],
	
	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};
	
	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/validators.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/retrievers.js");
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/constants.js");
	
	/**
	 * Check if the input `node` is a binding identifier.
	 */
	
	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */
	
	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: object::NODE
	    // yes: NODE::callee
	    case "BindExpression":
	      return parent.object === node || parent.callee === node;
	
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }
	
	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;
	
	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }
	
	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;
	
	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array<any>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var param = _ref;
	
	        if (param === node) return false;
	      }
	
	      return parent.id !== node;
	
	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }
	
	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;
	
	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;
	
	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;
	
	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;
	
	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;
	
	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;
	
	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;
	
	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;
	
	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;
	
	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;
	
	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;
	
	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }
	
	  return true;
	}
	
	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */
	
	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}
	
	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */
	
	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}
	
	/**
	 * Check if the input `node` is block scoped.
	 */
	
	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}
	
	/**
	 * Check if the input `node` is a variable declaration.
	 */
	
	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}
	
	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */
	
	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}
	
	/**
	 * Check if the input `node` is a scope.
	 */
	
	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }
	
	  return t.isScopable(node);
	}
	
	/**
	 * Check if the input `node` is definitely immutable.
	 */
	
	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;
	
	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }
	
	  return false;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/converters.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Number$MAX_SAFE_INTEGER = __webpack_require__("./node_modules/babel-runtime/core-js/number/max-safe-integer.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;
	
	var _lodashLangIsPlainObject = __webpack_require__("./node_modules/lodash/lang/isPlainObject.js");
	
	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);
	
	var _lodashLangIsNumber = __webpack_require__("./node_modules/lodash/lang/isNumber.js");
	
	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
	
	var _lodashLangIsRegExp = __webpack_require__("./node_modules/lodash/lang/isRegExp.js");
	
	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
	
	var _lodashLangIsString = __webpack_require__("./node_modules/lodash/lang/isString.js");
	
	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}
	
	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */
	
	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;
	
	  var declars = [];
	  var bailed = false;
	
	  var result = convert(nodes);
	  if (bailed) return;
	
	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }
	
	  return result;
	
	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];
	
	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var node = _ref;
	
	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed
	
	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var declar = _ref2;
	
	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }
	
	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }
	
	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;
	
	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }
	
	      ensureLastUndefined = false;
	    }
	
	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }
	
	    //
	
	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}
	
	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;
	
	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }
	
	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }
	
	    if (node["static"]) {
	      alias = "static:" + alias;
	    }
	
	    return alias;
	  })();
	}
	
	toKeyAlias.uid = 0;
	
	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};
	
	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";
	
	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
	
	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");
	
	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });
	
	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }
	
	  return name || "_";
	}
	
	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}
	
	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */
	
	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }
	
	  var mustHaveId = false;
	  var newType = undefined;
	
	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }
	
	  if (mustHaveId && !node.id) {
	    newType = false;
	  }
	
	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }
	
	  node.type = newType;
	
	  return node;
	}
	
	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }
	
	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }
	
	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}
	
	function toBlock(node /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }
	
	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }
	
	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }
	
	    node = [node];
	  }
	
	  return t.blockStatement(node);
	}
	
	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }
	
	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }
	
	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }
	
	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }
	
	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }
	
	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }
	
	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }
	
	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }
	
	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */
	
	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);
	
	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}
	
	/**
	 * Dedupe type annotations.
	 */
	
	function removeTypeDuplicates(nodes /*: Array<Object>*/) /*: Array<Object>*/ {
	  var generics = {};
	  var bases = {};
	
	  // store union type groups to circular references
	  var typeGroups = [];
	
	  var types = [];
	
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;
	
	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }
	
	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }
	
	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }
	
	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }
	
	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;
	
	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }
	
	      continue;
	    }
	
	    types.push(node);
	  }
	
	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }
	
	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }
	
	  return types;
	}
	
	/**
	 * Create a type anotation based on typeof expression.
	 */
	
	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-object-super/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperReplaceSupers = __webpack_require__("./node_modules/babel-helper-replace-supers/lib/index.js");
	
	var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  function Property(path, node, scope, getObjectRef, file) {
	    var replaceSupers = new _babelHelperReplaceSupers2["default"]({
	      getObjectRef: getObjectRef,
	      methodNode: node,
	      methodPath: path,
	      isStatic: true,
	      scope: scope,
	      file: file
	    });
	
	    replaceSupers.replace();
	  }
	
	  var CONTAINS_SUPER = _Symbol();
	
	  return {
	    visitor: {
	      Super: function Super(path) {
	        var parentObj = path.findParent(function (path) {
	          return path.isObjectExpression();
	        });
	        if (parentObj) parentObj.node[CONTAINS_SUPER] = true;
	      },
	
	      ObjectExpression: {
	        exit: function exit(path, file) {
	          if (!path.node[CONTAINS_SUPER]) return;
	
	          var objectRef = undefined;
	          var getObjectRef = function getObjectRef() {
	            return objectRef = objectRef || path.scope.generateUidIdentifier("obj");
	          };
	
	          var propPaths /*: Array*/ = path.get("properties");
	          for (var _iterator = propPaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	            var _ref;
	
	            if (_isArray) {
	              if (_i >= _iterator.length) break;
	              _ref = _iterator[_i++];
	            } else {
	              _i = _iterator.next();
	              if (_i.done) break;
	              _ref = _i.value;
	            }
	
	            var propPath = _ref;
	
	            if (propPath.isObjectProperty()) propPath = propPath.get("value");
	            Property(propPath, propPath.node, path.scope, getObjectRef, file);
	          }
	
	          if (objectRef) {
	            path.scope.push({ id: objectRef });
	            path.replaceWith(t.assignmentExpression("=", objectRef, path.node));
	          }
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-shorthand-properties/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = function () {
	  return {
	    visitor: {
	      ObjectMethod: function ObjectMethod(path) {
	        var node = path.node;
	
	        if (node.kind === "method") {
	          path.replaceWith(t.objectProperty(node.key, t.functionExpression(null, node.params, node.body, node.generator, node.async), node.computed));
	        }
	      },
	
	      ObjectProperty: function ObjectProperty(_ref) {
	        var node = _ref.node;
	
	        if (node.shorthand) {
	          node.shorthand = false;
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-computed-properties/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref5) {
	  var t = _ref5.types;
	  var template = _ref5.template;
	
	  var buildMutatorMapAssign = template("\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  ");
	
	  function getValue(prop) {
	    if (t.isObjectProperty(prop)) {
	      return prop.value;
	    } else if (t.isObjectMethod(prop)) {
	      return t.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);
	    }
	  }
	
	  function pushAssign(objId, prop, body) {
	    if (prop.kind === "get" && prop.kind === "set") {
	      pushMutatorDefine(objId, prop, body);
	    } else {
	      body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), getValue(prop))));
	    }
	  }
	
	  function pushMutatorDefine(_ref6, prop) {
	    var objId = _ref6.objId;
	    var body = _ref6.body;
	    var getMutatorId = _ref6.getMutatorId;
	    var scope = _ref6.scope;
	
	    var key = prop.key;
	
	    var maybeMemoise = scope.maybeGenerateMemoised(prop.key);
	    if (maybeMemoise) {
	      body.push(t.expressionStatement(t.assignmentExpression("=", maybeMemoise, key)));
	      key = maybeMemoise;
	    }
	
	    body.push.apply(body, buildMutatorMapAssign({
	      MUTATOR_MAP_REF: getMutatorId(),
	      KEY: key,
	      VALUE: getValue(prop),
	      KIND: t.identifier(prop.kind)
	    }));
	  }
	
	  function loose(info) {
	    for (var _iterator = info.computedProps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var prop = _ref;
	
	      if (prop.kind === "get" || prop.kind === "set") {
	        pushMutatorDefine(info, prop);
	      } else {
	        pushAssign(info.objId, prop, info.body);
	      }
	    }
	  }
	
	  function spec(info) {
	    var objId = info.objId;
	    var body = info.body;
	    var computedProps = info.computedProps;
	    var state = info.state;
	
	    for (var _iterator2 = computedProps, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var prop = _ref2;
	
	      var key = t.toComputedKey(prop);
	
	      if (prop.kind === "get" || prop.kind === "set") {
	        pushMutatorDefine(info, prop);
	      } else if (t.isStringLiteral(key, { value: "__proto__" })) {
	        pushAssign(objId, prop, body);
	      } else {
	        if (computedProps.length === 1) {
	          return t.callExpression(state.addHelper("defineProperty"), [info.initPropExpression, key, getValue(prop)]);
	        } else {
	          body.push(t.expressionStatement(t.callExpression(state.addHelper("defineProperty"), [objId, key, getValue(prop)])));
	        }
	      }
	    }
	  }
	
	  return {
	    visitor: {
	      ObjectExpression: {
	        exit: function exit(path, state) {
	          var node = path.node;
	          var parent = path.parent;
	          var scope = path.scope;
	
	          var hasComputed = false;
	          for (var _iterator3 = (node.properties /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;
	
	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }
	
	            var prop = _ref3;
	
	            hasComputed = prop.computed === true;
	            if (hasComputed) break;
	          }
	          if (!hasComputed) return;
	
	          // put all getters/setters into the first object expression as well as all initialisers up
	          // to the first computed property
	
	          var initProps = [];
	          var computedProps = [];
	          var foundComputed = false;
	
	          for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	            var _ref4;
	
	            if (_isArray4) {
	              if (_i4 >= _iterator4.length) break;
	              _ref4 = _iterator4[_i4++];
	            } else {
	              _i4 = _iterator4.next();
	              if (_i4.done) break;
	              _ref4 = _i4.value;
	            }
	
	            var prop = _ref4;
	
	            if (prop.computed) {
	              foundComputed = true;
	            }
	
	            if (foundComputed) {
	              computedProps.push(prop);
	            } else {
	              initProps.push(prop);
	            }
	          }
	
	          var objId = scope.generateUidIdentifierBasedOnNode(parent);
	          var initPropExpression = t.objectExpression(initProps);
	          var body = [];
	
	          body.push(t.variableDeclaration("var", [t.variableDeclarator(objId, initPropExpression)]));
	
	          var callback = spec;
	          if (state.opts.loose) callback = loose;
	
	          var mutatorRef = undefined;
	
	          var getMutatorId = function getMutatorId() {
	            if (!mutatorRef) {
	              mutatorRef = scope.generateUidIdentifier("mutatorMap");
	
	              body.push(t.variableDeclaration("var", [t.variableDeclarator(mutatorRef, t.objectExpression([]))]));
	            }
	
	            return mutatorRef;
	          };
	
	          var single = callback({
	            scope: scope,
	            objId: objId,
	            body: body,
	            computedProps: computedProps,
	            initPropExpression: initPropExpression,
	            getMutatorId: getMutatorId,
	            state: state
	          });
	
	          if (mutatorRef) {
	            body.push(t.expressionStatement(t.callExpression(state.addHelper("defineEnumerableProperties"), [objId, mutatorRef])));
	          }
	
	          if (single) {
	            path.replaceWith(single);
	          } else {
	            body.push(t.expressionStatement(objId));
	            path.replaceWithMultiple(body);
	          }
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-for-of/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref) {
	  var messages = _ref.messages;
	  var template = _ref.template;
	  var t = _ref.types;
	
	  var buildForOfArray = template("\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  ");
	
	  var buildForOfLoose = template("\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      var ID;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  ");
	
	  var buildForOf = template("\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  ");
	
	  function _ForOfStatementArray(path) {
	    var node = path.node;
	    var scope = path.scope;
	
	    var nodes = [];
	    var right = node.right;
	
	    if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
	      var uid = scope.generateUidIdentifier("arr");
	      nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
	      right = uid;
	    }
	
	    var iterationKey = scope.generateUidIdentifier("i");
	
	    var loop = buildForOfArray({
	      BODY: node.body,
	      KEY: iterationKey,
	      ARR: right
	    });
	
	    t.inherits(loop, node);
	    t.ensureBlock(loop);
	
	    var iterationValue = t.memberExpression(right, iterationKey, true);
	
	    var left = node.left;
	    if (t.isVariableDeclaration(left)) {
	      left.declarations[0].init = iterationValue;
	      loop.body.body.unshift(left);
	    } else {
	      loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
	    }
	
	    if (path.parentPath.isLabeledStatement()) {
	      loop = t.labeledStatement(path.parentPath.node.label, loop);
	    }
	
	    nodes.push(loop);
	
	    return nodes;
	  }
	
	  return {
	    visitor: {
	      ForOfStatement: function ForOfStatement(path, state) {
	        if (path.get("right").isArrayExpression()) {
	          return path.replaceWithMultiple(_ForOfStatementArray.call(this, path, state));
	        }
	
	        var callback = spec;
	        if (state.opts.loose) callback = loose;
	
	        var node = path.node;
	
	        var build = callback(path, state);
	        var declar = build.declar;
	        var loop = build.loop;
	        var block = loop.body;
	
	        // ensure that it's a block so we can take all its statements
	        path.ensureBlock();
	
	        // add the value declaration to the new loop body
	        if (declar) {
	          block.body.push(declar);
	        }
	
	        // push the rest of the original loop body onto our new body
	        block.body = block.body.concat(node.body.body);
	
	        t.inherits(loop, node);
	        t.inherits(loop.body, node.body);
	
	        if (build.replaceParent) {
	          path.parentPath.replaceWithMultiple(build.node);
	          path.remove();
	        } else {
	          path.replaceWithMultiple(build.node);
	        }
	      }
	    }
	  };
	
	  function loose(path, file) {
	    var node = path.node;
	    var scope = path.scope;
	
	    var left = node.left;
	    var declar = undefined,
	        id = undefined;
	
	    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	      // for (i of test), for ({ i } of test)
	      id = left;
	    } else if (t.isVariableDeclaration(left)) {
	      // for (let i of test)
	      id = scope.generateUidIdentifier("ref");
	      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
	    } else {
	      throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
	    }
	
	    var iteratorKey = scope.generateUidIdentifier("iterator");
	    var isArrayKey = scope.generateUidIdentifier("isArray");
	
	    var loop = buildForOfLoose({
	      LOOP_OBJECT: iteratorKey,
	      IS_ARRAY: isArrayKey,
	      OBJECT: node.right,
	      INDEX: scope.generateUidIdentifier("i"),
	      ID: id
	    });
	
	    if (!declar) {
	      // no declaration so we need to remove the variable declaration at the top of
	      // the for-of-loose template
	      loop.body.body.shift();
	    }
	
	    //
	
	    return {
	      declar: declar,
	      node: loop,
	      loop: loop
	    };
	  }
	
	  function spec(path, file) {
	    var node = path.node;
	    var scope = path.scope;
	    var parent = path.parent;
	
	    var left = node.left;
	    var declar = undefined;
	
	    var stepKey = scope.generateUidIdentifier("step");
	    var stepValue = t.memberExpression(stepKey, t.identifier("value"));
	
	    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	      // for (i of test), for ({ i } of test)
	      declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
	    } else if (t.isVariableDeclaration(left)) {
	      // for (let i of test)
	      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
	    } else {
	      throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
	    }
	
	    //
	
	    var iteratorKey = scope.generateUidIdentifier("iterator");
	
	    var template = buildForOf({
	      ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
	      ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
	      ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
	      ITERATOR_KEY: iteratorKey,
	      STEP_KEY: stepKey,
	      OBJECT: node.right,
	      BODY: null
	    });
	
	    var isLabeledParent = t.isLabeledStatement(parent);
	
	    var tryBody = template[3].block.body;
	    var loop = tryBody[0];
	
	    if (isLabeledParent) {
	      tryBody[0] = t.labeledStatement(parent.label, loop);
	    }
	
	    //
	
	    return {
	      replaceParent: isLabeledParent,
	      declar: declar,
	      loop: loop,
	      node: template
	    };
	  }
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-sticky-regex/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperRegex = __webpack_require__("./node_modules/babel-helper-regex/lib/index.js");
	
	var regex = _interopRequireWildcard(_babelHelperRegex);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = function () {
	  return {
	    visitor: {
	      RegExpLiteral: function RegExpLiteral(path) {
	        var node = path.node;
	
	        if (!regex.is(node, "y")) return;
	
	        path.replaceWith(t.newExpression(t.identifier("RegExp"), [t.stringLiteral(node.pattern), t.stringLiteral(node.flags)]));
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-regex/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.is = is;
	exports.pullFlag = pullFlag;
	
	var _lodashArrayPull = __webpack_require__("./node_modules/lodash/array/pull.js");
	
	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function is(node /*: Object*/, flag /*: string*/) /*: boolean*/ {
	  return t.isRegExpLiteral(node) && node.flags.indexOf(flag) >= 0;
	}
	
	function pullFlag(node /*: Object*/, flag /*: string*/) {
	  var flags = node.flags.split("");
	  if (node.flags.indexOf(flag) < 0) return;
	  _lodashArrayPull2["default"](flags, flag);
	  node.flags = flags.join("");
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-unicode-regex/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _regexpuCore = __webpack_require__("./node_modules/regexpu-core/rewrite-pattern.js");
	
	var _regexpuCore2 = _interopRequireDefault(_regexpuCore);
	
	var _babelHelperRegex = __webpack_require__("./node_modules/babel-helper-regex/lib/index.js");
	
	var regex = _interopRequireWildcard(_babelHelperRegex);
	
	exports["default"] = function () {
	  return {
	    visitor: {
	      RegExpLiteral: function RegExpLiteral(_ref) {
	        var node = _ref.node;
	
	        if (!regex.is(node, "u")) return;
	        node.pattern = _regexpuCore2["default"](node.pattern, node.flags);
	        regex.pullFlag(node, "u");
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/regexpu-core/rewrite-pattern.js":
/***/ function(module, exports, __webpack_require__) {

	var generate = __webpack_require__("./node_modules/regjsgen/regjsgen.js").generate;
	var parse = __webpack_require__("./node_modules/regjsparser/parser.js").parse;
	var regenerate = __webpack_require__("./node_modules/regenerate/regenerate.js");
	var iuMappings = __webpack_require__("./node_modules/regexpu-core/data/iu-mappings.json");
	var ESCAPE_SETS = __webpack_require__("./node_modules/regexpu-core/data/character-class-escape-sets.js");
	
	function getCharacterClassEscapeSet(character) {
		if (unicode) {
			if (ignoreCase) {
				return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
			}
			return ESCAPE_SETS.UNICODE[character];
		}
		return ESCAPE_SETS.REGULAR[character];
	}
	
	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	function has(object, property) {
		return hasOwnProperty.call(object, property);
	}
	
	// Prepare a Regenerate set containing all code points, used for negative
	// character classes (if any).
	var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
	// Without the `u` flag, the range stops at 0xFFFF.
	// https://mths.be/es6#sec-pattern-semantics
	var BMP_SET = regenerate().addRange(0x0, 0xFFFF);
	
	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./u`. https://mths.be/es6#sec-atom
	var DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points
		.remove(
			// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):
			0x000A, // Line Feed <LF>
			0x000D, // Carriage Return <CR>
			0x2028, // Line Separator <LS>
			0x2029  // Paragraph Separator <PS>
		);
	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./` (only BMP code points).
	var DOT_SET = DOT_SET_UNICODE.clone()
		.intersection(BMP_SET);
	
	// Add a range of code points + any case-folded code points in that range to a
	// set.
	regenerate.prototype.iuAddRange = function(min, max) {
		var $this = this;
		do {
			var folded = caseFold(min);
			if (folded) {
				$this.add(folded);
			}
		} while (++min <= max);
		return $this;
	};
	
	function assign(target, source) {
		for (var key in source) {
			// Note: `hasOwnProperty` is not needed here.
			target[key] = source[key];
		}
	}
	
	function update(item, pattern) {
		// TODO: Test if memoizing `pattern` here is worth the effort.
		if (!pattern) {
			return;
		}
		var tree = parse(pattern, '');
		switch (tree.type) {
			case 'characterClass':
			case 'group':
			case 'value':
				// No wrapping needed.
				break;
			default:
				// Wrap the pattern in a non-capturing group.
				tree = wrap(tree, pattern);
		}
		assign(item, tree);
	}
	
	function wrap(tree, pattern) {
		// Wrap the pattern in a non-capturing group.
		return {
			'type': 'group',
			'behavior': 'ignore',
			'body': [tree],
			'raw': '(?:' + pattern + ')'
		};
	}
	
	function caseFold(codePoint) {
		return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
	}
	
	var ignoreCase = false;
	var unicode = false;
	function processCharacterClass(characterClassItem) {
		var set = regenerate();
		var body = characterClassItem.body.forEach(function(item) {
			switch (item.type) {
				case 'value':
					set.add(item.codePoint);
					if (ignoreCase && unicode) {
						var folded = caseFold(item.codePoint);
						if (folded) {
							set.add(folded);
						}
					}
					break;
				case 'characterClassRange':
					var min = item.min.codePoint;
					var max = item.max.codePoint;
					set.addRange(min, max);
					if (ignoreCase && unicode) {
						set.iuAddRange(min, max);
					}
					break;
				case 'characterClassEscape':
					set.add(getCharacterClassEscapeSet(item.value));
					break;
				// The `default` clause is only here as a safeguard; it should never be
				// reached. Code coverage tools should ignore it.
				/* istanbul ignore next */
				default:
					throw Error('Unknown term type: ' + item.type);
			}
		});
		if (characterClassItem.negative) {
			set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
		}
		update(characterClassItem, set.toString());
		return characterClassItem;
	}
	
	function processTerm(item) {
		switch (item.type) {
			case 'dot':
				update(
					item,
					(unicode ? DOT_SET_UNICODE : DOT_SET).toString()
				);
				break;
			case 'characterClass':
				item = processCharacterClass(item);
				break;
			case 'characterClassEscape':
				update(
					item,
					getCharacterClassEscapeSet(item.value).toString()
				);
				break;
			case 'alternative':
			case 'disjunction':
			case 'group':
			case 'quantifier':
				item.body = item.body.map(processTerm);
				break;
			case 'value':
				var codePoint = item.codePoint;
				var set = regenerate(codePoint);
				if (ignoreCase && unicode) {
					var folded = caseFold(codePoint);
					if (folded) {
						set.add(folded);
					}
				}
				update(item, set.toString());
				break;
			case 'anchor':
			case 'empty':
			case 'group':
			case 'reference':
				// Nothing to do here.
				break;
			// The `default` clause is only here as a safeguard; it should never be
			// reached. Code coverage tools should ignore it.
			/* istanbul ignore next */
			default:
				throw Error('Unknown term type: ' + item.type);
		}
		return item;
	};
	
	module.exports = function(pattern, flags) {
		var tree = parse(pattern, flags);
		ignoreCase = flags ? flags.indexOf('i') > -1 : false;
		unicode = flags ? flags.indexOf('u') > -1 : false;
		assign(tree, processTerm(tree));
		return generate(tree);
	};


/***/ },

/***/ "./node_modules/regexpu-core/data/iu-mappings.json":
/***/ function(module, exports) {

	module.exports = {
		"75": 8490,
		"83": 383,
		"107": 8490,
		"115": 383,
		"181": 924,
		"197": 8491,
		"383": 83,
		"452": 453,
		"453": 452,
		"455": 456,
		"456": 455,
		"458": 459,
		"459": 458,
		"497": 498,
		"498": 497,
		"837": 8126,
		"914": 976,
		"917": 1013,
		"920": 1012,
		"921": 8126,
		"922": 1008,
		"924": 181,
		"928": 982,
		"929": 1009,
		"931": 962,
		"934": 981,
		"937": 8486,
		"962": 931,
		"976": 914,
		"977": 1012,
		"981": 934,
		"982": 928,
		"1008": 922,
		"1009": 929,
		"1012": [
			920,
			977
		],
		"1013": 917,
		"7776": 7835,
		"7835": 7776,
		"8126": [
			837,
			921
		],
		"8486": 937,
		"8490": 75,
		"8491": 197,
		"66560": 66600,
		"66561": 66601,
		"66562": 66602,
		"66563": 66603,
		"66564": 66604,
		"66565": 66605,
		"66566": 66606,
		"66567": 66607,
		"66568": 66608,
		"66569": 66609,
		"66570": 66610,
		"66571": 66611,
		"66572": 66612,
		"66573": 66613,
		"66574": 66614,
		"66575": 66615,
		"66576": 66616,
		"66577": 66617,
		"66578": 66618,
		"66579": 66619,
		"66580": 66620,
		"66581": 66621,
		"66582": 66622,
		"66583": 66623,
		"66584": 66624,
		"66585": 66625,
		"66586": 66626,
		"66587": 66627,
		"66588": 66628,
		"66589": 66629,
		"66590": 66630,
		"66591": 66631,
		"66592": 66632,
		"66593": 66633,
		"66594": 66634,
		"66595": 66635,
		"66596": 66636,
		"66597": 66637,
		"66598": 66638,
		"66599": 66639,
		"66600": 66560,
		"66601": 66561,
		"66602": 66562,
		"66603": 66563,
		"66604": 66564,
		"66605": 66565,
		"66606": 66566,
		"66607": 66567,
		"66608": 66568,
		"66609": 66569,
		"66610": 66570,
		"66611": 66571,
		"66612": 66572,
		"66613": 66573,
		"66614": 66574,
		"66615": 66575,
		"66616": 66576,
		"66617": 66577,
		"66618": 66578,
		"66619": 66579,
		"66620": 66580,
		"66621": 66581,
		"66622": 66582,
		"66623": 66583,
		"66624": 66584,
		"66625": 66585,
		"66626": 66586,
		"66627": 66587,
		"66628": 66588,
		"66629": 66589,
		"66630": 66590,
		"66631": 66591,
		"66632": 66592,
		"66633": 66593,
		"66634": 66594,
		"66635": 66595,
		"66636": 66596,
		"66637": 66597,
		"66638": 66598,
		"66639": 66599,
		"68736": 68800,
		"68737": 68801,
		"68738": 68802,
		"68739": 68803,
		"68740": 68804,
		"68741": 68805,
		"68742": 68806,
		"68743": 68807,
		"68744": 68808,
		"68745": 68809,
		"68746": 68810,
		"68747": 68811,
		"68748": 68812,
		"68749": 68813,
		"68750": 68814,
		"68751": 68815,
		"68752": 68816,
		"68753": 68817,
		"68754": 68818,
		"68755": 68819,
		"68756": 68820,
		"68757": 68821,
		"68758": 68822,
		"68759": 68823,
		"68760": 68824,
		"68761": 68825,
		"68762": 68826,
		"68763": 68827,
		"68764": 68828,
		"68765": 68829,
		"68766": 68830,
		"68767": 68831,
		"68768": 68832,
		"68769": 68833,
		"68770": 68834,
		"68771": 68835,
		"68772": 68836,
		"68773": 68837,
		"68774": 68838,
		"68775": 68839,
		"68776": 68840,
		"68777": 68841,
		"68778": 68842,
		"68779": 68843,
		"68780": 68844,
		"68781": 68845,
		"68782": 68846,
		"68783": 68847,
		"68784": 68848,
		"68785": 68849,
		"68786": 68850,
		"68800": 68736,
		"68801": 68737,
		"68802": 68738,
		"68803": 68739,
		"68804": 68740,
		"68805": 68741,
		"68806": 68742,
		"68807": 68743,
		"68808": 68744,
		"68809": 68745,
		"68810": 68746,
		"68811": 68747,
		"68812": 68748,
		"68813": 68749,
		"68814": 68750,
		"68815": 68751,
		"68816": 68752,
		"68817": 68753,
		"68818": 68754,
		"68819": 68755,
		"68820": 68756,
		"68821": 68757,
		"68822": 68758,
		"68823": 68759,
		"68824": 68760,
		"68825": 68761,
		"68826": 68762,
		"68827": 68763,
		"68828": 68764,
		"68829": 68765,
		"68830": 68766,
		"68831": 68767,
		"68832": 68768,
		"68833": 68769,
		"68834": 68770,
		"68835": 68771,
		"68836": 68772,
		"68837": 68773,
		"68838": 68774,
		"68839": 68775,
		"68840": 68776,
		"68841": 68777,
		"68842": 68778,
		"68843": 68779,
		"68844": 68780,
		"68845": 68781,
		"68846": 68782,
		"68847": 68783,
		"68848": 68784,
		"68849": 68785,
		"68850": 68786,
		"71840": 71872,
		"71841": 71873,
		"71842": 71874,
		"71843": 71875,
		"71844": 71876,
		"71845": 71877,
		"71846": 71878,
		"71847": 71879,
		"71848": 71880,
		"71849": 71881,
		"71850": 71882,
		"71851": 71883,
		"71852": 71884,
		"71853": 71885,
		"71854": 71886,
		"71855": 71887,
		"71856": 71888,
		"71857": 71889,
		"71858": 71890,
		"71859": 71891,
		"71860": 71892,
		"71861": 71893,
		"71862": 71894,
		"71863": 71895,
		"71864": 71896,
		"71865": 71897,
		"71866": 71898,
		"71867": 71899,
		"71868": 71900,
		"71869": 71901,
		"71870": 71902,
		"71871": 71903,
		"71872": 71840,
		"71873": 71841,
		"71874": 71842,
		"71875": 71843,
		"71876": 71844,
		"71877": 71845,
		"71878": 71846,
		"71879": 71847,
		"71880": 71848,
		"71881": 71849,
		"71882": 71850,
		"71883": 71851,
		"71884": 71852,
		"71885": 71853,
		"71886": 71854,
		"71887": 71855,
		"71888": 71856,
		"71889": 71857,
		"71890": 71858,
		"71891": 71859,
		"71892": 71860,
		"71893": 71861,
		"71894": 71862,
		"71895": 71863,
		"71896": 71864,
		"71897": 71865,
		"71898": 71866,
		"71899": 71867,
		"71900": 71868,
		"71901": 71869,
		"71902": 71870,
		"71903": 71871
	};

/***/ },

/***/ "./node_modules/regexpu-core/data/character-class-escape-sets.js":
/***/ function(module, exports, __webpack_require__) {

	// Generated by `/scripts/character-class-escape-sets.js`. Do not edit.
	var regenerate = __webpack_require__("./node_modules/regenerate/regenerate.js");
	
	exports.REGULAR = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0xFFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0xFFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0xFFFF)
	};
	
	exports.UNICODE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};
	
	exports.UNICODE_IGNORE_CASE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F, 0x17F, 0x212A)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x4B, 0x53, 0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};


/***/ },

/***/ "./node_modules/babel-plugin-check-es2015-constants/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref2) {
	  var messages = _ref2.messages;
	
	  return {
	    visitor: {
	      Scope: function Scope(_ref3) {
	        var scope = _ref3.scope;
	
	        for (var _name in scope.bindings) {
	          var binding = scope.bindings[_name];
	          if (binding.kind !== "const" && binding.kind !== "module") continue;
	
	          for (var _iterator = (binding.constantViolations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	            var _ref;
	
	            if (_isArray) {
	              if (_i >= _iterator.length) break;
	              _ref = _iterator[_i++];
	            } else {
	              _i = _iterator.next();
	              if (_i.done) break;
	              _ref = _i.value;
	            }
	
	            var violation = _ref;
	
	            throw violation.buildCodeFrameError(messages.get("readOnly", _name));
	          }
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-spread/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  function getSpreadLiteral(spread, scope, state) {
	    if (state.opts.loose && !t.isIdentifier(spread.argument, { name: "arguments" })) {
	      return spread.argument;
	    } else {
	      return scope.toArray(spread.argument, true);
	    }
	  }
	
	  function hasSpread(nodes) {
	    for (var i = 0; i < nodes.length; i++) {
	      if (t.isSpreadElement(nodes[i])) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  function build(props /*: Array*/, scope, state) {
	    var nodes = [];
	
	    var _props = [];
	
	    function push() {
	      if (!_props.length) return;
	      nodes.push(t.arrayExpression(_props));
	      _props = [];
	    }
	
	    for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var prop = _ref;
	
	      if (t.isSpreadElement(prop)) {
	        push();
	        nodes.push(getSpreadLiteral(prop, scope, state));
	      } else {
	        _props.push(prop);
	      }
	    }
	
	    push();
	
	    return nodes;
	  }
	
	  return {
	    visitor: {
	      ArrayExpression: function ArrayExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;
	
	        var elements = node.elements;
	        if (!hasSpread(elements)) return;
	
	        var nodes = build(elements, scope, state);
	        var first = nodes.shift();
	
	        if (!t.isArrayExpression(first)) {
	          nodes.unshift(first);
	          first = t.arrayExpression([]);
	        }
	
	        path.replaceWith(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	      },
	
	      CallExpression: function CallExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;
	
	        var args = node.arguments;
	        if (!hasSpread(args)) return;
	
	        var calleePath = path.get("callee");
	        if (calleePath.isSuper()) return;
	
	        var contextLiteral = t.identifier("undefined");
	
	        node.arguments = [];
	
	        var nodes = undefined;
	        if (args.length === 1 && args[0].argument.name === "arguments") {
	          nodes = [args[0].argument];
	        } else {
	          nodes = build(args, scope, state);
	        }
	
	        var first = nodes.shift();
	        if (nodes.length) {
	          node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	        } else {
	          node.arguments.push(first);
	        }
	
	        var callee = node.callee;
	
	        if (calleePath.isMemberExpression()) {
	          var temp = scope.maybeGenerateMemoised(callee.object);
	          if (temp) {
	            callee.object = t.assignmentExpression("=", temp, callee.object);
	            contextLiteral = temp;
	          } else {
	            contextLiteral = callee.object;
	          }
	          t.appendToMemberExpression(callee, t.identifier("apply"));
	        } else {
	          node.callee = t.memberExpression(node.callee, t.identifier("apply"));
	        }
	
	        if (t.isSuper(contextLiteral)) {
	          contextLiteral = t.thisExpression();
	        }
	
	        node.arguments.unshift(contextLiteral);
	      },
	
	      NewExpression: function NewExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;
	
	        var args = node.arguments;
	        if (!hasSpread(args)) return;
	
	        var nodes = build(args, scope, state);
	
	        var context = t.arrayExpression([t.nullLiteral()]);
	
	        args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);
	
	        path.replaceWith(t.newExpression(t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Function"), t.identifier("prototype")), t.identifier("bind")), t.identifier("apply")), [node.callee, args]), []));
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-parameters/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _destructuring = __webpack_require__("./node_modules/babel-plugin-transform-es2015-parameters/lib/destructuring.js");
	
	var destructuring = _interopRequireWildcard(_destructuring);
	
	var _default = __webpack_require__("./node_modules/babel-plugin-transform-es2015-parameters/lib/default.js");
	
	var def = _interopRequireWildcard(_default);
	
	var _rest = __webpack_require__("./node_modules/babel-plugin-transform-es2015-parameters/lib/rest.js");
	
	var rest = _interopRequireWildcard(_rest);
	
	/*:: import type { NodePath } from "babel-traverse";*/
	exports["default"] = function () {
	  return {
	    visitor: _babelTraverse.visitors.merge([{
	      ArrowFunctionExpression: function ArrowFunctionExpression(path) {
	        // default/rest visitors require access to `arguments`
	        var params /*: Array<NodePath>*/ = path.get("params");
	        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var param = _ref;
	
	          if (param.isRestElement() || param.isAssignmentPattern()) {
	            path.arrowFunctionToShadowed();
	            break;
	          }
	        }
	      }
	    }, destructuring.visitor, rest.visitor, def.visitor])
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-parameters/lib/destructuring.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var visitor = {
	  Function: function Function(path) {
	    var params /*: Array*/ = path.get("params");
	
	    // If there's a rest param, no need to loop through it. Also, we need to
	    // hoist one more level to get `declar` at the right spot.
	    var hoistTweak = t.isRestElement(params[params.length - 1]) ? 1 : 0;
	    var outputParamsLength = params.length - hoistTweak;
	
	    for (var i = 0; i < outputParamsLength; i++) {
	      var param = params[i];
	      if (param.isArrayPattern() || param.isObjectPattern()) {
	        var uid = path.scope.generateUidIdentifier("ref");
	
	        var declar = t.variableDeclaration("let", [t.variableDeclarator(param.node, uid)]);
	        declar._blockHoist = outputParamsLength - i;
	
	        path.ensureBlock();
	        path.get("body").unshiftContainer("body", declar);
	
	        param.replaceWith(uid);
	      }
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-parameters/lib/default.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperGetFunctionArity = __webpack_require__("./node_modules/babel-helper-get-function-arity/lib/index.js");
	
	var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);
	
	var _babelHelperCallDelegate = __webpack_require__("./node_modules/babel-helper-call-delegate/lib/index.js");
	
	var _babelHelperCallDelegate2 = _interopRequireDefault(_babelHelperCallDelegate);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var buildDefaultParam = _babelTemplate2["default"]("\n  let VARIABLE_NAME =\n    ARGUMENTS.length <= ARGUMENT_KEY || ARGUMENTS[ARGUMENT_KEY] === undefined ?\n      DEFAULT_VALUE\n    :\n      ARGUMENTS[ARGUMENT_KEY];\n");
	
	var buildDefaultParamAssign = _babelTemplate2["default"]("\n  if (VARIABLE_NAME === undefined) VARIABLE_NAME = DEFAULT_VALUE;\n");
	
	var buildCutOff = _babelTemplate2["default"]("\n  let $0 = $1[$2];\n");
	
	function hasDefaults(node) {
	  for (var _iterator = (node.params /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var param = _ref;
	
	    if (!t.isIdentifier(param)) return true;
	  }
	  return false;
	}
	
	var iifeVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var name = path.node.name;
	    if (name === "eval" || path.scope.hasOwnBinding(name) && path.scope.getOwnBinding(name).kind !== "param") {
	      state.iife = true;
	      path.stop();
	    }
	  },
	
	  Scope: function Scope(path) {
	    // different bindings
	    path.skip();
	  }
	};
	
	var visitor = {
	  Function: function Function(path) {
	    var node = path.node;
	    var scope = path.scope;
	
	    if (!hasDefaults(node)) return;
	
	    // ensure it's a block, useful for arrow functions
	    path.ensureBlock();
	
	    var state = {
	      iife: false,
	      scope: scope
	    };
	
	    var body = [];
	
	    //
	    var argsIdentifier = t.identifier("arguments");
	    argsIdentifier._shadowedFunctionLiteral = path;
	
	    // push a default parameter definition
	    function pushDefNode(left, right, i) {
	      var defNode = undefined;
	      if (exceedsLastNonDefault(i) || t.isPattern(left)) {
	        defNode = buildDefaultParam({
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right,
	          ARGUMENT_KEY: t.numericLiteral(i),
	          ARGUMENTS: argsIdentifier
	        });
	      } else {
	        defNode = buildDefaultParamAssign({
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right
	        });
	      }
	      defNode._blockHoist = node.params.length - i;
	      body.push(defNode);
	    }
	
	    // check if an index exceeds the functions arity
	    function exceedsLastNonDefault(i) {
	      return i + 1 > lastNonDefaultParam;
	    }
	
	    //
	    var lastNonDefaultParam = _babelHelperGetFunctionArity2["default"](node);
	
	    //
	    var params = path.get("params");
	    for (var i = 0; i < params.length; i++) {
	      var param = params[i];
	
	      if (!param.isAssignmentPattern()) {
	        if (!param.isIdentifier()) {
	          param.traverse(iifeVisitor, state);
	        }
	
	        continue;
	      }
	
	      var left = param.get("left");
	      var right = param.get("right");
	
	      //
	      if (exceedsLastNonDefault(i) || left.isPattern()) {
	        var placeholder = scope.generateUidIdentifier("x");
	        placeholder._isDefaultPlaceholder = true;
	        node.params[i] = placeholder;
	      } else {
	        node.params[i] = left.node;
	      }
	
	      //
	      if (!state.iife) {
	        if (right.isIdentifier() && scope.hasOwnBinding(right.node.name) && scope.getOwnBinding(right.node.name).kind !== "param") {
	          // the right hand side references a parameter
	          state.iife = true;
	        } else {
	          right.traverse(iifeVisitor, state);
	        }
	      }
	
	      pushDefNode(left.node, right.node, i);
	    }
	
	    // add declarations for trailing parameters
	    for (var i = lastNonDefaultParam + 1; i < node.params.length; i++) {
	      var param = node.params[i];
	      if (param._isDefaultPlaceholder) continue;
	
	      var declar = buildCutOff(param, argsIdentifier, t.numericLiteral(i));
	      declar._blockHoist = node.params.length - i;
	      body.push(declar);
	    }
	
	    // we need to cut off all trailing parameters
	    node.params = node.params.slice(0, lastNonDefaultParam);
	
	    if (state.iife) {
	      body.push(_babelHelperCallDelegate2["default"](path, scope));
	      path.set("body", t.blockStatement(body));
	    } else {
	      path.get("body").unshiftContainer("body", body);
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },

/***/ "./node_modules/babel-helper-call-delegate/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperHoistVariables = __webpack_require__("./node_modules/babel-helper-hoist-variables/lib/index.js");
	
	var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type { NodePath } from "babel-traverse";*/
	
	var visitor = {
	  enter: function enter(path, state) {
	    if (path.isThisExpression()) {
	      state.foundThis = true;
	    }
	
	    if (path.isReferencedIdentifier({ name: "arguments" })) {
	      state.foundArguments = true;
	    }
	  },
	
	  Function: function Function(path) {
	    path.skip();
	  }
	};
	
	exports["default"] = function (path /*: NodePath*/) {
	  var scope = arguments.length <= 1 || arguments[1] === undefined ? path.scope : arguments[1];
	  return (function () {
	    var node = path.node;
	
	    var container = t.functionExpression(null, [], node.body, node.generator, node.async);
	
	    var callee = container;
	    var args = [];
	
	    // todo: only hoist if necessary
	    _babelHelperHoistVariables2["default"](path, function (id) {
	      return scope.push({ id: id });
	    });
	
	    var state = {
	      foundThis: false,
	      foundArguments: false
	    };
	
	    path.traverse(visitor, state);
	
	    if (state.foundArguments) {
	      callee = t.memberExpression(container, t.identifier("apply"));
	      args = [];
	
	      if (state.foundThis) {
	        args.push(t.thisExpression());
	      }
	
	      if (state.foundArguments) {
	        if (!state.foundThis) args.push(t.nullLiteral());
	        args.push(t.identifier("arguments"));
	      }
	    }
	
	    var call = t.callExpression(callee, args);
	    if (node.generator) call = t.yieldExpression(call, true);
	
	    return t.returnStatement(call);
	  })();
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-hoist-variables/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var visitor = {
	  Scope: function Scope(path, state) {
	    if (state.kind === "let") path.skip();
	  },
	
	  Function: function Function(path) {
	    path.skip();
	  },
	
	  VariableDeclaration: function VariableDeclaration(path, state) {
	    if (state.kind && path.node.kind !== state.kind) return;
	
	    var nodes = [];
	
	    var declarations /*: Array<Object>*/ = path.get("declarations");
	    var firstId = undefined;
	
	    for (var _iterator = declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var declar = _ref;
	
	      firstId = declar.node.id;
	
	      if (declar.node.init) {
	        nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.node.id, declar.node.init)));
	      }
	
	      for (var _name in declar.getBindingIdentifiers()) {
	        state.emit(t.identifier(_name), _name);
	      }
	    }
	
	    // for (var i in test)
	    if (path.parentPath.isFor({ left: path.node })) {
	      path.replaceWith(firstId);
	    } else {
	      path.replaceWithMultiple(nodes);
	    }
	  }
	};
	
	exports["default"] = function (path, emit /*: Function*/) {
	  var kind /*: "var" | "let"*/ = arguments.length <= 2 || arguments[2] === undefined ? "var" : arguments[2];
	
	  path.traverse(visitor, { kind: kind, emit: emit });
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-parameters/lib/rest.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var buildRest = _babelTemplate2["default"]("\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n");
	
	var loadRest = _babelTemplate2["default"]("\n  ARGUMENTS.length <= INDEX ? undefined : ARGUMENTS[INDEX]\n");
	
	var memberExpressionOptimisationVisitor = {
	  Scope: function Scope(path, state) {
	    // check if this scope has a local binding that will shadow the rest parameter
	    if (!path.scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
	      path.skip();
	    }
	  },
	
	  Flow: function Flow(path) {
	    // don't touch reference in type annotations
	    path.skip();
	  },
	
	  Function: function Function(path, state) {
	    // Detect whether any reference to rest is contained in nested functions to
	    // determine if deopt is necessary.
	    var oldNoOptimise = state.noOptimise;
	    state.noOptimise = true;
	    path.traverse(memberExpressionOptimisationVisitor, state);
	    state.noOptimise = oldNoOptimise;
	
	    // Skip because optimizing references to rest would refer to the `arguments`
	    // of the nested function.
	    path.skip();
	  },
	
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var node = path.node;
	
	    // we can't guarantee the purity of arguments
	    if (node.name === "arguments") {
	      state.deopted = true;
	    }
	
	    // is this a referenced identifier and is it referencing the rest parameter?
	    if (node.name !== state.name) return;
	
	    if (state.noOptimise) {
	      state.deopted = true;
	    } else {
	      var parentPath = path.parentPath;
	
	      // ex: args[0]
	      if (parentPath.isMemberExpression({ computed: true, object: node })) {
	        // if we know that this member expression is referencing a number then
	        // we can safely optimise it
	        var prop = parentPath.get("property");
	        if (prop.isBaseType("number")) {
	          state.candidates.push({ cause: "indexGetter", path: path });
	          return;
	        }
	      }
	
	      // ex: args.length
	      if (parentPath.isMemberExpression({ computed: false, object: node })) {
	        var prop = parentPath.get("property");
	        if (prop.node.name === "length") {
	          state.candidates.push({ cause: "lengthGetter", path: path });
	          return;
	        }
	      }
	
	      // we can only do these optimizations if the rest variable would match
	      // the arguments exactly
	      // optimise single spread args in calls
	      // ex: fn(...args)
	      if (state.offset === 0 && parentPath.isSpreadElement()) {
	        var call = parentPath.parentPath;
	        if (call.isCallExpression() && call.node.arguments.length === 1) {
	          state.candidates.push({ cause: "argSpread", path: path });
	          return;
	        }
	      }
	
	      state.references.push(path);
	    }
	  },
	
	  /**
	   * Deopt on use of a binding identifier with the same name as our rest param.
	   *
	   * See https://github.com/babel/babel/issues/2091
	   */
	
	  BindingIdentifier: function BindingIdentifier(_ref2, state) {
	    var node = _ref2.node;
	
	    if (node.name === state.name) {
	      state.deopted = true;
	    }
	  }
	};
	function hasRest(node) {
	  return t.isRestElement(node.params[node.params.length - 1]);
	}
	
	function optimiseIndexGetter(path, argsId, offset) {
	  var index = undefined;
	
	  if (t.isNumericLiteral(path.parent.property)) {
	    index = t.numericLiteral(path.parent.property.value + offset);
	  } else {
	    index = t.binaryExpression("+", path.parent.property, t.numericLiteral(offset));
	  }
	
	  path.parentPath.replaceWith(loadRest({
	    ARGUMENTS: argsId,
	    INDEX: index
	  }));
	}
	
	function optimiseLengthGetter(path, argsLengthExpression, argsId, offset) {
	  if (offset) {
	    path.parentPath.replaceWith(t.binaryExpression("-", argsLengthExpression, t.numericLiteral(offset)));
	  } else {
	    path.replaceWith(argsId);
	  }
	}
	
	var visitor = {
	  Function: function Function(path) {
	    var node = path.node;
	    var scope = path.scope;
	
	    if (!hasRest(node)) return;
	
	    var rest = node.params.pop().argument;
	
	    var argsId = t.identifier("arguments");
	    var argsLengthExpression = t.memberExpression(argsId, t.identifier("length"));
	
	    // otherwise `arguments` will be remapped in arrow functions
	    argsId._shadowedFunctionLiteral = path;
	
	    // check and optimise for extremely common cases
	    var state = {
	      references: [],
	      offset: node.params.length,
	
	      argumentsNode: argsId,
	      outerBinding: scope.getBindingIdentifier(rest.name),
	
	      // candidate member expressions we could optimise if there are no other references
	      candidates: [],
	
	      // local rest binding name
	      name: rest.name,
	
	      /*
	      It may be possible to optimize the output code in certain ways, such as
	      not generating code to initialize an array (perhaps substituting direct
	      references to arguments[i] or arguments.length for reads of the
	      corresponding rest parameter property) or positioning the initialization
	      code so that it may not have to execute depending on runtime conditions.
	       This property tracks eligibility for optimization. "deopted" means give up
	      and don't perform optimization. For example, when any of rest's elements /
	      properties is assigned to at the top level, or referenced at all in a
	      nested function.
	      */
	      deopted: false
	    };
	
	    path.traverse(memberExpressionOptimisationVisitor, state);
	
	    // There are only "shorthand" references
	    if (!state.deopted && !state.references.length) {
	      for (var _iterator = (state.candidates /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var _path = _ref.path;
	        var cause = _ref.cause;
	
	        switch (cause) {
	          case "indexGetter":
	            optimiseIndexGetter(_path, argsId, state.offset);
	            break;
	          case "lengthGetter":
	            optimiseLengthGetter(_path, argsLengthExpression, argsId, state.offset);
	            break;
	          default:
	            _path.replaceWith(argsId);
	        }
	      }
	      return;
	    }
	
	    state.references = state.references.concat(state.candidates.map(function (_ref3) {
	      var path = _ref3.path;
	      return path;
	    }));
	
	    // deopt shadowed functions as transforms like regenerator may try touch the allocation loop
	    state.deopted = state.deopted || !!node.shadow;
	
	    var start = t.numericLiteral(node.params.length);
	    var key = scope.generateUidIdentifier("key");
	    var len = scope.generateUidIdentifier("len");
	
	    var arrKey = key;
	    var arrLen = len;
	    if (node.params.length) {
	      // this method has additional params, so we need to subtract
	      // the index of the current argument position from the
	      // position in the array that we want to populate
	      arrKey = t.binaryExpression("-", key, start);
	
	      // we need to work out the size of the array that we're
	      // going to store all the rest parameters
	      //
	      // we need to add a check to avoid constructing the array
	      // with <0 if there are less arguments than params as it'll
	      // cause an error
	      arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.numericLiteral(0));
	    }
	
	    var loop = buildRest({
	      ARGUMENTS: argsId,
	      ARRAY_KEY: arrKey,
	      ARRAY_LEN: arrLen,
	      START: start,
	      ARRAY: rest,
	      KEY: key,
	      LEN: len
	    });
	
	    if (state.deopted) {
	      loop._blockHoist = node.params.length + 1;
	      node.body.body.unshift(loop);
	    } else {
	      // perform allocation at the lowest common ancestor of all references
	      loop._blockHoist = 1;
	
	      var target = path.getEarliestCommonAncestorFrom(state.references).getStatementParent();
	
	      // don't perform the allocation inside a loop
	      target.findParent(function (path) {
	        if (path.isLoop()) {
	          target = path;
	        } else {
	          // Stop crawling up if this is a function.
	          return path.isFunction();
	        }
	      });
	
	      target.insertBefore(loop);
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref5) {
	  var t = _ref5.types;
	
	  /**
	   * Test if a VariableDeclaration's declarations contains any Patterns.
	   */
	
	  function variableDeclarationHasPattern(node) {
	    for (var _iterator = (node.declarations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var declar = _ref;
	
	      if (t.isPattern(declar.id)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * Test if an ArrayPattern's elements contain any RestElements.
	   */
	
	  function hasRest(pattern) {
	    for (var _iterator2 = (pattern.elements /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var elem = _ref2;
	
	      if (t.isRestElement(elem)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  var arrayUnpackVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	      if (state.bindings[path.node.name]) {
	        state.deopt = true;
	        path.stop();
	      }
	    }
	  };
	
	  var DestructuringTransformer = (function () {
	    function DestructuringTransformer(opts) {
	      _classCallCheck(this, DestructuringTransformer);
	
	      this.blockHoist = opts.blockHoist;
	      this.operator = opts.operator;
	      this.arrays = {};
	      this.nodes = opts.nodes || [];
	      this.scope = opts.scope;
	      this.file = opts.file;
	      this.kind = opts.kind;
	    }
	
	    DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
	      var op = this.operator;
	      if (t.isMemberExpression(id)) op = "=";
	
	      var node = undefined;
	
	      if (op) {
	        node = t.expressionStatement(t.assignmentExpression(op, id, init));
	      } else {
	        node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
	      }
	
	      node._blockHoist = this.blockHoist;
	
	      return node;
	    };
	
	    DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
	      var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
	      declar._blockHoist = this.blockHoist;
	      return declar;
	    };
	
	    DestructuringTransformer.prototype.push = function push(id, init) {
	      if (t.isObjectPattern(id)) {
	        this.pushObjectPattern(id, init);
	      } else if (t.isArrayPattern(id)) {
	        this.pushArrayPattern(id, init);
	      } else if (t.isAssignmentPattern(id)) {
	        this.pushAssignmentPattern(id, init);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(id, init));
	      }
	    };
	
	    DestructuringTransformer.prototype.toArray = function toArray(node, count) {
	      if (this.file.opts.loose || t.isIdentifier(node) && this.arrays[node.name]) {
	        return node;
	      } else {
	        return this.scope.toArray(node, count);
	      }
	    };
	
	    DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {
	      // we need to assign the current value of the assignment to avoid evaluating
	      // it more than once
	
	      var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);
	
	      var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
	      declar._blockHoist = this.blockHoist;
	      this.nodes.push(declar);
	
	      //
	
	      var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);
	
	      var left = pattern.left;
	      if (t.isPattern(left)) {
	        var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
	        tempValueDefault._blockHoist = this.blockHoist;
	
	        this.nodes.push(tempValueDefault);
	        this.push(left, tempValueRef);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(left, tempConditional));
	      }
	    };
	
	    DestructuringTransformer.prototype.pushObjectRest = function pushObjectRest(pattern, objRef, spreadProp, spreadPropIndex) {
	      // get all the keys that appear in this object before the current spread
	
	      var keys = [];
	
	      for (var i = 0; i < pattern.properties.length; i++) {
	        var prop = pattern.properties[i];
	
	        // we've exceeded the index of the spread property to all properties to the
	        // right need to be ignored
	        if (i >= spreadPropIndex) break;
	
	        // ignore other spread properties
	        if (t.isRestProperty(prop)) continue;
	
	        var key = prop.key;
	        if (t.isIdentifier(key) && !prop.computed) key = t.stringLiteral(prop.key.name);
	        keys.push(key);
	      }
	
	      keys = t.arrayExpression(keys);
	
	      //
	
	      var value = t.callExpression(this.file.addHelper("objectWithoutProperties"), [objRef, keys]);
	      this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
	    };
	
	    DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
	      if (t.isLiteral(prop.key)) prop.computed = true;
	
	      var pattern = prop.value;
	      var objRef = t.memberExpression(propRef, prop.key, prop.computed);
	
	      if (t.isPattern(pattern)) {
	        this.push(pattern, objRef);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(pattern, objRef));
	      }
	    };
	
	    DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {
	      // https://github.com/babel/babel/issues/681
	
	      if (!pattern.properties.length) {
	        this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("objectDestructuringEmpty"), [objRef])));
	      }
	
	      // if we have more than one properties in this pattern and the objectRef is a
	      // member expression then we need to assign it to a temporary variable so it's
	      // only evaluated once
	
	      if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {
	        var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
	        this.nodes.push(this.buildVariableDeclaration(temp, objRef));
	        objRef = temp;
	      }
	
	      //
	
	      for (var i = 0; i < pattern.properties.length; i++) {
	        var prop = pattern.properties[i];
	        if (t.isRestProperty(prop)) {
	          this.pushObjectRest(pattern, objRef, prop, i);
	        } else {
	          this.pushObjectProperty(prop, objRef);
	        }
	      }
	    };
	
	    DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
	      // not an array so there's no way we can deal with this
	      if (!t.isArrayExpression(arr)) return false;
	
	      // pattern has less elements than the array and doesn't have a rest so some
	      // elements wont be evaluated
	      if (pattern.elements.length > arr.elements.length) return;
	      if (pattern.elements.length < arr.elements.length && !hasRest(pattern)) return false;
	
	      for (var _iterator3 = (pattern.elements /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;
	
	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }
	
	        var elem = _ref3;
	
	        // deopt on holes
	        if (!elem) return false;
	
	        // deopt on member expressions as they may be included in the RHS
	        if (t.isMemberExpression(elem)) return false;
	      }
	
	      for (var _iterator4 = (arr.elements /*: Array*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	        var _ref4;
	
	        if (_isArray4) {
	          if (_i4 >= _iterator4.length) break;
	          _ref4 = _iterator4[_i4++];
	        } else {
	          _i4 = _iterator4.next();
	          if (_i4.done) break;
	          _ref4 = _i4.value;
	        }
	
	        var elem = _ref4;
	
	        // deopt on spread elements
	        if (t.isSpreadElement(elem)) return false;
	      }
	
	      // deopt on reference to left side identifiers
	      var bindings = t.getBindingIdentifiers(pattern);
	      var state = { deopt: false, bindings: bindings };
	      this.scope.traverse(arr, arrayUnpackVisitor, state);
	      return !state.deopt;
	    };
	
	    DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
	      for (var i = 0; i < pattern.elements.length; i++) {
	        var elem = pattern.elements[i];
	        if (t.isRestElement(elem)) {
	          this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
	        } else {
	          this.push(elem, arr.elements[i]);
	        }
	      }
	    };
	
	    DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
	      if (!pattern.elements) return;
	
	      // optimise basic array destructuring of an array expression
	      //
	      // we can't do this to a pattern of unequal size to it's right hand
	      // array expression as then there will be values that wont be evaluated
	      //
	      // eg: let [a, b] = [1, 2];
	
	      if (this.canUnpackArrayPattern(pattern, arrayRef)) {
	        return this.pushUnpackedArrayPattern(pattern, arrayRef);
	      }
	
	      // if we have a rest then we need all the elements so don't tell
	      // `scope.toArray` to only get a certain amount
	
	      var count = !hasRest(pattern) && pattern.elements.length;
	
	      // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will
	      // return a locally bound identifier if it's been inferred to be an array,
	      // otherwise it'll be a call to a helper that will ensure it's one
	
	      var toArray = this.toArray(arrayRef, count);
	
	      if (t.isIdentifier(toArray)) {
	        // we've been given an identifier so it must have been inferred to be an
	        // array
	        arrayRef = toArray;
	      } else {
	        arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
	        this.arrays[arrayRef.name] = true;
	        this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
	      }
	
	      //
	
	      for (var i = 0; i < pattern.elements.length; i++) {
	        var elem = pattern.elements[i];
	
	        // hole
	        if (!elem) continue;
	
	        var elemRef = undefined;
	
	        if (t.isRestElement(elem)) {
	          elemRef = this.toArray(arrayRef);
	
	          if (i > 0) {
	            elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.numericLiteral(i)]);
	          }
	
	          // set the element to the rest element argument since we've dealt with it
	          // being a rest already
	          elem = elem.argument;
	        } else {
	          elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);
	        }
	
	        this.push(elem, elemRef);
	      }
	    };
	
	    DestructuringTransformer.prototype.init = function init(pattern, ref) {
	      // trying to destructure a value that we can't evaluate more than once so we
	      // need to save it to a variable
	
	      if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
	        var memo = this.scope.maybeGenerateMemoised(ref, true);
	        if (memo) {
	          this.nodes.push(this.buildVariableDeclaration(memo, ref));
	          ref = memo;
	        }
	      }
	
	      //
	
	      this.push(pattern, ref);
	
	      return this.nodes;
	    };
	
	    return DestructuringTransformer;
	  })();
	
	  return {
	    visitor: {
	      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
	        var declaration = path.get("declaration");
	        if (!declaration.isVariableDeclaration()) return;
	        if (!variableDeclarationHasPattern(declaration.node)) return;
	
	        var specifiers = [];
	
	        for (var _name in path.getOuterBindingIdentifiers(path)) {
	          var id = t.identifier(_name);
	          specifiers.push(t.exportSpecifier(id, id));
	        }
	
	        // Split the declaration and export list into two declarations so that the variable
	        // declaration can be split up later without needing to worry about not being a
	        // top-level statement.
	        path.replaceWith(declaration.node);
	        path.insertAfter(t.exportNamedDeclaration(null, specifiers));
	      },
	
	      ForXStatement: function ForXStatement(path, file) {
	        var node = path.node;
	        var scope = path.scope;
	
	        var left = node.left;
	
	        if (t.isPattern(left)) {
	          // for ({ length: k } in { abc: 3 });
	
	          var temp = scope.generateUidIdentifier("ref");
	
	          node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);
	
	          path.ensureBlock();
	
	          node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));
	
	          return;
	        }
	
	        if (!t.isVariableDeclaration(left)) return;
	
	        var pattern = left.declarations[0].id;
	        if (!t.isPattern(pattern)) return;
	
	        var key = scope.generateUidIdentifier("ref");
	        node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);
	
	        var nodes = [];
	
	        var destructuring = new DestructuringTransformer({
	          kind: left.kind,
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });
	
	        destructuring.init(pattern, key);
	
	        path.ensureBlock();
	
	        var block = node.body;
	        block.body = nodes.concat(block.body);
	      },
	
	      CatchClause: function CatchClause(_ref6, file) {
	        var node = _ref6.node;
	        var scope = _ref6.scope;
	
	        var pattern = node.param;
	        if (!t.isPattern(pattern)) return;
	
	        var ref = scope.generateUidIdentifier("ref");
	        node.param = ref;
	
	        var nodes = [];
	
	        var destructuring = new DestructuringTransformer({
	          kind: "let",
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });
	        destructuring.init(pattern, ref);
	
	        node.body.body = nodes.concat(node.body.body);
	      },
	
	      AssignmentExpression: function AssignmentExpression(path, file) {
	        var node = path.node;
	        var scope = path.scope;
	
	        if (!t.isPattern(node.left)) return;
	
	        var nodes = [];
	
	        var destructuring = new DestructuringTransformer({
	          operator: node.operator,
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });
	
	        var ref = undefined;
	        if (path.isCompletionRecord() || !path.parentPath.isExpressionStatement()) {
	          ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");
	
	          nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));
	
	          if (t.isArrayExpression(node.right)) {
	            destructuring.arrays[ref.name] = true;
	          }
	        }
	
	        destructuring.init(node.left, ref || node.right);
	
	        if (ref) {
	          nodes.push(t.expressionStatement(ref));
	        }
	
	        path.replaceWithMultiple(nodes);
	      },
	
	      VariableDeclaration: function VariableDeclaration(path, file) {
	        var node = path.node;
	        var scope = path.scope;
	        var parent = path.parent;
	
	        if (t.isForXStatement(parent)) return;
	        if (!parent || !path.container) return; // i don't know why this is necessary - TODO
	        if (!variableDeclarationHasPattern(node)) return;
	
	        var nodes = [];
	        var declar = undefined;
	
	        for (var i = 0; i < node.declarations.length; i++) {
	          declar = node.declarations[i];
	
	          var patternId = declar.init;
	          var pattern = declar.id;
	
	          var destructuring = new DestructuringTransformer({
	            blockHoist: node._blockHoist,
	            nodes: nodes,
	            scope: scope,
	            kind: node.kind,
	            file: file
	          });
	
	          if (t.isPattern(pattern)) {
	            destructuring.init(pattern, patternId);
	
	            if (+i !== node.declarations.length - 1) {
	              // we aren't the last declarator so let's just make the
	              // last transformed node inherit from us
	              t.inherits(nodes[nodes.length - 1], declar);
	            }
	          } else {
	            nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
	          }
	        }
	
	        path.replaceWithMultiple(nodes);
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-block-scoping/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _classCallCheck = __webpack_require__("./node_modules/babel-runtime/helpers/class-call-check.js")["default"];
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _tdz = __webpack_require__("./node_modules/babel-plugin-transform-es2015-block-scoping/lib/tdz.js");
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _lodashObjectValues = __webpack_require__("./node_modules/lodash/object/values.js");
	
	var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);
	
	var _lodashObjectExtend = __webpack_require__("./node_modules/lodash/object/extend.js");
	
	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	/*:: import type NodePath from "babel-traverse";*/
	/*:: import type Scope from "babel-traverse";*/
	/*:: import type File from "../../../file";*/
	exports["default"] = function () {
	  return {
	    visitor: {
	      VariableDeclaration: function VariableDeclaration(path, file) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;
	
	        if (!isBlockScoped(node)) return;
	        convertBlockScopedToVar(node, parent, scope);
	
	        if (node._tdzThis) {
	          var nodes = [node];
	
	          for (var i = 0; i < node.declarations.length; i++) {
	            var decl = node.declarations[i];
	            if (decl.init) {
	              var assign = t.assignmentExpression("=", decl.id, decl.init);
	              assign._ignoreBlockScopingTDZ = true;
	              nodes.push(t.expressionStatement(assign));
	            }
	            decl.init = file.addHelper("temporalUndefined");
	          }
	
	          node._blockHoist = 2;
	
	          if (path.isCompletionRecord()) {
	            // ensure we don't break completion record semantics by returning
	            // the initialiser of the last declarator
	            nodes.push(t.expressionStatement(scope.buildUndefinedNode()));
	          }
	
	          path.replaceWithMultiple(nodes);
	        }
	      },
	
	      Loop: function Loop(path, file) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;
	
	        t.ensureBlock(node);
	        var blockScoping = new BlockScoping(path, path.get("body"), parent, scope, file);
	        var replace = blockScoping.run();
	        if (replace) path.replaceWith(replace);
	      },
	
	      "BlockStatement|Program": function BlockStatementProgram(path, file) {
	        if (!t.isLoop(path.parent)) {
	          var blockScoping = new BlockScoping(null, path, path.parent, path.scope, file);
	          blockScoping.run();
	        }
	      }
	    }
	  };
	};
	
	var buildRetCheck = _babelTemplate2["default"]("\n  if (typeof RETURN === \"object\") return RETURN.v;\n");
	
	function isBlockScoped(node) {
	  if (!t.isVariableDeclaration(node)) return false;
	  if (node[t.BLOCK_SCOPED_SYMBOL]) return true;
	  if (node.kind !== "let" && node.kind !== "const") return false;
	  return true;
	}
	
	function convertBlockScopedToVar(node, parent, scope) {
	  // https://github.com/babel/babel/issues/255
	  if (!t.isFor(parent)) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      declar.init = declar.init || scope.buildUndefinedNode();
	    }
	  }
	
	  node[t.BLOCK_SCOPED_SYMBOL] = true;
	  node.kind = "var";
	}
	
	function isVar(node) {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !isBlockScoped(node);
	}
	
	function replace(path, node, scope, remaps) {
	  var remap = remaps[node.name];
	  if (!remap) return;
	
	  var ownBinding = scope.getBindingIdentifier(node.name);
	  if (ownBinding === remap.binding) {
	    node.name = remap.uid;
	  } else {
	    // scope already has it's own binding that doesn't
	    // match the one we have a stored replacement for
	    if (path) path.skip();
	  }
	}
	
	var replaceVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, remaps) {
	    replace(path, path.node, path.scope, remaps);
	  },
	
	  AssignmentExpression: function AssignmentExpression(path, remaps) {
	    var ids = path.getBindingIdentifiers();
	    for (var _name in ids) {
	      replace(null, ids[_name], path.scope, remaps);
	    }
	  }
	};
	
	function traverseReplace(node, parent, scope, remaps) {
	  if (t.isIdentifier(node)) {
	    replace(node, parent, scope, remaps);
	  }
	
	  if (t.isAssignmentExpression(node)) {
	    var ids = t.getBindingIdentifiers(node);
	    for (var _name2 in ids) {
	      replace(ids[_name2], parent, scope, remaps);
	    }
	  }
	
	  scope.traverse(node, replaceVisitor, remaps);
	}
	
	var letReferenceBlockVisitor = _babelTraverse2["default"].visitors.merge([{
	  Function: function Function(path, state) {
	    path.traverse(letReferenceFunctionVisitor, state);
	    return path.skip();
	  }
	}, _tdz.visitor]);
	
	var letReferenceFunctionVisitor = _babelTraverse2["default"].visitors.merge([{
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var ref = state.letReferences[path.node.name];
	
	    // not a part of our scope
	    if (!ref) return;
	
	    // this scope has a variable with the same name so it couldn't belong
	    // to our let scope
	    var localBinding = path.scope.getBindingIdentifier(path.node.name);
	    if (localBinding && localBinding !== ref) return;
	
	    state.closurify = true;
	  }
	}, _tdz.visitor]);
	
	var hoistVarDeclarationsVisitor = {
	  enter: function enter(path, self) {
	    var node = path.node;
	    var parent = path.parent;
	
	    if (path.isForStatement()) {
	      if (isVar(node.init, node)) {
	        var nodes = self.pushDeclar(node.init);
	        if (nodes.length === 1) {
	          node.init = nodes[0];
	        } else {
	          node.init = t.sequenceExpression(nodes);
	        }
	      }
	    } else if (path.isFor()) {
	      if (isVar(node.left, node)) {
	        self.pushDeclar(node.left);
	        node.left = node.left.declarations[0].id;
	      }
	    } else if (isVar(node, parent)) {
	      path.replaceWithMultiple(self.pushDeclar(node).map(function (expr) {
	        return t.expressionStatement(expr);
	      }));
	    } else if (path.isFunction()) {
	      return path.skip();
	    }
	  }
	};
	
	var loopLabelVisitor = {
	  LabeledStatement: function LabeledStatement(_ref, state) {
	    var node = _ref.node;
	
	    state.innerLabels.push(node.label.name);
	  }
	};
	
	var continuationVisitor = {
	  enter: function enter(path, state) {
	    if (path.isAssignmentExpression() || path.isUpdateExpression()) {
	      var bindings = path.getBindingIdentifiers();
	      for (var _name3 in bindings) {
	        if (state.outsideReferences[_name3] !== path.scope.getBindingIdentifier(_name3)) continue;
	        state.reassignments[_name3] = true;
	      }
	    }
	  }
	};
	
	function loopNodeTo(node) {
	  if (t.isBreakStatement(node)) {
	    return "break";
	  } else if (t.isContinueStatement(node)) {
	    return "continue";
	  }
	}
	
	var loopVisitor = {
	  Loop: function Loop(path, state) {
	    var oldIgnoreLabeless = state.ignoreLabeless;
	    state.ignoreLabeless = true;
	    path.traverse(loopVisitor, state);
	    state.ignoreLabeless = oldIgnoreLabeless;
	    path.skip();
	  },
	
	  Function: function Function(path) {
	    path.skip();
	  },
	
	  SwitchCase: function SwitchCase(path, state) {
	    var oldInSwitchCase = state.inSwitchCase;
	    state.inSwitchCase = true;
	    path.traverse(loopVisitor, state);
	    state.inSwitchCase = oldInSwitchCase;
	    path.skip();
	  },
	
	  "BreakStatement|ContinueStatement|ReturnStatement": function BreakStatementContinueStatementReturnStatement(path, state) {
	    var node = path.node;
	    var parent = path.parent;
	    var scope = path.scope;
	
	    if (node[this.LOOP_IGNORE]) return;
	
	    var replace = undefined;
	    var loopText = loopNodeTo(node);
	
	    if (loopText) {
	      if (node.label) {
	        // we shouldn't be transforming this because it exists somewhere inside
	        if (state.innerLabels.indexOf(node.label.name) >= 0) {
	          return;
	        }
	
	        loopText = loopText + "|" + node.label.name;
	      } else {
	        // we shouldn't be transforming these statements because
	        // they don't refer to the actual loop we're scopifying
	        if (state.ignoreLabeless) return;
	
	        //
	        if (state.inSwitchCase) return;
	
	        // break statements mean something different in this context
	        if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;
	      }
	
	      state.hasBreakContinue = true;
	      state.map[loopText] = node;
	      replace = t.stringLiteral(loopText);
	    }
	
	    if (path.isReturnStatement()) {
	      state.hasReturn = true;
	      replace = t.objectExpression([t.objectProperty(t.identifier("v"), node.argument || scope.buildUndefinedNode())]);
	    }
	
	    if (replace) {
	      replace = t.returnStatement(replace);
	      replace[this.LOOP_IGNORE] = true;
	      path.skip();
	      path.replaceWith(t.inherits(replace, node));
	    }
	  }
	};
	
	var BlockScoping = (function () {
	  function BlockScoping(loopPath /*:: ?: NodePath*/, blockPath /*: NodePath*/, parent /*: Object*/, scope /*: Scope*/, file /*: File*/) {
	    _classCallCheck(this, BlockScoping);
	
	    this.parent = parent;
	    this.scope = scope;
	    this.file = file;
	
	    this.blockPath = blockPath;
	    this.block = blockPath.node;
	
	    this.outsideLetReferences = _Object$create(null);
	    this.hasLetReferences = false;
	    this.letReferences = _Object$create(null);
	    this.body = [];
	
	    if (loopPath) {
	      this.loopParent = loopPath.parent;
	      this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
	      this.loopPath = loopPath;
	      this.loop = loopPath.node;
	    }
	  }
	
	  /**
	   * Start the ball rolling.
	   */
	
	  BlockScoping.prototype.run = function run() {
	    var block = this.block;
	    if (block._letDone) return;
	    block._letDone = true;
	
	    var needsClosure = this.getLetReferences();
	
	    // this is a block within a `Function/Program` so we can safely leave it be
	    if (t.isFunction(this.parent) || t.isProgram(this.block)) return;
	
	    // we can skip everything
	    if (!this.hasLetReferences) return;
	
	    if (needsClosure) {
	      this.wrapClosure();
	    } else {
	      this.remap();
	    }
	
	    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
	      return t.labeledStatement(this.loopLabel, this.loop);
	    }
	  };
	
	  BlockScoping.prototype.remap = function remap() {
	    var hasRemaps = false;
	    var letRefs = this.letReferences;
	    var scope = this.scope;
	
	    // alright, so since we aren't wrapping this block in a closure
	    // we have to check if any of our let variables collide with
	    // those in upper scopes and then if they do, generate a uid
	    // for them and replace all references with it
	    var remaps = _Object$create(null);
	
	    for (var key in letRefs) {
	      // just an Identifier node we collected in `getLetReferences`
	      // this is the defining identifier of a declaration
	      var ref = letRefs[key];
	
	      // todo: could skip this if the colliding binding is in another function
	      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
	        var uid = scope.generateUidIdentifier(ref.name).name;
	        ref.name = uid;
	
	        hasRemaps = true;
	        remaps[key] = remaps[uid] = {
	          binding: ref,
	          uid: uid
	        };
	      }
	    }
	
	    if (!hasRemaps) return;
	
	    //
	
	    var loop = this.loop;
	    if (loop) {
	      traverseReplace(loop.right, loop, scope, remaps);
	      traverseReplace(loop.test, loop, scope, remaps);
	      traverseReplace(loop.update, loop, scope, remaps);
	    }
	
	    this.blockPath.traverse(replaceVisitor, remaps);
	  };
	
	  BlockScoping.prototype.wrapClosure = function wrapClosure() {
	    var block = this.block;
	
	    var outsideRefs = this.outsideLetReferences;
	
	    // remap loop heads with colliding variables
	    if (this.loop) {
	      for (var _name4 in outsideRefs) {
	        var id = outsideRefs[_name4];
	
	        if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
	          delete outsideRefs[id.name];
	          delete this.letReferences[id.name];
	
	          this.scope.rename(id.name);
	
	          this.letReferences[id.name] = id;
	          outsideRefs[id.name] = id;
	        }
	      }
	    }
	
	    // if we're inside of a for loop then we search to see if there are any
	    // `break`s, `continue`s, `return`s etc
	    this.has = this.checkLoop();
	
	    // hoist let references to retain scope
	    this.hoistVarDeclarations();
	
	    // turn outsideLetReferences into an array
	    var params = _lodashObjectValues2["default"](outsideRefs);
	    var args = _lodashObjectValues2["default"](outsideRefs);
	
	    // build the closure that we're going to wrap the block with
	    var fn = t.functionExpression(null, params, t.blockStatement(block.body));
	    fn.shadow = true;
	
	    // continuation
	    this.addContinuations(fn);
	
	    // replace the current block body with the one we're going to build
	    block.body = this.body;
	
	    var ref = fn;
	
	    if (this.loop) {
	      ref = this.scope.generateUidIdentifier("loop");
	      this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
	    }
	
	    // build a call and a unique id that we can assign the return value to
	    var call = t.callExpression(ref, args);
	    var ret = this.scope.generateUidIdentifier("ret");
	
	    // handle generators
	    var hasYield = _babelTraverse2["default"].hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
	    if (hasYield) {
	      fn.generator = true;
	      call = t.yieldExpression(call, true);
	    }
	
	    // handlers async functions
	    var hasAsync = _babelTraverse2["default"].hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
	    if (hasAsync) {
	      fn.async = true;
	      call = t.awaitExpression(call);
	    }
	
	    this.buildClosure(ret, call);
	  };
	
	  /**
	   * Push the closure to the body.
	   */
	
	  BlockScoping.prototype.buildClosure = function buildClosure(ret /*: { type: "Identifier" }*/, call /*: { type: "CallExpression" }*/) {
	    var has = this.has;
	    if (has.hasReturn || has.hasBreakContinue) {
	      this.buildHas(ret, call);
	    } else {
	      this.body.push(t.expressionStatement(call));
	    }
	  };
	
	  /**
	   * If any of the outer let variables are reassigned then we need to rename them in
	   * the closure so we can get direct access to the outer variable to continue the
	   * iteration with bindings based on each iteration.
	   *
	   * Reference: https://github.com/babel/babel/issues/1078
	   */
	
	  BlockScoping.prototype.addContinuations = function addContinuations(fn) {
	    var state = {
	      reassignments: {},
	      outsideReferences: this.outsideLetReferences
	    };
	
	    this.scope.traverse(fn, continuationVisitor, state);
	
	    for (var i = 0; i < fn.params.length; i++) {
	      var param = fn.params[i];
	      if (!state.reassignments[param.name]) continue;
	
	      var newParam = this.scope.generateUidIdentifier(param.name);
	      fn.params[i] = newParam;
	
	      this.scope.rename(param.name, newParam.name, fn);
	
	      // assign outer reference as it's been modified internally and needs to be retained
	      fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
	    }
	  };
	
	  BlockScoping.prototype.getLetReferences = function getLetReferences() {
	    var block = this.block;
	
	    var declarators = [];
	
	    if (this.loop) {
	      var init = this.loop.left || this.loop.init;
	      if (isBlockScoped(init)) {
	        declarators.push(init);
	        _lodashObjectExtend2["default"](this.outsideLetReferences, t.getBindingIdentifiers(init));
	      }
	    }
	
	    //
	    if (block.body) {
	      for (var i = 0; i < block.body.length; i++) {
	        var declar = block.body[i];
	        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar) || isBlockScoped(declar)) {
	          if (isBlockScoped(declar)) convertBlockScopedToVar(declar, block, this.scope);
	          declarators = declarators.concat(declar.declarations || declar);
	        }
	      }
	    }
	
	    //
	    for (var i = 0; i < declarators.length; i++) {
	      var declar = declarators[i];
	      var keys = t.getBindingIdentifiers(declar);
	      _lodashObjectExtend2["default"](this.letReferences, keys);
	      this.hasLetReferences = true;
	    }
	
	    // no let references so we can just quit
	    if (!this.hasLetReferences) return;
	
	    var state = {
	      letReferences: this.letReferences,
	      closurify: false,
	      file: this.file
	    };
	
	    // traverse through this block, stopping on functions and checking if they
	    // contain any local let references
	    this.blockPath.traverse(letReferenceBlockVisitor, state);
	
	    return state.closurify;
	  };
	
	  /**
	   * If we're inside of a loop then traverse it and check if it has one of
	   * the following node types `ReturnStatement`, `BreakStatement`,
	   * `ContinueStatement` and replace it with a return value that we can track
	   * later on.
	   */
	
	  BlockScoping.prototype.checkLoop = function checkLoop() /*: Object*/ {
	    var state = {
	      hasBreakContinue: false,
	      ignoreLabeless: false,
	      inSwitchCase: false,
	      innerLabels: [],
	      hasReturn: false,
	      isLoop: !!this.loop,
	      map: {},
	      LOOP_IGNORE: _Symbol()
	    };
	
	    this.blockPath.traverse(loopLabelVisitor, state);
	    this.blockPath.traverse(loopVisitor, state);
	
	    return state;
	  };
	
	  /**
	   * Hoist all let declarations in this block to before it so they retain scope
	   * once we wrap everything in a closure.
	   */
	
	  BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
	    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
	  };
	
	  /**
	   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with
	   * their declarations hoisted to before the closure wrapper.
	   */
	
	  BlockScoping.prototype.pushDeclar = function pushDeclar(node /*: { type: "VariableDeclaration" }*/) /*: Array<Object>*/ {
	    var declars = [];
	    var names = t.getBindingIdentifiers(node);
	    for (var _name5 in names) {
	      declars.push(t.variableDeclarator(names[_name5]));
	    }
	
	    this.body.push(t.variableDeclaration(node.kind, declars));
	
	    var replace = [];
	
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      if (!declar.init) continue;
	
	      var expr = t.assignmentExpression("=", declar.id, declar.init);
	      replace.push(t.inherits(expr, declar));
	    }
	
	    return replace;
	  };
	
	  BlockScoping.prototype.buildHas = function buildHas(ret /*: { type: "Identifier" }*/, call /*: { type: "CallExpression" }*/) {
	    var body = this.body;
	
	    body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));
	
	    var retCheck = undefined;
	    var has = this.has;
	    var cases = [];
	
	    if (has.hasReturn) {
	      // typeof ret === "object"
	      retCheck = buildRetCheck({
	        RETURN: ret
	      });
	    }
	
	    if (has.hasBreakContinue) {
	      for (var key in has.map) {
	        cases.push(t.switchCase(t.stringLiteral(key), [has.map[key]]));
	      }
	
	      if (has.hasReturn) {
	        cases.push(t.switchCase(null, [retCheck]));
	      }
	
	      if (cases.length === 1) {
	        var single = cases[0];
	        body.push(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0]));
	      } else {
	        // https://github.com/babel/babel/issues/998
	        for (var i = 0; i < cases.length; i++) {
	          var caseConsequent = cases[i].consequent[0];
	          if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
	            caseConsequent.label = this.loopLabel = this.loopLabel || this.scope.generateUidIdentifier("loop");
	          }
	        }
	
	        body.push(t.switchStatement(ret, cases));
	      }
	    } else {
	      if (has.hasReturn) {
	        body.push(retCheck);
	      }
	    }
	  };
	
	  return BlockScoping;
	})();
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-block-scoping/lib/tdz.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function getTDZStatus(refPath, bindingPath) {
	  var executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);
	
	  if (executionStatus === "before") {
	    return "inside";
	  } else if (executionStatus === "after") {
	    return "outside";
	  } else {
	    return "maybe";
	  }
	}
	
	function buildTDZAssert(node, file) {
	  return t.callExpression(file.addHelper("temporalRef"), [node, t.stringLiteral(node.name), file.addHelper("temporalUndefined")]);
	}
	
	function isReference(node, scope, state) {
	  var declared = state.letReferences[node.name];
	  if (!declared) return false;
	
	  // declared node is different in this scope
	  return scope.getBindingIdentifier(node.name) === declared;
	}
	
	var visitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    if (!this.file.opts.tdz) return;
	
	    var node = path.node;
	    var parent = path.parent;
	    var scope = path.scope;
	
	    if (path.parentPath.isFor({ left: node })) return;
	    if (!isReference(node, scope, state)) return;
	
	    var bindingPath = scope.getBinding(node.name).path;
	
	    var status = getTDZStatus(path, bindingPath);
	    if (status === "inside") return;
	
	    if (status === "maybe") {
	      var assert = buildTDZAssert(node, state.file);
	
	      // add tdzThis to parent variable declarator so it's exploded
	      bindingPath.parent._tdzThis = true;
	
	      path.skip();
	
	      if (path.parentPath.isUpdateExpression()) {
	        if (parent._ignoreBlockScopingTDZ) return;
	        path.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
	      } else {
	        path.replaceWith(assert);
	      }
	    } else if (status === "outside") {
	      path.replaceWith(t.throwStatement(t.inherits(t.newExpression(t.identifier("ReferenceError"), [t.stringLiteral(node.name + " is not defined - temporal dead zone")]), node)));
	    }
	  },
	
	  AssignmentExpression: {
	    exit: function exit(path, state) {
	      if (!this.file.opts.tdz) return;
	
	      var node = path.node;
	
	      if (node._ignoreBlockScopingTDZ) return;
	
	      var nodes = [];
	      var ids = path.getBindingIdentifiers();
	
	      for (var _name in ids) {
	        var id = ids[_name];
	
	        if (isReference(id, path.scope, state)) {
	          nodes.push(buildTDZAssert(id, state.file));
	        }
	      }
	
	      if (nodes.length) {
	        node._ignoreBlockScopingTDZ = true;
	        nodes.push(node);
	        path.replaceWithMultiple(nodes.map(t.expressionStatement));
	      }
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-typeof-symbol/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  var IGNORE = _Symbol();
	
	  return {
	    visitor: {
	      Scope: function Scope(_ref2) {
	        var scope = _ref2.scope;
	
	        if (!scope.getBinding("Symbol")) {
	          return;
	        }
	
	        scope.rename("Symbol");
	      },
	
	      UnaryExpression: function UnaryExpression(path) {
	        var node = path.node;
	        var parent = path.parent;
	
	        if (node[IGNORE]) return;
	        if (path.find(function (path) {
	          return path.node && !!path.node._generated;
	        })) return;
	
	        if (path.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {
	          // optimise `typeof foo === "string"` since we can determine that they'll never need to handle symbols
	          var opposite = path.getOpposite();
	          if (opposite.isLiteral() && opposite.node.value !== "symbol" && opposite.node.value !== "object") {
	            return;
	          }
	        }
	
	        if (node.operator === "typeof") {
	          var call = t.callExpression(this.addHelper("typeof"), [node.argument]);
	          if (path.get("argument").isIdentifier()) {
	            var undefLiteral = t.stringLiteral("undefined");
	            var unary = t.unaryExpression("typeof", node.argument);
	            unary[IGNORE] = true;
	            path.replaceWith(t.conditionalExpression(t.binaryExpression("===", unary, undefLiteral), undefLiteral, call));
	          } else {
	            path.replaceWith(call);
	          }
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _path2 = __webpack_require__("./node_modules/path-browserify/index.js");
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var buildRequire = _babelTemplate2["default"]("\n  require($0);\n");
	
	var buildExportsModuleDeclaration = _babelTemplate2["default"]("\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n");
	
	var buildExportsFrom = _babelTemplate2["default"]("\n  Object.defineProperty(exports, $0, {\n    enumerable: true,\n    get: function () {\n      return $1;\n    }\n  });\n");
	
	var buildLooseExportsModuleDeclaration = _babelTemplate2["default"]("\n  exports.__esModule = true;\n");
	
	var buildExportsAssignment = _babelTemplate2["default"]("\n  exports.$0 = $1;\n");
	
	var buildExportAll = _babelTemplate2["default"]("\n  for (let KEY in OBJECT) {\n    if (KEY === \"default\") continue;\n\n    Object.defineProperty(exports, KEY, {\n      enumerable: true,\n      get: function () {\n        return OBJECT[KEY];\n      }\n    });\n  }\n");
	
	var THIS_BREAK_KEYS = ["FunctionExpression", "FunctionDeclaration", "ClassProperty", "ClassMethod", "ObjectMethod"];
	
	exports["default"] = function () {
	  var REASSIGN_REMAP_SKIP = _Symbol();
	
	  var reassignmentVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      var name = path.node.name;
	      var remap = this.remaps[name];
	      if (!remap) return;
	
	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;
	
	      if (path.parentPath.isCallExpression({ callee: path.node })) {
	        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), remap]));
	      } else {
	        path.replaceWith(remap);
	      }
	    },
	
	    AssignmentExpression: function AssignmentExpression(path) {
	      var node = path.node;
	      if (node[REASSIGN_REMAP_SKIP]) return;
	
	      var left = path.get("left");
	      if (!left.isIdentifier()) return;
	
	      var name = left.node.name;
	      var exports = this.exports[name];
	      if (!exports) return;
	
	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;
	
	      node[REASSIGN_REMAP_SKIP] = true;
	
	      for (var _iterator = exports, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var reid = _ref;
	
	        node = buildExportsAssignment(reid, node).expression;
	      }
	
	      path.replaceWith(node);
	    },
	
	    UpdateExpression: function UpdateExpression(path) {
	      var arg = path.get("argument");
	      if (!arg.isIdentifier()) return;
	
	      var name = arg.node.name;
	      var exports = this.exports[name];
	      if (!exports) return;
	
	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;
	
	      var node = t.assignmentExpression(path.node.operator[0] + "=", arg.node, t.numericLiteral(1));
	
	      if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord() || path.node.prefix) {
	        return path.replaceWith(node);
	      }
	
	      var nodes = [];
	      nodes.push(node);
	
	      var operator = undefined;
	      if (path.node.operator === "--") {
	        operator = "+";
	      } else {
	        // "++"
	        operator = "-";
	      }
	      nodes.push(t.binaryExpression(operator, arg.node, t.numericLiteral(1)));
	
	      path.replaceWithMultiple(t.sequenceExpression(nodes));
	    }
	  };
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/lib/index.js"),
	
	    visitor: {
	      ThisExpression: function ThisExpression(path, state) {
	        if (state.opts.allowTopLevelThis !== true && !path.findParent(function (path) {
	          return !path.is("shadow") && THIS_BREAK_KEYS.indexOf(path.type) >= 0;
	        })) {
	          path.replaceWith(t.identifier("undefined"));
	        }
	      },
	
	      Program: {
	        exit: function exit(path) {
	          var strict = !!this.opts.strict;
	
	          var scope = path.scope;
	
	          // rename these commonjs variables if they're declared in the file
	          scope.rename("module");
	          scope.rename("exports");
	          scope.rename("require");
	
	          var hasExports = false;
	          var hasImports = false;
	
	          var body /*: Array<Object>*/ = path.get("body");
	          var imports = _Object$create(null);
	          var exports = _Object$create(null);
	
	          var nonHoistedExportNames = _Object$create(null);
	
	          var topNodes = [];
	          var remaps = _Object$create(null);
	
	          var requires = _Object$create(null);
	
	          function addRequire(source, blockHoist) {
	            var cached = requires[source];
	            if (cached) return cached;
	
	            var ref = path.scope.generateUidIdentifier(_path2.basename(source, _path2.extname(source)));
	
	            var varDecl = t.variableDeclaration("var", [t.variableDeclarator(ref, buildRequire(t.stringLiteral(source)).expression)]);
	
	            if (typeof blockHoist === "number" && blockHoist > 0) {
	              varDecl._blockHoist = blockHoist;
	            }
	
	            topNodes.push(varDecl);
	
	            return requires[source] = ref;
	          }
	
	          function addTo(obj, key, arr) {
	            var existing = obj[key] || [];
	            obj[key] = existing.concat(arr);
	          }
	
	          for (var _iterator2 = body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	            var _ref2;
	
	            if (_isArray2) {
	              if (_i2 >= _iterator2.length) break;
	              _ref2 = _iterator2[_i2++];
	            } else {
	              _i2 = _iterator2.next();
	              if (_i2.done) break;
	              _ref2 = _i2.value;
	            }
	
	            var _path = _ref2;
	
	            if (_path.isExportDeclaration()) {
	              hasExports = true;
	
	              var specifiers = [].concat(_path.get("declaration"), _path.get("specifiers"));
	              for (var _iterator3 = specifiers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	                var _ref3;
	
	                if (_isArray3) {
	                  if (_i3 >= _iterator3.length) break;
	                  _ref3 = _iterator3[_i3++];
	                } else {
	                  _i3 = _iterator3.next();
	                  if (_i3.done) break;
	                  _ref3 = _i3.value;
	                }
	
	                var specifier = _ref3;
	
	                var ids = specifier.getBindingIdentifiers();
	                if (ids.__esModule) {
	                  throw specifier.buildCodeFrameError("Illegal export \"__esModule\"");
	                }
	              }
	            }
	
	            if (_path.isImportDeclaration()) {
	              // istanbul ignore next
	
	              var _importsEntry$specifiers;
	
	              hasImports = true;
	
	              var key = _path.node.source.value;
	              var importsEntry = imports[key] || {
	                specifiers: [],
	                maxBlockHoist: 0
	              };
	
	              (_importsEntry$specifiers = importsEntry.specifiers).push.apply(_importsEntry$specifiers, _path.node.specifiers);
	
	              if (typeof _path.node._blockHoist === "number") {
	                importsEntry.maxBlockHoist = Math.max(_path.node._blockHoist, importsEntry.maxBlockHoist);
	              }
	
	              imports[key] = importsEntry;
	
	              _path.remove();
	            } else if (_path.isExportDefaultDeclaration()) {
	              var declaration = _path.get("declaration");
	              if (declaration.isFunctionDeclaration()) {
	                var id = declaration.node.id;
	                var defNode = t.identifier("default");
	                if (id) {
	                  addTo(exports, id.name, defNode);
	                  topNodes.push(buildExportsAssignment(defNode, id));
	                  _path.replaceWith(declaration.node);
	                } else {
	                  topNodes.push(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
	                  _path.remove();
	                }
	              } else if (declaration.isClassDeclaration()) {
	                var id = declaration.node.id;
	                var defNode = t.identifier("default");
	                if (id) {
	                  addTo(exports, id.name, defNode);
	                  _path.replaceWithMultiple([declaration.node, buildExportsAssignment(defNode, id)]);
	                } else {
	                  _path.replaceWith(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
	                }
	              } else {
	                _path.replaceWith(buildExportsAssignment(t.identifier("default"), declaration.node));
	              }
	            } else if (_path.isExportNamedDeclaration()) {
	              var declaration = _path.get("declaration");
	              if (declaration.node) {
	                if (declaration.isFunctionDeclaration()) {
	                  var id = declaration.node.id;
	                  addTo(exports, id.name, id);
	                  topNodes.push(buildExportsAssignment(id, id));
	                  _path.replaceWith(declaration.node);
	                } else if (declaration.isClassDeclaration()) {
	                  var id = declaration.node.id;
	                  addTo(exports, id.name, id);
	                  _path.replaceWithMultiple([declaration.node, buildExportsAssignment(id, id)]);
	                  nonHoistedExportNames[id.name] = true;
	                } else if (declaration.isVariableDeclaration()) {
	                  var declarators = declaration.get("declarations");
	                  for (var _iterator4 = declarators, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	                    var _ref4;
	
	                    if (_isArray4) {
	                      if (_i4 >= _iterator4.length) break;
	                      _ref4 = _iterator4[_i4++];
	                    } else {
	                      _i4 = _iterator4.next();
	                      if (_i4.done) break;
	                      _ref4 = _i4.value;
	                    }
	
	                    var decl = _ref4;
	
	                    var id = decl.get("id");
	
	                    var init = decl.get("init");
	                    if (!init.node) init.replaceWith(t.identifier("undefined"));
	
	                    if (id.isIdentifier()) {
	                      addTo(exports, id.node.name, id.node);
	                      init.replaceWith(buildExportsAssignment(id.node, init.node).expression);
	                      nonHoistedExportNames[id.node.name] = true;
	                    } else {
	                      // todo
	                    }
	                  }
	                  _path.replaceWith(declaration.node);
	                }
	                continue;
	              }
	
	              var specifiers = _path.get("specifiers");
	              if (specifiers.length) {
	                var nodes = [];
	                var source = _path.node.source;
	                if (source) {
	                  var ref = addRequire(source.value, _path.node._blockHoist);
	
	                  for (var _iterator5 = specifiers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	                    var _ref5;
	
	                    if (_isArray5) {
	                      if (_i5 >= _iterator5.length) break;
	                      _ref5 = _iterator5[_i5++];
	                    } else {
	                      _i5 = _iterator5.next();
	                      if (_i5.done) break;
	                      _ref5 = _i5.value;
	                    }
	
	                    var specifier = _ref5;
	
	                    if (specifier.isExportNamespaceSpecifier()) {
	                      // todo
	                    } else if (specifier.isExportDefaultSpecifier()) {
	                        // todo
	                      } else if (specifier.isExportSpecifier()) {
	                          if (specifier.node.local.name === "default") {
	                            topNodes.push(buildExportsFrom(t.stringLiteral(specifier.node.exported.name), t.memberExpression(t.callExpression(this.addHelper("interopRequireDefault"), [ref]), specifier.node.local)));
	                          } else {
	                            topNodes.push(buildExportsFrom(t.stringLiteral(specifier.node.exported.name), t.memberExpression(ref, specifier.node.local)));
	                          }
	                          nonHoistedExportNames[specifier.node.exported.name] = true;
	                        }
	                  }
	                } else {
	                  for (var _iterator6 = specifiers, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	                    var _ref6;
	
	                    if (_isArray6) {
	                      if (_i6 >= _iterator6.length) break;
	                      _ref6 = _iterator6[_i6++];
	                    } else {
	                      _i6 = _iterator6.next();
	                      if (_i6.done) break;
	                      _ref6 = _i6.value;
	                    }
	
	                    var specifier = _ref6;
	
	                    if (specifier.isExportSpecifier()) {
	                      addTo(exports, specifier.node.local.name, specifier.node.exported);
	                      nonHoistedExportNames[specifier.node.exported.name] = true;
	                      nodes.push(buildExportsAssignment(specifier.node.exported, specifier.node.local));
	                    }
	                  }
	                }
	                _path.replaceWithMultiple(nodes);
	              }
	            } else if (_path.isExportAllDeclaration()) {
	              topNodes.push(buildExportAll({
	                KEY: _path.scope.generateUidIdentifier("key"),
	                OBJECT: addRequire(_path.node.source.value, _path.node._blockHoist)
	              }));
	              _path.remove();
	            }
	          }
	
	          for (var source in imports) {
	            var _imports$source = imports[source];
	            var specifiers = _imports$source.specifiers;
	            var maxBlockHoist = _imports$source.maxBlockHoist;
	
	            if (specifiers.length) {
	              var uid = addRequire(source, maxBlockHoist);
	
	              var wildcard = undefined;
	
	              for (var i = 0; i < specifiers.length; i++) {
	                var specifier = specifiers[i];
	                if (t.isImportNamespaceSpecifier(specifier)) {
	                  if (strict) {
	                    remaps[specifier.local.name] = uid;
	                  } else {
	                    var varDecl = t.variableDeclaration("var", [t.variableDeclarator(specifier.local, t.callExpression(this.addHelper("interopRequireWildcard"), [uid]))]);
	
	                    if (maxBlockHoist > 0) {
	                      varDecl._blockHoist = maxBlockHoist;
	                    }
	
	                    topNodes.push(varDecl);
	                  }
	                  wildcard = specifier.local;
	                } else if (t.isImportDefaultSpecifier(specifier)) {
	                  specifiers[i] = t.importSpecifier(specifier.local, t.identifier("default"));
	                }
	              }
	
	              for (var _iterator7 = specifiers, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
	                var _ref7;
	
	                if (_isArray7) {
	                  if (_i7 >= _iterator7.length) break;
	                  _ref7 = _iterator7[_i7++];
	                } else {
	                  _i7 = _iterator7.next();
	                  if (_i7.done) break;
	                  _ref7 = _i7.value;
	                }
	
	                var specifier = _ref7;
	
	                if (t.isImportSpecifier(specifier)) {
	                  var target = uid;
	                  if (specifier.imported.name === "default") {
	                    if (wildcard) {
	                      target = wildcard;
	                    } else {
	                      target = wildcard = path.scope.generateUidIdentifier(uid.name);
	                      var varDecl = t.variableDeclaration("var", [t.variableDeclarator(target, t.callExpression(this.addHelper("interopRequireDefault"), [uid]))]);
	
	                      if (maxBlockHoist > 0) {
	                        varDecl._blockHoist = maxBlockHoist;
	                      }
	
	                      topNodes.push(varDecl);
	                    }
	                  }
	                  remaps[specifier.local.name] = t.memberExpression(target, t.cloneWithoutLoc(specifier.imported));
	                }
	              }
	            } else {
	              // bare import
	              topNodes.push(buildRequire(t.stringLiteral(source)));
	            }
	          }
	
	          if (hasImports && _Object$keys(nonHoistedExportNames).length) {
	            var hoistedExportsNode = t.identifier("undefined");
	
	            for (var _name in nonHoistedExportNames) {
	              hoistedExportsNode = buildExportsAssignment(t.identifier(_name), hoistedExportsNode).expression;
	            }
	
	            var node = t.expressionStatement(hoistedExportsNode);
	            node._blockHoist = 3;
	
	            topNodes.unshift(node);
	          }
	
	          // add __esModule declaration if this file has any exports
	          if (hasExports && !strict) {
	            var buildTemplate = buildExportsModuleDeclaration;
	            if (this.opts.loose) buildTemplate = buildLooseExportsModuleDeclaration;
	
	            var declar = buildTemplate();
	            declar._blockHoist = 3;
	
	            topNodes.unshift(declar);
	          }
	
	          path.unshiftContainer("body", topNodes);
	          path.traverse(reassignmentVisitor, { remaps: remaps, scope: scope, exports: exports });
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _defaults = __webpack_require__("./node_modules/babel-runtime/helpers/defaults.js")["default"];
	
	var _interopExportWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-export-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneWithoutLoc = cloneWithoutLoc;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;
	
	var _toFastProperties = __webpack_require__("./node_modules/to-fast-properties/index.js");
	
	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
	
	var _lodashArrayCompact = __webpack_require__("./node_modules/lodash/array/compact.js");
	
	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashArrayUniq = __webpack_require__("./node_modules/lodash/array/uniq.js");
	
	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/init.js");
	
	var _definitions = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _react2 = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/react.js");
	
	var _react = _interopRequireWildcard(_react2);
	
	var t = exports;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */
	
	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };
	
	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}
	
	//
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/constants.js");
	
	_defaults(exports, _interopExportWildcard(_constants, _defaults));
	
	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */
	
	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}
	
	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */
	
	t.FLIPPED_ALIAS_KEYS = {};
	
	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});
	
	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */
	
	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});
	
	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));
	
	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */
	
	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;
	
	  var matches = isType(node.type, type);
	  if (!matches) return false;
	
	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}
	
	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */
	
	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;
	
	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;
	
	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var alias = _ref;
	
	      if (nodeType === alias) return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Description
	 */
	
	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }
	
	    var node = {};
	    node.type = type;
	
	    var i = 0;
	
	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      var field = t.NODE_FIELDS[type][key];
	
	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);
	
	      node[key] = arg;
	    }
	
	    for (var key in node) {
	      validate(node, key, node[key]);
	    }
	
	    return node;
	  }
	
	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});
	
	/**
	 * Description
	 */
	
	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };
	
	  var newType = t.DEPRECATED_KEYS[type];
	
	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};
	
	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}
	
	/**
	 * Description
	 */
	
	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;
	
	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;
	
	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;
	
	  field.validate(node, key, val);
	}
	
	/**
	 * Test if an object is shallowly equal.
	 */
	
	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);
	
	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;
	
	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }
	
	    var key = _ref3;
	
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Append a node to a member expression.
	 */
	
	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}
	
	/**
	 * Prepend a node to a member expression.
	 */
	
	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}
	
	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */
	
	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
	
	  return node[key] = t.toBlock(node[key], node);
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */
	
	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` and location properties.
	 */
	
	function cloneWithoutLoc(node /*: Object*/) /*: Object*/ {
	  var newNode = clone(node);
	  delete newNode.loc;
	  return newNode;
	}
	
	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */
	
	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	
	  for (var key in node) {
	    if (key[0] === "_") continue;
	
	    var val = node[key];
	
	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }
	
	    newNode[key] = val;
	  }
	
	  return newNode;
	}
	
	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */
	
	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");
	
	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;
	
	    var search = [member];
	    var i = 0;
	
	    while (search.length) {
	      var node = search.shift();
	
	      if (allowPartial && i === parts.length) {
	        return true;
	      }
	
	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }
	
	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }
	
	    return true;
	  };
	}
	
	/**
	 * Remove comment properties from a node.
	 */
	
	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    delete node[key];
	  }
	  return node;
	}
	
	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */
	
	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}
	
	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}
	
	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}
	
	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}
	
	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}
	
	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */
	
	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;
	
	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var key = _ref5;
	
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }
	
	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }
	
	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;
	
	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }
	
	    var key = _ref6;
	
	    child[key] = parent[key];
	  }
	
	  t.inheritsComments(child, parent);
	
	  return child;
	}
	
	/**
	 * TODO
	 */
	
	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    // $FlowFixMe
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}
	
	/**
	 * TODO
	 */
	
	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}
	
	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);
	
	//
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/retrievers.js");
	
	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));
	
	var _validators = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/validators.js");
	
	_defaults(exports, _interopExportWildcard(_validators, _defaults));
	
	var _converters = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/converters.js");
	
	_defaults(exports, _interopExportWildcard(_converters, _defaults));
	
	var _flow = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/flow.js");
	
	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/init.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/core.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/es2015.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/flow.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/jsx.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/misc.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/experimental.js");

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};
	
	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}
	
	function assertEach(callback /*: Function*/) /*: Function*/ {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;
	
	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  }
	  validator.each = callback;
	  return validator;
	}
	
	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }
	
	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }
	
	  validate.oneOf = vals;
	
	  return validate;
	}
	
	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var type = _ref;
	
	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeTypes = types;
	
	  return validate;
	}
	
	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var type = _ref2;
	
	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeOrValueTypes = types;
	
	  return validate;
	}
	
	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }
	
	  validate.type = type;
	
	  return validate;
	}
	
	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }
	
	  function validate() {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var fn = _ref3;
	
	      fn.apply(undefined, arguments);
	    }
	  }
	  validate.chainOf = fns;
	  return validate;
	}
	
	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  var inherits = opts.inherits && store[opts.inherits] || {};
	
	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];
	
	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }
	
	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    opts.fields[key] = opts.fields[key] || {};
	  }
	
	  for (var key in opts.fields) {
	    var field = opts.fields[key];
	
	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }
	
	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;
	
	  store[type] = opts;
	}
	
	var store = {};

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/core.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/constants.js");
	
	var _index2 = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _index3 = _interopRequireDefault(_index2);
	
	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement"))),
	      "default": []
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});
	
	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});
	
	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});
	
	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});
	
	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});
	
	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});
	
	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});
	
	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});
	
	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});
	
	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});
	
	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});
	
	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});
	
	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});
	
	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});
	
	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});
	
	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});
	
	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});
	
	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});
	
	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});
	
	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});
	
	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});
	
	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});
	
	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});
	
	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});
	
	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": true
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});
	
	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});
	
	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});
	
	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/constants.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol$for = __webpack_require__("./node_modules/babel-runtime/core-js/symbol/for.js")["default"];
	
	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
	
	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];
	
	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);
	
	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);
	
	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};
	
	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
	var NOT_LOCAL_BINDING = _Symbol$for("should not be considered a local binding");
	exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/es2015.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});
	
	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});
	
	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});
	
	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});
	
	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});
	
	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});
	
	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});
	
	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});
	
	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});
	
	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareInterface", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});
	
	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});
	
	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/jsx.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});
	
	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});
	
	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXText", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});
	
	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});
	
	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});
	
	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/misc.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("Noop", {
	  visitor: []
	});
	
	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/experimental.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});
	
	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/react.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var isReactComponent = t.buildMatchMemberExpression("React.Component");
	
	exports.isReactComponent = isReactComponent;
	
	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}
	
	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);
	
	  var lastNonEmptyLine = 0;
	
	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }
	
	  var str = "";
	
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	
	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;
	
	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");
	
	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }
	
	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }
	
	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }
	
	      str += trimmedLine;
	    }
	  }
	
	  if (str) args.push(t.stringLiteral(str));
	}
	
	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];
	
	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];
	
	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }
	
	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;
	
	    elems.push(child);
	  }
	
	  return elems;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/retrievers.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */
	
	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);
	
	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;
	
	    var keys = t.getBindingIdentifiers.keys[id.type];
	
	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }
	
	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }
	
	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }
	
	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }
	
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }
	
	  return ids;
	}
	
	/**
	 * Mapping of types to their identifier keys.
	 */
	
	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],
	
	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],
	
	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],
	
	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],
	
	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],
	
	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],
	
	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],
	
	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],
	
	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],
	
	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};
	
	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/validators.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/retrievers.js");
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/constants.js");
	
	/**
	 * Check if the input `node` is a binding identifier.
	 */
	
	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */
	
	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: object::NODE
	    // yes: NODE::callee
	    case "BindExpression":
	      return parent.object === node || parent.callee === node;
	
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }
	
	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;
	
	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }
	
	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;
	
	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array<any>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var param = _ref;
	
	        if (param === node) return false;
	      }
	
	      return parent.id !== node;
	
	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }
	
	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;
	
	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;
	
	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;
	
	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;
	
	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;
	
	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;
	
	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;
	
	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;
	
	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;
	
	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;
	
	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;
	
	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }
	
	  return true;
	}
	
	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */
	
	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}
	
	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */
	
	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}
	
	/**
	 * Check if the input `node` is block scoped.
	 */
	
	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}
	
	/**
	 * Check if the input `node` is a variable declaration.
	 */
	
	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}
	
	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */
	
	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}
	
	/**
	 * Check if the input `node` is a scope.
	 */
	
	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }
	
	  return t.isScopable(node);
	}
	
	/**
	 * Check if the input `node` is definitely immutable.
	 */
	
	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;
	
	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }
	
	  return false;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/converters.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Number$MAX_SAFE_INTEGER = __webpack_require__("./node_modules/babel-runtime/core-js/number/max-safe-integer.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;
	
	var _lodashLangIsPlainObject = __webpack_require__("./node_modules/lodash/lang/isPlainObject.js");
	
	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);
	
	var _lodashLangIsNumber = __webpack_require__("./node_modules/lodash/lang/isNumber.js");
	
	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
	
	var _lodashLangIsRegExp = __webpack_require__("./node_modules/lodash/lang/isRegExp.js");
	
	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
	
	var _lodashLangIsString = __webpack_require__("./node_modules/lodash/lang/isString.js");
	
	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}
	
	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */
	
	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;
	
	  var declars = [];
	  var bailed = false;
	
	  var result = convert(nodes);
	  if (bailed) return;
	
	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }
	
	  return result;
	
	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];
	
	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var node = _ref;
	
	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed
	
	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var declar = _ref2;
	
	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }
	
	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }
	
	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;
	
	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }
	
	      ensureLastUndefined = false;
	    }
	
	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }
	
	    //
	
	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}
	
	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;
	
	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }
	
	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }
	
	    if (node["static"]) {
	      alias = "static:" + alias;
	    }
	
	    return alias;
	  })();
	}
	
	toKeyAlias.uid = 0;
	
	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};
	
	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";
	
	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
	
	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");
	
	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });
	
	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }
	
	  return name || "_";
	}
	
	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}
	
	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */
	
	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }
	
	  var mustHaveId = false;
	  var newType = undefined;
	
	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }
	
	  if (mustHaveId && !node.id) {
	    newType = false;
	  }
	
	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }
	
	  node.type = newType;
	
	  return node;
	}
	
	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }
	
	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }
	
	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}
	
	function toBlock(node /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }
	
	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }
	
	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }
	
	    node = [node];
	  }
	
	  return t.blockStatement(node);
	}
	
	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }
	
	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }
	
	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }
	
	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }
	
	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }
	
	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }
	
	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }
	
	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }
	
	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */
	
	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);
	
	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}
	
	/**
	 * Dedupe type annotations.
	 */
	
	function removeTypeDuplicates(nodes /*: Array<Object>*/) /*: Array<Object>*/ {
	  var generics = {};
	  var bases = {};
	
	  // store union type groups to circular references
	  var typeGroups = [];
	
	  var types = [];
	
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;
	
	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }
	
	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }
	
	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }
	
	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }
	
	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;
	
	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }
	
	      continue;
	    }
	
	    types.push(node);
	  }
	
	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }
	
	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }
	
	  return types;
	}
	
	/**
	 * Create a type anotation based on typeof expression.
	 */
	
	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = function () {
	  return {
	    visitor: {
	      Program: function Program(path, state) {
	        if (state.opts.strict === false) return;
	
	        var node = path.node;
	
	        for (var _iterator = (node.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var directive = _ref;
	
	          if (directive.value.value === "use strict") return;
	        }
	
	        path.unshiftContainer("directives", t.directive(t.directiveLiteral("use strict")));
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _defaults = __webpack_require__("./node_modules/babel-runtime/helpers/defaults.js")["default"];
	
	var _interopExportWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-export-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneWithoutLoc = cloneWithoutLoc;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;
	
	var _toFastProperties = __webpack_require__("./node_modules/to-fast-properties/index.js");
	
	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
	
	var _lodashArrayCompact = __webpack_require__("./node_modules/lodash/array/compact.js");
	
	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashArrayUniq = __webpack_require__("./node_modules/lodash/array/uniq.js");
	
	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/init.js");
	
	var _definitions = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _react2 = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/react.js");
	
	var _react = _interopRequireWildcard(_react2);
	
	var t = exports;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */
	
	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };
	
	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}
	
	//
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/constants.js");
	
	_defaults(exports, _interopExportWildcard(_constants, _defaults));
	
	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */
	
	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}
	
	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */
	
	t.FLIPPED_ALIAS_KEYS = {};
	
	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});
	
	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */
	
	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});
	
	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));
	
	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */
	
	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;
	
	  var matches = isType(node.type, type);
	  if (!matches) return false;
	
	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}
	
	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */
	
	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;
	
	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;
	
	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var alias = _ref;
	
	      if (nodeType === alias) return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Description
	 */
	
	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }
	
	    var node = {};
	    node.type = type;
	
	    var i = 0;
	
	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      var field = t.NODE_FIELDS[type][key];
	
	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);
	
	      node[key] = arg;
	    }
	
	    for (var key in node) {
	      validate(node, key, node[key]);
	    }
	
	    return node;
	  }
	
	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});
	
	/**
	 * Description
	 */
	
	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };
	
	  var newType = t.DEPRECATED_KEYS[type];
	
	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};
	
	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}
	
	/**
	 * Description
	 */
	
	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;
	
	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;
	
	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;
	
	  field.validate(node, key, val);
	}
	
	/**
	 * Test if an object is shallowly equal.
	 */
	
	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);
	
	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;
	
	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }
	
	    var key = _ref3;
	
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Append a node to a member expression.
	 */
	
	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}
	
	/**
	 * Prepend a node to a member expression.
	 */
	
	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}
	
	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */
	
	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
	
	  return node[key] = t.toBlock(node[key], node);
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */
	
	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` and location properties.
	 */
	
	function cloneWithoutLoc(node /*: Object*/) /*: Object*/ {
	  var newNode = clone(node);
	  delete newNode.loc;
	  return newNode;
	}
	
	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */
	
	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	
	  for (var key in node) {
	    if (key[0] === "_") continue;
	
	    var val = node[key];
	
	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }
	
	    newNode[key] = val;
	  }
	
	  return newNode;
	}
	
	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */
	
	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");
	
	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;
	
	    var search = [member];
	    var i = 0;
	
	    while (search.length) {
	      var node = search.shift();
	
	      if (allowPartial && i === parts.length) {
	        return true;
	      }
	
	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }
	
	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }
	
	    return true;
	  };
	}
	
	/**
	 * Remove comment properties from a node.
	 */
	
	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    delete node[key];
	  }
	  return node;
	}
	
	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */
	
	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}
	
	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}
	
	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}
	
	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}
	
	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}
	
	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */
	
	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;
	
	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var key = _ref5;
	
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }
	
	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }
	
	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;
	
	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }
	
	    var key = _ref6;
	
	    child[key] = parent[key];
	  }
	
	  t.inheritsComments(child, parent);
	
	  return child;
	}
	
	/**
	 * TODO
	 */
	
	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    // $FlowFixMe
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}
	
	/**
	 * TODO
	 */
	
	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}
	
	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);
	
	//
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/retrievers.js");
	
	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));
	
	var _validators = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/validators.js");
	
	_defaults(exports, _interopExportWildcard(_validators, _defaults));
	
	var _converters = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/converters.js");
	
	_defaults(exports, _interopExportWildcard(_converters, _defaults));
	
	var _flow = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/flow.js");
	
	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/init.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/core.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/es2015.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/flow.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/jsx.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/misc.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/experimental.js");

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};
	
	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}
	
	function assertEach(callback /*: Function*/) /*: Function*/ {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;
	
	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  }
	  validator.each = callback;
	  return validator;
	}
	
	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }
	
	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }
	
	  validate.oneOf = vals;
	
	  return validate;
	}
	
	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var type = _ref;
	
	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeTypes = types;
	
	  return validate;
	}
	
	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var type = _ref2;
	
	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeOrValueTypes = types;
	
	  return validate;
	}
	
	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }
	
	  validate.type = type;
	
	  return validate;
	}
	
	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }
	
	  function validate() {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var fn = _ref3;
	
	      fn.apply(undefined, arguments);
	    }
	  }
	  validate.chainOf = fns;
	  return validate;
	}
	
	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  var inherits = opts.inherits && store[opts.inherits] || {};
	
	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];
	
	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }
	
	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    opts.fields[key] = opts.fields[key] || {};
	  }
	
	  for (var key in opts.fields) {
	    var field = opts.fields[key];
	
	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }
	
	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;
	
	  store[type] = opts;
	}
	
	var store = {};

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/core.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/constants.js");
	
	var _index2 = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _index3 = _interopRequireDefault(_index2);
	
	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement"))),
	      "default": []
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});
	
	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});
	
	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});
	
	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});
	
	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});
	
	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});
	
	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});
	
	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});
	
	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});
	
	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});
	
	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});
	
	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});
	
	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});
	
	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});
	
	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});
	
	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});
	
	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});
	
	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});
	
	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});
	
	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});
	
	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});
	
	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});
	
	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});
	
	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});
	
	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": true
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});
	
	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});
	
	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});
	
	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/constants.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol$for = __webpack_require__("./node_modules/babel-runtime/core-js/symbol/for.js")["default"];
	
	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
	
	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];
	
	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);
	
	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);
	
	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};
	
	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
	var NOT_LOCAL_BINDING = _Symbol$for("should not be considered a local binding");
	exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/es2015.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});
	
	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});
	
	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});
	
	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});
	
	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});
	
	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});
	
	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});
	
	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});
	
	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});
	
	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareInterface", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});
	
	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});
	
	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/jsx.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});
	
	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});
	
	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXText", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});
	
	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});
	
	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});
	
	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/misc.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("Noop", {
	  visitor: []
	});
	
	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/experimental.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});
	
	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/react.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var isReactComponent = t.buildMatchMemberExpression("React.Component");
	
	exports.isReactComponent = isReactComponent;
	
	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}
	
	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);
	
	  var lastNonEmptyLine = 0;
	
	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }
	
	  var str = "";
	
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	
	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;
	
	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");
	
	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }
	
	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }
	
	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }
	
	      str += trimmedLine;
	    }
	  }
	
	  if (str) args.push(t.stringLiteral(str));
	}
	
	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];
	
	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];
	
	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }
	
	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;
	
	    elems.push(child);
	  }
	
	  return elems;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/retrievers.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */
	
	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);
	
	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;
	
	    var keys = t.getBindingIdentifiers.keys[id.type];
	
	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }
	
	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }
	
	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }
	
	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }
	
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }
	
	  return ids;
	}
	
	/**
	 * Mapping of types to their identifier keys.
	 */
	
	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],
	
	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],
	
	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],
	
	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],
	
	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],
	
	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],
	
	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],
	
	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],
	
	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],
	
	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};
	
	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/validators.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/retrievers.js");
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/constants.js");
	
	/**
	 * Check if the input `node` is a binding identifier.
	 */
	
	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */
	
	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: object::NODE
	    // yes: NODE::callee
	    case "BindExpression":
	      return parent.object === node || parent.callee === node;
	
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }
	
	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;
	
	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }
	
	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;
	
	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array<any>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var param = _ref;
	
	        if (param === node) return false;
	      }
	
	      return parent.id !== node;
	
	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }
	
	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;
	
	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;
	
	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;
	
	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;
	
	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;
	
	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;
	
	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;
	
	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;
	
	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;
	
	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;
	
	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;
	
	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }
	
	  return true;
	}
	
	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */
	
	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}
	
	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */
	
	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}
	
	/**
	 * Check if the input `node` is block scoped.
	 */
	
	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}
	
	/**
	 * Check if the input `node` is a variable declaration.
	 */
	
	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}
	
	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */
	
	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}
	
	/**
	 * Check if the input `node` is a scope.
	 */
	
	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }
	
	  return t.isScopable(node);
	}
	
	/**
	 * Check if the input `node` is definitely immutable.
	 */
	
	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;
	
	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }
	
	  return false;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/converters.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Number$MAX_SAFE_INTEGER = __webpack_require__("./node_modules/babel-runtime/core-js/number/max-safe-integer.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;
	
	var _lodashLangIsPlainObject = __webpack_require__("./node_modules/lodash/lang/isPlainObject.js");
	
	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);
	
	var _lodashLangIsNumber = __webpack_require__("./node_modules/lodash/lang/isNumber.js");
	
	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
	
	var _lodashLangIsRegExp = __webpack_require__("./node_modules/lodash/lang/isRegExp.js");
	
	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
	
	var _lodashLangIsString = __webpack_require__("./node_modules/lodash/lang/isString.js");
	
	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}
	
	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */
	
	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;
	
	  var declars = [];
	  var bailed = false;
	
	  var result = convert(nodes);
	  if (bailed) return;
	
	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }
	
	  return result;
	
	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];
	
	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var node = _ref;
	
	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed
	
	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var declar = _ref2;
	
	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }
	
	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }
	
	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;
	
	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }
	
	      ensureLastUndefined = false;
	    }
	
	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }
	
	    //
	
	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}
	
	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;
	
	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }
	
	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }
	
	    if (node["static"]) {
	      alias = "static:" + alias;
	    }
	
	    return alias;
	  })();
	}
	
	toKeyAlias.uid = 0;
	
	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};
	
	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";
	
	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
	
	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");
	
	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });
	
	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }
	
	  return name || "_";
	}
	
	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}
	
	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */
	
	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }
	
	  var mustHaveId = false;
	  var newType = undefined;
	
	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }
	
	  if (mustHaveId && !node.id) {
	    newType = false;
	  }
	
	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }
	
	  node.type = newType;
	
	  return node;
	}
	
	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }
	
	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }
	
	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}
	
	function toBlock(node /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }
	
	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }
	
	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }
	
	    node = [node];
	  }
	
	  return t.blockStatement(node);
	}
	
	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }
	
	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }
	
	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }
	
	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }
	
	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }
	
	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }
	
	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }
	
	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }
	
	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-strict-mode/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */
	
	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);
	
	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}
	
	/**
	 * Dedupe type annotations.
	 */
	
	function removeTypeDuplicates(nodes /*: Array<Object>*/) /*: Array<Object>*/ {
	  var generics = {};
	  var bases = {};
	
	  // store union type groups to circular references
	  var typeGroups = [];
	
	  var types = [];
	
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;
	
	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }
	
	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }
	
	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }
	
	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }
	
	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;
	
	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }
	
	      continue;
	    }
	
	    types.push(node);
	  }
	
	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }
	
	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }
	
	  return types;
	}
	
	/**
	 * Create a type anotation based on typeof expression.
	 */
	
	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/visit.js");
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/visit.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _assert = __webpack_require__("./node_modules/assert/assert.js");
	
	var _assert2 = _interopRequireDefault(_assert);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _hoist = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/hoist.js");
	
	var _emit = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/emit.js");
	
	var _util = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/util.js");
	
	var util = _interopRequireWildcard(_util);
	
	var getMarkInfo = __webpack_require__("./node_modules/private/private.js").makeAccessor();
	
	exports.visitor = {
	  Function: {
	    exit: function exit(path, state) {
	      var node = path.node;
	
	      if (node.generator) {
	        if (node.async) {
	          // Async generator
	          if (state.opts.asyncGenerators === false) return;
	        } else {
	          // Plain generator
	          if (state.opts.generators === false) return;
	        }
	      } else if (node.async) {
	        // Async function
	        if (state.opts.async === false) return;
	      } else {
	        // Not a generator or async function.
	        return;
	      }
	
	      var contextId = path.scope.generateUidIdentifier("context");
	      var argsId = path.scope.generateUidIdentifier("args");
	
	      path.ensureBlock();
	      var bodyBlockPath = path.get("body");
	
	      if (node.async) {
	        bodyBlockPath.traverse(awaitVisitor);
	      }
	
	      bodyBlockPath.traverse(functionSentVisitor, {
	        context: contextId
	      });
	
	      var outerBody = [];
	      var innerBody = [];
	
	      bodyBlockPath.get("body").forEach(function (childPath) {
	        var node = childPath.node;
	        if (node && node._blockHoist != null) {
	          outerBody.push(node);
	        } else {
	          innerBody.push(node);
	        }
	      });
	
	      if (outerBody.length > 0) {
	        // Only replace the inner body if we actually hoisted any statements
	        // to the outer body.
	        bodyBlockPath.node.body = innerBody;
	      }
	
	      var outerFnExpr = getOuterFnExpr(path);
	      // Note that getOuterFnExpr has the side-effect of ensuring that the
	      // function has a name (so node.id will always be an Identifier), even
	      // if a temporary name has to be synthesized.
	      t.assertIdentifier(node.id);
	      var innerFnId = t.identifier(node.id.name + "$");
	
	      // Turn all declarations into vars, and replace the original
	      // declarations with equivalent assignment expressions.
	      var vars = _hoist.hoist(path);
	
	      var didRenameArguments = renameArguments(path, argsId);
	      if (didRenameArguments) {
	        vars = vars || t.variableDeclaration("var", []);
	        vars.declarations.push(t.variableDeclarator(argsId, t.identifier("arguments")));
	      }
	
	      var emitter = new _emit.Emitter(contextId);
	      emitter.explode(path.get("body"));
	
	      if (vars && vars.declarations.length > 0) {
	        outerBody.push(vars);
	      }
	
	      var wrapArgs = [emitter.getContextFunction(innerFnId),
	      // Async functions that are not generators don't care about the
	      // outer function because they don't need it to be marked and don't
	      // inherit from its .prototype.
	      node.generator ? outerFnExpr : t.nullLiteral(), t.thisExpression()];
	
	      var tryLocsList = emitter.getTryLocsList();
	      if (tryLocsList) {
	        wrapArgs.push(tryLocsList);
	      }
	
	      var wrapCall = t.callExpression(util.runtimeProperty(node.async ? "async" : "wrap"), wrapArgs);
	
	      outerBody.push(t.returnStatement(wrapCall));
	      node.body = t.blockStatement(outerBody);
	
	      var wasGeneratorFunction = node.generator;
	      if (wasGeneratorFunction) {
	        node.generator = false;
	      }
	
	      if (node.async) {
	        node.async = false;
	      }
	
	      if (wasGeneratorFunction && t.isExpression(node)) {
	        path.replaceWith(t.callExpression(util.runtimeProperty("mark"), [node]));
	      }
	
	      // Generators are processed in 'exit' handlers so that regenerator only has to run on
	      // an ES5 AST, but that means traversal will not pick up newly inserted references
	      // to things like 'regeneratorRuntime'. To avoid this, we explicitly requeue.
	      path.requeue();
	    }
	  }
	};
	
	// Given a NodePath for a Function, return an Expression node that can be
	// used to refer reliably to the function object from inside the function.
	// This expression is essentially a replacement for arguments.callee, with
	// the key advantage that it works in strict mode.
	function getOuterFnExpr(funPath) {
	  var node = funPath.node;
	  t.assertFunction(node);
	
	  if (!node.id) {
	    // Default-exported function declarations, and function expressions may not
	    // have a name to reference, so we explicitly add one.
	    node.id = funPath.scope.parent.generateUidIdentifier("callee");
	  }
	
	  if (node.generator && // Non-generator functions don't need to be marked.
	  t.isFunctionDeclaration(node)) {
	    var pp = funPath.findParent(function (path) {
	      return path.isProgram() || path.isBlockStatement();
	    });
	
	    if (!pp) {
	      return node.id;
	    }
	
	    var markDecl = getRuntimeMarkDecl(pp);
	    var markedArray = markDecl.declarations[0].id;
	    var funDeclIdArray = markDecl.declarations[0].init.callee.object;
	    t.assertArrayExpression(funDeclIdArray);
	
	    var index = funDeclIdArray.elements.length;
	    funDeclIdArray.elements.push(node.id);
	
	    return t.memberExpression(markedArray, t.numericLiteral(index), true);
	  }
	
	  return node.id;
	}
	
	function getRuntimeMarkDecl(blockPath) {
	  var block = blockPath.node;
	  _assert2["default"].ok(Array.isArray(block.body));
	
	  var info = getMarkInfo(block);
	  if (info.decl) {
	    return info.decl;
	  }
	
	  info.decl = t.variableDeclaration("var", [t.variableDeclarator(blockPath.scope.generateUidIdentifier("marked"), t.callExpression(t.memberExpression(t.arrayExpression([]), t.identifier("map"), false), [util.runtimeProperty("mark")]))]);
	
	  blockPath.unshiftContainer("body", info.decl);
	
	  return info.decl;
	}
	
	function renameArguments(funcPath, argsId) {
	  var state = {
	    didRenameArguments: false,
	    argsId: argsId
	  };
	
	  funcPath.traverse(argumentsVisitor, state);
	
	  // If the traversal replaced any arguments references, then we need to
	  // alias the outer function's arguments binding (be it the implicit
	  // arguments object or some other parameter or variable) to the variable
	  // named by argsId.
	  return state.didRenameArguments;
	}
	
	var argumentsVisitor = {
	  "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
	    path.skip();
	  },
	
	  Identifier: function Identifier(path, state) {
	    if (path.node.name === "arguments" && util.isReference(path)) {
	      path.replaceWith(state.argsId);
	      state.didRenameArguments = true;
	    }
	  }
	};
	
	var functionSentVisitor = {
	  MetaProperty: function MetaProperty(path) {
	    var node = path.node;
	
	    if (node.meta.name === "function" && node.property.name === "sent") {
	      path.replaceWith(t.memberExpression(this.context, t.identifier("_sent")));
	    }
	  }
	};
	
	var awaitVisitor = {
	  Function: function Function(path) {
	    path.skip(); // Don't descend into nested function scopes.
	  },
	
	  AwaitExpression: function AwaitExpression(path) {
	    // Convert await expressions to yield expressions.
	    var argument = path.node.argument;
	
	    // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`
	    // causes the argument to be wrapped in such a way that the runtime
	    // can distinguish between awaited and merely yielded values.
	    path.replaceWith(t.yieldExpression(t.callExpression(util.runtimeProperty("awrap"), [argument]), false));
	  }
	};

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _defaults = __webpack_require__("./node_modules/babel-runtime/helpers/defaults.js")["default"];
	
	var _interopExportWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-export-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneWithoutLoc = cloneWithoutLoc;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;
	
	var _toFastProperties = __webpack_require__("./node_modules/to-fast-properties/index.js");
	
	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
	
	var _lodashArrayCompact = __webpack_require__("./node_modules/lodash/array/compact.js");
	
	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);
	
	var _lodashLangClone = __webpack_require__("./node_modules/lodash/lang/clone.js");
	
	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
	
	var _lodashCollectionEach = __webpack_require__("./node_modules/lodash/collection/each.js");
	
	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
	
	var _lodashArrayUniq = __webpack_require__("./node_modules/lodash/array/uniq.js");
	
	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/init.js");
	
	var _definitions = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _react2 = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/react.js");
	
	var _react = _interopRequireWildcard(_react2);
	
	var t = exports;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */
	
	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };
	
	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}
	
	//
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/constants.js");
	
	_defaults(exports, _interopExportWildcard(_constants, _defaults));
	
	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;
	
	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */
	
	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}
	
	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */
	
	t.FLIPPED_ALIAS_KEYS = {};
	
	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});
	
	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */
	
	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});
	
	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));
	
	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */
	
	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;
	
	  var matches = isType(node.type, type);
	  if (!matches) return false;
	
	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}
	
	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */
	
	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;
	
	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;
	
	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var alias = _ref;
	
	      if (nodeType === alias) return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Description
	 */
	
	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }
	
	    var node = {};
	    node.type = type;
	
	    var i = 0;
	
	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var key = _ref2;
	
	      var field = t.NODE_FIELDS[type][key];
	
	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);
	
	      node[key] = arg;
	    }
	
	    for (var key in node) {
	      validate(node, key, node[key]);
	    }
	
	    return node;
	  }
	
	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});
	
	/**
	 * Description
	 */
	
	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };
	
	  var newType = t.DEPRECATED_KEYS[type];
	
	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};
	
	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}
	
	/**
	 * Description
	 */
	
	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;
	
	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;
	
	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;
	
	  field.validate(node, key, val);
	}
	
	/**
	 * Test if an object is shallowly equal.
	 */
	
	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);
	
	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;
	
	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }
	
	    var key = _ref3;
	
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Append a node to a member expression.
	 */
	
	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}
	
	/**
	 * Prepend a node to a member expression.
	 */
	
	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}
	
	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */
	
	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
	
	  return node[key] = t.toBlock(node[key], node);
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */
	
	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}
	
	/**
	 * Create a shallow clone of a `node` excluding `_private` and location properties.
	 */
	
	function cloneWithoutLoc(node /*: Object*/) /*: Object*/ {
	  var newNode = clone(node);
	  delete newNode.loc;
	  return newNode;
	}
	
	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */
	
	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	
	  for (var key in node) {
	    if (key[0] === "_") continue;
	
	    var val = node[key];
	
	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }
	
	    newNode[key] = val;
	  }
	
	  return newNode;
	}
	
	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */
	
	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");
	
	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;
	
	    var search = [member];
	    var i = 0;
	
	    while (search.length) {
	      var node = search.shift();
	
	      if (allowPartial && i === parts.length) {
	        return true;
	      }
	
	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }
	
	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }
	
	    return true;
	  };
	}
	
	/**
	 * Remove comment properties from a node.
	 */
	
	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    delete node[key];
	  }
	  return node;
	}
	
	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */
	
	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}
	
	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}
	
	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}
	
	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}
	
	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}
	
	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */
	
	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;
	
	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;
	
	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }
	
	    var key = _ref5;
	
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }
	
	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }
	
	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;
	
	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }
	
	    var key = _ref6;
	
	    child[key] = parent[key];
	  }
	
	  t.inheritsComments(child, parent);
	
	  return child;
	}
	
	/**
	 * TODO
	 */
	
	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    // $FlowFixMe
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}
	
	/**
	 * TODO
	 */
	
	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}
	
	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);
	
	//
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/retrievers.js");
	
	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));
	
	var _validators = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/validators.js");
	
	_defaults(exports, _interopExportWildcard(_validators, _defaults));
	
	var _converters = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/converters.js");
	
	_defaults(exports, _interopExportWildcard(_converters, _defaults));
	
	var _flow = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/flow.js");
	
	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/init.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/core.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/es2015.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/flow.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/jsx.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/misc.js");
	
	__webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/experimental.js");

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};
	
	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}
	
	function assertEach(callback /*: Function*/) /*: Function*/ {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;
	
	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  }
	  validator.each = callback;
	  return validator;
	}
	
	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }
	
	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }
	
	  validate.oneOf = vals;
	
	  return validate;
	}
	
	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var type = _ref;
	
	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeTypes = types;
	
	  return validate;
	}
	
	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }
	
	  function validate(node, key, val) {
	    var valid = false;
	
	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var type = _ref2;
	
	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }
	
	  validate.oneOfNodeOrValueTypes = types;
	
	  return validate;
	}
	
	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;
	
	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }
	
	  validate.type = type;
	
	  return validate;
	}
	
	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }
	
	  function validate() {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;
	
	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }
	
	      var fn = _ref3;
	
	      fn.apply(undefined, arguments);
	    }
	  }
	  validate.chainOf = fns;
	  return validate;
	}
	
	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  var inherits = opts.inherits && store[opts.inherits] || {};
	
	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];
	
	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }
	
	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;
	
	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }
	
	    var key = _ref4;
	
	    opts.fields[key] = opts.fields[key] || {};
	  }
	
	  for (var key in opts.fields) {
	    var field = opts.fields[key];
	
	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }
	
	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;
	
	  store[type] = opts;
	}
	
	var store = {};

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/core.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/constants.js");
	
	var _index2 = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _index3 = _interopRequireDefault(_index2);
	
	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement"))),
	      "default": []
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});
	
	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});
	
	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});
	
	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});
	
	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});
	
	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});
	
	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});
	
	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});
	
	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});
	
	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});
	
	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});
	
	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});
	
	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});
	
	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});
	
	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});
	
	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});
	
	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});
	
	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});
	
	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});
	
	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});
	
	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});
	
	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});
	
	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});
	
	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});
	
	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});
	
	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});
	
	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});
	
	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});
	
	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});
	
	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": true
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});
	
	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});
	
	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});
	
	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});
	
	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});
	
	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/constants.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol$for = __webpack_require__("./node_modules/babel-runtime/core-js/symbol/for.js")["default"];
	
	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
	
	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];
	
	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);
	
	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);
	
	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};
	
	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
	var NOT_LOCAL_BINDING = _Symbol$for("should not be considered a local binding");
	exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/es2015.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});
	
	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});
	
	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});
	
	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});
	
	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});
	
	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});
	
	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});
	
	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});
	
	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});
	
	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});
	
	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});
	
	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});
	
	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});
	
	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareInterface", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});
	
	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});
	
	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});
	
	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/jsx.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});
	
	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});
	
	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXText", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});
	
	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});
	
	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});
	
	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});
	
	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});
	
	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/misc.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("Noop", {
	  visitor: []
	});
	
	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/experimental.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/definitions/index.js");
	
	var _index2 = _interopRequireDefault(_index);
	
	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: {
	    // todo
	  }
	});
	
	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});
	
	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});
	
	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});
	
	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});
	
	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/react.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var isReactComponent = t.buildMatchMemberExpression("React.Component");
	
	exports.isReactComponent = isReactComponent;
	
	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}
	
	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);
	
	  var lastNonEmptyLine = 0;
	
	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }
	
	  var str = "";
	
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	
	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;
	
	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");
	
	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }
	
	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }
	
	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }
	
	      str += trimmedLine;
	    }
	  }
	
	  if (str) args.push(t.stringLiteral(str));
	}
	
	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];
	
	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];
	
	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }
	
	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;
	
	    elems.push(child);
	  }
	
	  return elems;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/retrievers.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */
	
	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);
	
	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;
	
	    var keys = t.getBindingIdentifiers.keys[id.type];
	
	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }
	
	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }
	
	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }
	
	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }
	
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }
	
	  return ids;
	}
	
	/**
	 * Mapping of types to their identifier keys.
	 */
	
	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],
	
	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],
	
	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],
	
	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],
	
	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],
	
	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],
	
	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],
	
	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],
	
	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],
	
	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};
	
	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/validators.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;
	
	var _retrievers = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/retrievers.js");
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	var _constants = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/constants.js");
	
	/**
	 * Check if the input `node` is a binding identifier.
	 */
	
	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */
	
	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: object::NODE
	    // yes: NODE::callee
	    case "BindExpression":
	      return parent.object === node || parent.callee === node;
	
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }
	
	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;
	
	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }
	
	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;
	
	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array<any>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var param = _ref;
	
	        if (param === node) return false;
	      }
	
	      return parent.id !== node;
	
	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }
	
	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;
	
	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;
	
	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;
	
	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;
	
	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;
	
	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;
	
	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;
	
	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;
	
	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;
	
	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;
	
	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;
	
	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }
	
	  return true;
	}
	
	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */
	
	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}
	
	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */
	
	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}
	
	/**
	 * Check if the input `node` is block scoped.
	 */
	
	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}
	
	/**
	 * Check if the input `node` is a variable declaration.
	 */
	
	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}
	
	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */
	
	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}
	
	/**
	 * Check if the input `node` is a scope.
	 */
	
	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }
	
	  return t.isScopable(node);
	}
	
	/**
	 * Check if the input `node` is definitely immutable.
	 */
	
	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;
	
	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }
	
	  return false;
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/converters.js":
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Number$MAX_SAFE_INTEGER = __webpack_require__("./node_modules/babel-runtime/core-js/number/max-safe-integer.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;
	
	var _lodashLangIsPlainObject = __webpack_require__("./node_modules/lodash/lang/isPlainObject.js");
	
	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);
	
	var _lodashLangIsNumber = __webpack_require__("./node_modules/lodash/lang/isNumber.js");
	
	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
	
	var _lodashLangIsRegExp = __webpack_require__("./node_modules/lodash/lang/isRegExp.js");
	
	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
	
	var _lodashLangIsString = __webpack_require__("./node_modules/lodash/lang/isString.js");
	
	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
	
	var _babelTraverse = __webpack_require__("./node_modules/babel-traverse/lib/index.js");
	
	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}
	
	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */
	
	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;
	
	  var declars = [];
	  var bailed = false;
	
	  var result = convert(nodes);
	  if (bailed) return;
	
	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }
	
	  return result;
	
	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];
	
	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var node = _ref;
	
	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed
	
	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var declar = _ref2;
	
	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }
	
	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }
	
	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;
	
	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }
	
	      ensureLastUndefined = false;
	    }
	
	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }
	
	    //
	
	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}
	
	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;
	
	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }
	
	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }
	
	    if (node["static"]) {
	      alias = "static:" + alias;
	    }
	
	    return alias;
	  })();
	}
	
	toKeyAlias.uid = 0;
	
	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};
	
	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";
	
	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
	
	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");
	
	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });
	
	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }
	
	  return name || "_";
	}
	
	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}
	
	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */
	
	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }
	
	  var mustHaveId = false;
	  var newType = undefined;
	
	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }
	
	  if (mustHaveId && !node.id) {
	    newType = false;
	  }
	
	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }
	
	  node.type = newType;
	
	  return node;
	}
	
	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }
	
	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }
	
	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}
	
	function toBlock(node /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }
	
	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }
	
	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }
	
	    node = [node];
	  }
	
	  return t.blockStatement(node);
	}
	
	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }
	
	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }
	
	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }
	
	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }
	
	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }
	
	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }
	
	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }
	
	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }
	
	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/flow.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
	
	var _index = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_index);
	
	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */
	
	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);
	
	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}
	
	/**
	 * Dedupe type annotations.
	 */
	
	function removeTypeDuplicates(nodes /*: Array<Object>*/) /*: Array<Object>*/ {
	  var generics = {};
	  var bases = {};
	
	  // store union type groups to circular references
	  var typeGroups = [];
	
	  var types = [];
	
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;
	
	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }
	
	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }
	
	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }
	
	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }
	
	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;
	
	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }
	
	      continue;
	    }
	
	    types.push(node);
	  }
	
	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }
	
	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }
	
	  return types;
	}
	
	/**
	 * Create a type anotation based on typeof expression.
	 */
	
	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/hoist.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	var _Object$keys = __webpack_require__("./node_modules/babel-runtime/core-js/object/keys.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var hasOwn = Object.prototype.hasOwnProperty;
	
	// The hoist function takes a FunctionExpression or FunctionDeclaration
	// and replaces any Declaration nodes in its body with assignments, then
	// returns a VariableDeclaration containing just the names of the removed
	// declarations.
	exports.hoist = function (funPath) {
	  t.assertFunction(funPath.node);
	
	  var vars = {};
	
	  function varDeclToExpr(vdec, includeIdentifiers) {
	    t.assertVariableDeclaration(vdec);
	    // TODO assert.equal(vdec.kind, "var");
	    var exprs = [];
	
	    vdec.declarations.forEach(function (dec) {
	      vars[dec.id.name] = dec.id;
	
	      if (dec.init) {
	        exprs.push(t.assignmentExpression("=", dec.id, dec.init));
	      } else if (includeIdentifiers) {
	        exprs.push(dec.id);
	      }
	    });
	
	    if (exprs.length === 0) return null;
	
	    if (exprs.length === 1) return exprs[0];
	
	    return t.sequenceExpression(exprs);
	  }
	
	  funPath.get("body").traverse({
	    VariableDeclaration: {
	      exit: function exit(path) {
	        var expr = varDeclToExpr(path.node, false);
	        if (expr === null) {
	          path.remove();
	        } else {
	          // We don't need to traverse this expression any further because
	          // there can't be any new declarations inside an expression.
	          path.replaceWith(t.expressionStatement(expr));
	        }
	
	        // Since the original node has been either removed or replaced,
	        // avoid traversing it any further.
	        path.skip();
	      }
	    },
	
	    ForStatement: function ForStatement(path) {
	      var init = path.node.init;
	      if (t.isVariableDeclaration(init)) {
	        path.get("init").replaceWith(varDeclToExpr(init, false));
	      }
	    },
	
	    ForXStatement: function ForXStatement(path) {
	      var left = path.get("left");
	      if (left.isVariableDeclaration()) {
	        left.replaceWith(varDeclToExpr(left.node, true));
	      }
	    },
	
	    FunctionDeclaration: function FunctionDeclaration(path) {
	      var node = path.node;
	      vars[node.id.name] = node.id;
	
	      var assignment = t.expressionStatement(t.assignmentExpression("=", node.id, t.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));
	
	      if (path.parentPath.isBlockStatement()) {
	        // Insert the assignment form before the first statement in the
	        // enclosing block.
	        path.parentPath.unshiftContainer("body", assignment);
	
	        // Remove the function declaration now that we've inserted the
	        // equivalent assignment form at the beginning of the block.
	        path.remove();
	      } else {
	        // If the parent node is not a block statement, then we can just
	        // replace the declaration with the equivalent assignment form
	        // without worrying about hoisting it.
	        path.replaceWith(assignment);
	      }
	
	      // Don't hoist variables out of inner functions.
	      path.skip();
	    },
	
	    FunctionExpression: function FunctionExpression(path) {
	      // Don't descend into nested function expressions.
	      path.skip();
	    }
	  });
	
	  var paramNames = {};
	  funPath.get("params").forEach(function (paramPath) {
	    var param = paramPath.node;
	    if (t.isIdentifier(param)) {
	      paramNames[param.name] = param;
	    } else {
	      // Variables declared by destructuring parameter patterns will be
	      // harmlessly re-declared.
	    }
	  });
	
	  var declarations = [];
	
	  _Object$keys(vars).forEach(function (name) {
	    if (!hasOwn.call(paramNames, name)) {
	      declarations.push(t.variableDeclarator(vars[name], null));
	    }
	  });
	
	  if (declarations.length === 0) {
	    return null; // Be sure to handle this case!
	  }
	
	  return t.variableDeclaration("var", declarations);
	};

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/emit.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _assert = __webpack_require__("./node_modules/assert/assert.js");
	
	var _assert2 = _interopRequireDefault(_assert);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _leap = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/leap.js");
	
	var leap = _interopRequireWildcard(_leap);
	
	var _meta = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/meta.js");
	
	var meta = _interopRequireWildcard(_meta);
	
	var _util = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/util.js");
	
	var util = _interopRequireWildcard(_util);
	
	var hasOwn = Object.prototype.hasOwnProperty;
	
	function Emitter(contextId) {
	  _assert2["default"].ok(this instanceof Emitter);
	  t.assertIdentifier(contextId);
	
	  // Used to generate unique temporary names.
	  this.nextTempId = 0;
	
	  // In order to make sure the context object does not collide with
	  // anything in the local scope, we might have to rename it, so we
	  // refer to it symbolically instead of just assuming that it will be
	  // called "context".
	  this.contextId = contextId;
	
	  // An append-only list of Statements that grows each time this.emit is
	  // called.
	  this.listing = [];
	
	  // A sparse array whose keys correspond to locations in this.listing
	  // that have been marked as branch/jump targets.
	  this.marked = [true];
	
	  // The last location will be marked when this.getDispatchLoop is
	  // called.
	  this.finalLoc = loc();
	
	  // A list of all leap.TryEntry statements emitted.
	  this.tryEntries = [];
	
	  // Each time we evaluate the body of a loop, we tell this.leapManager
	  // to enter a nested loop context that determines the meaning of break
	  // and continue statements therein.
	  this.leapManager = new leap.LeapManager(this);
	}
	
	var Ep = Emitter.prototype;
	exports.Emitter = Emitter;
	
	// Offsets into this.listing that could be used as targets for branches or
	// jumps are represented as numeric Literal nodes. This representation has
	// the amazingly convenient benefit of allowing the exact value of the
	// location to be determined at any time, even after generating code that
	// refers to the location.
	function loc() {
	  return t.numericLiteral(-1);
	}
	
	// Sets the exact value of the given location to the offset of the next
	// Statement emitted.
	Ep.mark = function (loc) {
	  t.assertLiteral(loc);
	  var index = this.listing.length;
	  if (loc.value === -1) {
	    loc.value = index;
	  } else {
	    // Locations can be marked redundantly, but their values cannot change
	    // once set the first time.
	    _assert2["default"].strictEqual(loc.value, index);
	  }
	  this.marked[index] = true;
	  return loc;
	};
	
	Ep.emit = function (node) {
	  if (t.isExpression(node)) {
	    node = t.expressionStatement(node);
	  }
	
	  t.assertStatement(node);
	  this.listing.push(node);
	};
	
	// Shorthand for emitting assignment statements. This will come in handy
	// for assignments to temporary variables.
	Ep.emitAssign = function (lhs, rhs) {
	  this.emit(this.assign(lhs, rhs));
	  return lhs;
	};
	
	// Shorthand for an assignment statement.
	Ep.assign = function (lhs, rhs) {
	  return t.expressionStatement(t.assignmentExpression("=", lhs, rhs));
	};
	
	// Convenience function for generating expressions like context.next,
	// context.sent, and context.rval.
	Ep.contextProperty = function (name, computed) {
	  return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);
	};
	
	// Shorthand for setting context.rval and jumping to `context.stop()`.
	Ep.stop = function (rval) {
	  if (rval) {
	    this.setReturnValue(rval);
	  }
	
	  this.jump(this.finalLoc);
	};
	
	Ep.setReturnValue = function (valuePath) {
	  t.assertExpression(valuePath.value);
	
	  this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
	};
	
	Ep.clearPendingException = function (tryLoc, assignee) {
	  t.assertLiteral(tryLoc);
	
	  var catchCall = t.callExpression(this.contextProperty("catch", true), [tryLoc]);
	
	  if (assignee) {
	    this.emitAssign(assignee, catchCall);
	  } else {
	    this.emit(catchCall);
	  }
	};
	
	// Emits code for an unconditional jump to the given location, even if the
	// exact value of the location is not yet known.
	Ep.jump = function (toLoc) {
	  this.emitAssign(this.contextProperty("next"), toLoc);
	  this.emit(t.breakStatement());
	};
	
	// Conditional jump.
	Ep.jumpIf = function (test, toLoc) {
	  t.assertExpression(test);
	  t.assertLiteral(toLoc);
	
	  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
	};
	
	// Conditional jump, with the condition negated.
	Ep.jumpIfNot = function (test, toLoc) {
	  t.assertExpression(test);
	  t.assertLiteral(toLoc);
	
	  var negatedTest = undefined;
	  if (t.isUnaryExpression(test) && test.operator === "!") {
	    // Avoid double negation.
	    negatedTest = test.argument;
	  } else {
	    negatedTest = t.unaryExpression("!", test);
	  }
	
	  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
	};
	
	// Returns a unique MemberExpression that can be used to store and
	// retrieve temporary values. Since the object of the member expression is
	// the context object, which is presumed to coexist peacefully with all
	// other local variables, and since we just increment `nextTempId`
	// monotonically, uniqueness is assured.
	Ep.makeTempVar = function () {
	  return this.contextProperty("t" + this.nextTempId++);
	};
	
	Ep.getContextFunction = function (id) {
	  return t.functionExpression(id || null, /*Anonymous*/
	  [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!
	  false // Nor an expression.
	  );
	};
	
	// Turns this.listing into a loop of the form
	//
	//   while (1) switch (context.next) {
	//   case 0:
	//   ...
	//   case n:
	//     return context.stop();
	//   }
	//
	// Each marked location in this.listing will correspond to one generated
	// case statement.
	Ep.getDispatchLoop = function () {
	  var self = this;
	  var cases = [];
	  var current = undefined;
	
	  // If we encounter a break, continue, or return statement in a switch
	  // case, we can skip the rest of the statements until the next case.
	  var alreadyEnded = false;
	
	  self.listing.forEach(function (stmt, i) {
	    if (self.marked.hasOwnProperty(i)) {
	      cases.push(t.switchCase(t.numericLiteral(i), current = []));
	      alreadyEnded = false;
	    }
	
	    if (!alreadyEnded) {
	      current.push(stmt);
	      if (t.isCompletionStatement(stmt)) alreadyEnded = true;
	    }
	  });
	
	  // Now that we know how many statements there will be in this.listing,
	  // we can finally resolve this.finalLoc.value.
	  this.finalLoc.value = this.listing.length;
	
	  cases.push(t.switchCase(this.finalLoc, [
	    // Intentionally fall through to the "end" case...
	  ]),
	
	  // So that the runtime can jump to the final location without having
	  // to know its offset, we provide the "end" case as a synonym.
	  t.switchCase(t.stringLiteral("end"), [
	  // This will check/clear both context.thrown and context.rval.
	  t.returnStatement(t.callExpression(this.contextProperty("stop"), []))]));
	
	  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
	};
	
	Ep.getTryLocsList = function () {
	  if (this.tryEntries.length === 0) {
	    // To avoid adding a needless [] to the majority of runtime.wrap
	    // argument lists, force the caller to handle this case specially.
	    return null;
	  }
	
	  var lastLocValue = 0;
	
	  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {
	    var thisLocValue = tryEntry.firstLoc.value;
	    _assert2["default"].ok(thisLocValue >= lastLocValue, "try entries out of order");
	    lastLocValue = thisLocValue;
	
	    var ce = tryEntry.catchEntry;
	    var fe = tryEntry.finallyEntry;
	
	    var locs = [tryEntry.firstLoc,
	    // The null here makes a hole in the array.
	    ce ? ce.firstLoc : null];
	
	    if (fe) {
	      locs[2] = fe.firstLoc;
	      locs[3] = fe.afterLoc;
	    }
	
	    return t.arrayExpression(locs);
	  }));
	};
	
	// All side effects must be realized in order.
	
	// If any subexpression harbors a leap, all subexpressions must be
	// neutered of side effects.
	
	// No destructive modification of AST nodes.
	
	Ep.explode = function (path, ignoreResult) {
	  var node = path.node;
	  var self = this;
	
	  t.assertNode(node);
	
	  if (t.isDeclaration(node)) throw getDeclError(node);
	
	  if (t.isStatement(node)) return self.explodeStatement(path);
	
	  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);
	
	  switch (node.type) {
	    case "Program":
	      return path.get("body").map(self.explodeStatement, self);
	
	    case "VariableDeclarator":
	      throw getDeclError(node);
	
	    // These node types should be handled by their parent nodes
	    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).
	    case "Property":
	    case "SwitchCase":
	    case "CatchClause":
	      throw new Error(node.type + " nodes should be handled by their parents");
	
	    default:
	      throw new Error("unknown Node of type " + JSON.stringify(node.type));
	  }
	};
	
	function getDeclError(node) {
	  return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + JSON.stringify(node));
	}
	
	Ep.explodeStatement = function (path, labelId) {
	  var stmt = path.node;
	  var self = this;
	  var before = undefined,
	      after = undefined,
	      head = undefined;
	
	  t.assertStatement(stmt);
	
	  if (labelId) {
	    t.assertIdentifier(labelId);
	  } else {
	    labelId = null;
	  }
	
	  // Explode BlockStatement nodes even if they do not contain a yield,
	  // because we don't want or need the curly braces.
	  if (t.isBlockStatement(stmt)) {
	    path.get("body").forEach(function (path) {
	      self.explodeStatement(path);
	    });
	    return;
	  }
	
	  if (!meta.containsLeap(stmt)) {
	    // Technically we should be able to avoid emitting the statement
	    // altogether if !meta.hasSideEffects(stmt), but that leads to
	    // confusing generated code (for instance, `while (true) {}` just
	    // disappears) and is probably a more appropriate job for a dedicated
	    // dead code elimination pass.
	    self.emit(stmt);
	    return;
	  }
	
	  switch (stmt.type) {
	    case "ExpressionStatement":
	      self.explodeExpression(path.get("expression"), true);
	      break;
	
	    case "LabeledStatement":
	      after = loc();
	
	      // Did you know you can break from any labeled block statement or
	      // control structure? Well, you can! Note: when a labeled loop is
	      // encountered, the leap.LabeledEntry created here will immediately
	      // enclose a leap.LoopEntry on the leap manager's stack, and both
	      // entries will have the same label. Though this works just fine, it
	      // may seem a bit redundant. In theory, we could check here to
	      // determine if stmt knows how to handle its own label; for example,
	      // stmt happens to be a WhileStatement and so we know it's going to
	      // establish its own LoopEntry when we explode it (below). Then this
	      // LabeledEntry would be unnecessary. Alternatively, we might be
	      // tempted not to pass stmt.label down into self.explodeStatement,
	      // because we've handled the label here, but that's a mistake because
	      // labeled loops may contain labeled continue statements, which is not
	      // something we can handle in this generic case. All in all, I think a
	      // little redundancy greatly simplifies the logic of this case, since
	      // it's clear that we handle all possible LabeledStatements correctly
	      // here, regardless of whether they interact with the leap manager
	      // themselves. Also remember that labels and break/continue-to-label
	      // statements are rare, and all of this logic happens at transform
	      // time, so it has no additional runtime cost.
	      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {
	        self.explodeStatement(path.get("body"), stmt.label);
	      });
	
	      self.mark(after);
	
	      break;
	
	    case "WhileStatement":
	      before = loc();
	      after = loc();
	
	      self.mark(before);
	      self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });
	      self.jump(before);
	      self.mark(after);
	
	      break;
	
	    case "DoWhileStatement":
	      var first = loc();
	      var test = loc();
	      after = loc();
	
	      self.mark(first);
	      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {
	        self.explode(path.get("body"));
	      });
	      self.mark(test);
	      self.jumpIf(self.explodeExpression(path.get("test")), first);
	      self.mark(after);
	
	      break;
	
	    case "ForStatement":
	      head = loc();
	      var update = loc();
	      after = loc();
	
	      if (stmt.init) {
	        // We pass true here to indicate that if stmt.init is an expression
	        // then we do not care about its result.
	        self.explode(path.get("init"), true);
	      }
	
	      self.mark(head);
	
	      if (stmt.test) {
	        self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	      } else {
	        // No test means continue unconditionally.
	      }
	
	      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });
	
	      self.mark(update);
	
	      if (stmt.update) {
	        // We pass true here to indicate that if stmt.update is an
	        // expression then we do not care about its result.
	        self.explode(path.get("update"), true);
	      }
	
	      self.jump(head);
	
	      self.mark(after);
	
	      break;
	
	    case "TypeCastExpression":
	      return self.explodeExpression(path.get("expression"));
	
	    case "ForInStatement":
	      head = loc();
	      after = loc();
	
	      var keyIterNextFn = self.makeTempVar();
	      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty("keys"), [self.explodeExpression(path.get("right"))]));
	
	      self.mark(head);
	
	      var keyInfoTmpVar = self.makeTempVar();
	      self.jumpIf(t.memberExpression(t.assignmentExpression("=", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier("done"), false), after);
	
	      self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier("value"), false));
	
	      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });
	
	      self.jump(head);
	
	      self.mark(after);
	
	      break;
	
	    case "BreakStatement":
	      self.emitAbruptCompletion({
	        type: "break",
	        target: self.leapManager.getBreakLoc(stmt.label)
	      });
	
	      break;
	
	    case "ContinueStatement":
	      self.emitAbruptCompletion({
	        type: "continue",
	        target: self.leapManager.getContinueLoc(stmt.label)
	      });
	
	      break;
	
	    case "SwitchStatement":
	      // Always save the discriminant into a temporary variable in case the
	      // test expressions overwrite values like context.sent.
	      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));
	
	      after = loc();
	      var defaultLoc = loc();
	      var condition = defaultLoc;
	      var caseLocs = [];
	
	      // If there are no cases, .cases might be undefined.
	      var cases = stmt.cases || [];
	
	      for (var i = cases.length - 1; i >= 0; --i) {
	        var c = cases[i];
	        t.assertSwitchCase(c);
	
	        if (c.test) {
	          condition = t.conditionalExpression(t.binaryExpression("===", disc, c.test), caseLocs[i] = loc(), condition);
	        } else {
	          caseLocs[i] = defaultLoc;
	        }
	      }
	
	      var discriminant = path.get("discriminant");
	      discriminant.replaceWith(condition);
	      self.jump(self.explodeExpression(discriminant));
	
	      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {
	        path.get("cases").forEach(function (casePath) {
	          var i = casePath.key;
	          self.mark(caseLocs[i]);
	
	          casePath.get("consequent").forEach(function (path) {
	            self.explodeStatement(path);
	          });
	        });
	      });
	
	      self.mark(after);
	      if (defaultLoc.value === -1) {
	        self.mark(defaultLoc);
	        _assert2["default"].strictEqual(after.value, defaultLoc.value);
	      }
	
	      break;
	
	    case "IfStatement":
	      var elseLoc = stmt.alternate && loc();
	      after = loc();
	
	      self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);
	
	      self.explodeStatement(path.get("consequent"));
	
	      if (elseLoc) {
	        self.jump(after);
	        self.mark(elseLoc);
	        self.explodeStatement(path.get("alternate"));
	      }
	
	      self.mark(after);
	
	      break;
	
	    case "ReturnStatement":
	      self.emitAbruptCompletion({
	        type: "return",
	        value: self.explodeExpression(path.get("argument"))
	      });
	
	      break;
	
	    case "WithStatement":
	      throw new Error("WithStatement not supported in generator functions.");
	
	    case "TryStatement":
	      after = loc();
	
	      var handler = stmt.handler;
	
	      var catchLoc = handler && loc();
	      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);
	
	      var finallyLoc = stmt.finalizer && loc();
	      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);
	
	      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);
	
	      self.tryEntries.push(tryEntry);
	      self.updateContextPrevLoc(tryEntry.firstLoc);
	
	      self.leapManager.withEntry(tryEntry, function () {
	        self.explodeStatement(path.get("block"));
	
	        if (catchLoc) {
	          (function () {
	            if (finallyLoc) {
	              // If we have both a catch block and a finally block, then
	              // because we emit the catch block first, we need to jump over
	              // it to the finally block.
	              self.jump(finallyLoc);
	            } else {
	              // If there is no finally block, then we need to jump over the
	              // catch block to the fall-through location.
	              self.jump(after);
	            }
	
	            self.updateContextPrevLoc(self.mark(catchLoc));
	
	            var bodyPath = path.get("handler.body");
	            var safeParam = self.makeTempVar();
	            self.clearPendingException(tryEntry.firstLoc, safeParam);
	
	            bodyPath.traverse(catchParamVisitor, {
	              safeParam: safeParam,
	              catchParamName: handler.param.name
	            });
	
	            self.leapManager.withEntry(catchEntry, function () {
	              self.explodeStatement(bodyPath);
	            });
	          })();
	        }
	
	        if (finallyLoc) {
	          self.updateContextPrevLoc(self.mark(finallyLoc));
	
	          self.leapManager.withEntry(finallyEntry, function () {
	            self.explodeStatement(path.get("finalizer"));
	          });
	
	          self.emit(t.returnStatement(t.callExpression(self.contextProperty("finish"), [finallyEntry.firstLoc])));
	        }
	      });
	
	      self.mark(after);
	
	      break;
	
	    case "ThrowStatement":
	      self.emit(t.throwStatement(self.explodeExpression(path.get("argument"))));
	
	      break;
	
	    default:
	      throw new Error("unknown Statement of type " + JSON.stringify(stmt.type));
	  }
	};
	
	var catchParamVisitor = {
	  Identifier: function Identifier(path, state) {
	    if (path.node.name === state.catchParamName && util.isReference(path)) {
	      path.replaceWith(state.safeParam);
	    }
	  },
	
	  Scope: function Scope(path, state) {
	    if (path.scope.hasOwnBinding(state.catchParamName)) {
	      // Don't descend into nested scopes that shadow the catch
	      // parameter with their own declarations.
	      path.skip();
	    }
	  }
	};
	
	Ep.emitAbruptCompletion = function (record) {
	  if (!isValidCompletion(record)) {
	    _assert2["default"].ok(false, "invalid completion record: " + JSON.stringify(record));
	  }
	
	  _assert2["default"].notStrictEqual(record.type, "normal", "normal completions are not abrupt");
	
	  var abruptArgs = [t.stringLiteral(record.type)];
	
	  if (record.type === "break" || record.type === "continue") {
	    t.assertLiteral(record.target);
	    abruptArgs[1] = record.target;
	  } else if (record.type === "return" || record.type === "throw") {
	    if (record.value) {
	      t.assertExpression(record.value);
	      abruptArgs[1] = record.value;
	    }
	  }
	
	  this.emit(t.returnStatement(t.callExpression(this.contextProperty("abrupt"), abruptArgs)));
	};
	
	function isValidCompletion(record) {
	  var type = record.type;
	
	  if (type === "normal") {
	    return !hasOwn.call(record, "target");
	  }
	
	  if (type === "break" || type === "continue") {
	    return !hasOwn.call(record, "value") && t.isLiteral(record.target);
	  }
	
	  if (type === "return" || type === "throw") {
	    return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
	  }
	
	  return false;
	}
	
	// Not all offsets into emitter.listing are potential jump targets. For
	// example, execution typically falls into the beginning of a try block
	// without jumping directly there. This method returns the current offset
	// without marking it, so that a switch case will not necessarily be
	// generated for this offset (I say "not necessarily" because the same
	// location might end up being marked in the process of emitting other
	// statements). There's no logical harm in marking such locations as jump
	// targets, but minimizing the number of switch cases keeps the generated
	// code shorter.
	Ep.getUnmarkedCurrentLoc = function () {
	  return t.numericLiteral(this.listing.length);
	};
	
	// The context.prev property takes the value of context.next whenever we
	// evaluate the switch statement discriminant, which is generally good
	// enough for tracking the last location we jumped to, but sometimes
	// context.prev needs to be more precise, such as when we fall
	// successfully out of a try block and into a finally block without
	// jumping. This method exists to update context.prev to the freshest
	// available location. If we were implementing a full interpreter, we
	// would know the location of the current instruction with complete
	// precision at all times, but we don't have that luxury here, as it would
	// be costly and verbose to set context.prev before every statement.
	Ep.updateContextPrevLoc = function (loc) {
	  if (loc) {
	    t.assertLiteral(loc);
	
	    if (loc.value === -1) {
	      // If an uninitialized location literal was passed in, set its value
	      // to the current this.listing.length.
	      loc.value = this.listing.length;
	    } else {
	      // Otherwise assert that the location matches the current offset.
	      _assert2["default"].strictEqual(loc.value, this.listing.length);
	    }
	  } else {
	    loc = this.getUnmarkedCurrentLoc();
	  }
	
	  // Make sure context.prev is up to date in case we fell into this try
	  // statement without jumping to it. TODO Consider avoiding this
	  // assignment when we know control must have jumped here.
	  this.emitAssign(this.contextProperty("prev"), loc);
	};
	
	Ep.explodeExpression = function (path, ignoreResult) {
	  var expr = path.node;
	  if (expr) {
	    t.assertExpression(expr);
	  } else {
	    return expr;
	  }
	
	  var self = this;
	  var result = undefined; // Used optionally by several cases below.
	  var after = undefined;
	
	  function finish(expr) {
	    t.assertExpression(expr);
	    if (ignoreResult) {
	      self.emit(expr);
	    } else {
	      return expr;
	    }
	  }
	
	  // If the expression does not contain a leap, then we either emit the
	  // expression as a standalone statement or return it whole.
	  if (!meta.containsLeap(expr)) {
	    return finish(expr);
	  }
	
	  // If any child contains a leap (such as a yield or labeled continue or
	  // break statement), then any sibling subexpressions will almost
	  // certainly have to be exploded in order to maintain the order of their
	  // side effects relative to the leaping child(ren).
	  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);
	
	  // In order to save the rest of explodeExpression from a combinatorial
	  // trainwreck of special cases, explodeViaTempVar is responsible for
	  // deciding when a subexpression needs to be "exploded," which is my
	  // very technical term for emitting the subexpression as an assignment
	  // to a temporary variable and the substituting the temporary variable
	  // for the original subexpression. Think of exploded view diagrams, not
	  // Michael Bay movies. The point of exploding subexpressions is to
	  // control the precise order in which the generated code realizes the
	  // side effects of those subexpressions.
	  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
	    _assert2["default"].ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");
	
	    var result = self.explodeExpression(childPath, ignoreChildResult);
	
	    if (ignoreChildResult) {
	      // Side effects already emitted above.
	
	    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {
	        // If tempVar was provided, then the result will always be assigned
	        // to it, even if the result does not otherwise need to be assigned
	        // to a temporary variable.  When no tempVar is provided, we have
	        // the flexibility to decide whether a temporary variable is really
	        // necessary.  Unfortunately, in general, a temporary variable is
	        // required whenever any child contains a yield expression, since it
	        // is difficult to prove (at all, let alone efficiently) whether
	        // this result would evaluate to the same value before and after the
	        // yield (see #206).  One narrow case where we can prove it doesn't
	        // matter (and thus we do not need a temporary variable) is when the
	        // result in question is a Literal value.
	        result = self.emitAssign(tempVar || self.makeTempVar(), result);
	      }
	    return result;
	  }
	
	  // If ignoreResult is true, then we must take full responsibility for
	  // emitting the expression with all its side effects, and we should not
	  // return a result.
	
	  switch (expr.type) {
	    case "MemberExpression":
	      return finish(t.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? explodeViaTempVar(null, path.get("property")) : expr.property, expr.computed));
	
	    case "CallExpression":
	      var calleePath = path.get("callee");
	      var argsPath = path.get("arguments");
	
	      var newCallee = undefined;
	      var newArgs = [];
	
	      var hasLeapingArgs = false;
	      argsPath.forEach(function (argPath) {
	        hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);
	      });
	
	      if (t.isMemberExpression(calleePath.node)) {
	        if (hasLeapingArgs) {
	          // If the arguments of the CallExpression contained any yield
	          // expressions, then we need to be sure to evaluate the callee
	          // before evaluating the arguments, but if the callee was a member
	          // expression, then we must be careful that the object of the
	          // member expression still gets bound to `this` for the call.
	
	          var newObject = explodeViaTempVar(
	          // Assign the exploded callee.object expression to a temporary
	          // variable so that we can use it twice without reevaluating it.
	          self.makeTempVar(), calleePath.get("object"));
	
	          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get("property")) : calleePath.node.property;
	
	          newArgs.unshift(newObject);
	
	          newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier("call"), false);
	        } else {
	          newCallee = self.explodeExpression(calleePath);
	        }
	      } else {
	        newCallee = self.explodeExpression(calleePath);
	
	        if (t.isMemberExpression(newCallee)) {
	          // If the callee was not previously a MemberExpression, then the
	          // CallExpression was "unqualified," meaning its `this` object
	          // should be the global object. If the exploded expression has
	          // become a MemberExpression (e.g. a context property, probably a
	          // temporary variable), then we need to force it to be unqualified
	          // by using the (0, object.property)(...) trick; otherwise, it
	          // will receive the object of the MemberExpression as its `this`
	          // object.
	          newCallee = t.sequenceExpression([t.numericLiteral(0), newCallee]);
	        }
	      }
	
	      argsPath.forEach(function (argPath) {
	        newArgs.push(explodeViaTempVar(null, argPath));
	      });
	
	      return finish(t.callExpression(newCallee, newArgs));
	
	    case "NewExpression":
	      return finish(t.newExpression(explodeViaTempVar(null, path.get("callee")), path.get("arguments").map(function (argPath) {
	        return explodeViaTempVar(null, argPath);
	      })));
	
	    case "ObjectExpression":
	      return finish(t.objectExpression(path.get("properties").map(function (propPath) {
	        if (propPath.isObjectProperty()) {
	          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get("value")), propPath.node.computed);
	        } else {
	          return propPath.node;
	        }
	      })));
	
	    case "ArrayExpression":
	      return finish(t.arrayExpression(path.get("elements").map(function (elemPath) {
	        return explodeViaTempVar(null, elemPath);
	      })));
	
	    case "SequenceExpression":
	      var lastIndex = expr.expressions.length - 1;
	
	      path.get("expressions").forEach(function (exprPath) {
	        if (exprPath.key === lastIndex) {
	          result = self.explodeExpression(exprPath, ignoreResult);
	        } else {
	          self.explodeExpression(exprPath, true);
	        }
	      });
	
	      return result;
	
	    case "LogicalExpression":
	      after = loc();
	
	      if (!ignoreResult) {
	        result = self.makeTempVar();
	      }
	
	      var left = explodeViaTempVar(result, path.get("left"));
	
	      if (expr.operator === "&&") {
	        self.jumpIfNot(left, after);
	      } else {
	        _assert2["default"].strictEqual(expr.operator, "||");
	        self.jumpIf(left, after);
	      }
	
	      explodeViaTempVar(result, path.get("right"), ignoreResult);
	
	      self.mark(after);
	
	      return result;
	
	    case "ConditionalExpression":
	      var elseLoc = loc();
	      after = loc();
	      var test = self.explodeExpression(path.get("test"));
	
	      self.jumpIfNot(test, elseLoc);
	
	      if (!ignoreResult) {
	        result = self.makeTempVar();
	      }
	
	      explodeViaTempVar(result, path.get("consequent"), ignoreResult);
	      self.jump(after);
	
	      self.mark(elseLoc);
	      explodeViaTempVar(result, path.get("alternate"), ignoreResult);
	
	      self.mark(after);
	
	      return result;
	
	    case "UnaryExpression":
	      return finish(t.unaryExpression(expr.operator,
	      // Can't (and don't need to) break up the syntax of the argument.
	      // Think about delete a[b].
	      self.explodeExpression(path.get("argument")), !!expr.prefix));
	
	    case "BinaryExpression":
	      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get("left")), explodeViaTempVar(null, path.get("right"))));
	
	    case "AssignmentExpression":
	      return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))));
	
	    case "UpdateExpression":
	      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix));
	
	    case "YieldExpression":
	      after = loc();
	      var arg = expr.argument && self.explodeExpression(path.get("argument"));
	
	      if (arg && expr.delegate) {
	        var _result = self.makeTempVar();
	
	        self.emit(t.returnStatement(t.callExpression(self.contextProperty("delegateYield"), [arg, t.stringLiteral(_result.property.name), after])));
	
	        self.mark(after);
	
	        return _result;
	      }
	
	      self.emitAssign(self.contextProperty("next"), after);
	      self.emit(t.returnStatement(arg || null));
	      self.mark(after);
	
	      return self.contextProperty("sent");
	
	    default:
	      throw new Error("unknown Expression of type " + JSON.stringify(expr.type));
	  }
	};

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/leap.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _assert = __webpack_require__("./node_modules/assert/assert.js");
	
	var _assert2 = _interopRequireDefault(_assert);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var _util = __webpack_require__("./node_modules/util/util.js");
	
	function Entry() {
	  _assert2["default"].ok(this instanceof Entry);
	}
	
	function FunctionEntry(returnLoc) {
	  Entry.call(this);
	  t.assertLiteral(returnLoc);
	  this.returnLoc = returnLoc;
	}
	
	_util.inherits(FunctionEntry, Entry);
	exports.FunctionEntry = FunctionEntry;
	
	function LoopEntry(breakLoc, continueLoc, label) {
	  Entry.call(this);
	
	  t.assertLiteral(breakLoc);
	  t.assertLiteral(continueLoc);
	
	  if (label) {
	    t.assertIdentifier(label);
	  } else {
	    label = null;
	  }
	
	  this.breakLoc = breakLoc;
	  this.continueLoc = continueLoc;
	  this.label = label;
	}
	
	_util.inherits(LoopEntry, Entry);
	exports.LoopEntry = LoopEntry;
	
	function SwitchEntry(breakLoc) {
	  Entry.call(this);
	  t.assertLiteral(breakLoc);
	  this.breakLoc = breakLoc;
	}
	
	_util.inherits(SwitchEntry, Entry);
	exports.SwitchEntry = SwitchEntry;
	
	function TryEntry(firstLoc, catchEntry, finallyEntry) {
	  Entry.call(this);
	
	  t.assertLiteral(firstLoc);
	
	  if (catchEntry) {
	    _assert2["default"].ok(catchEntry instanceof CatchEntry);
	  } else {
	    catchEntry = null;
	  }
	
	  if (finallyEntry) {
	    _assert2["default"].ok(finallyEntry instanceof FinallyEntry);
	  } else {
	    finallyEntry = null;
	  }
	
	  // Have to have one or the other (or both).
	  _assert2["default"].ok(catchEntry || finallyEntry);
	
	  this.firstLoc = firstLoc;
	  this.catchEntry = catchEntry;
	  this.finallyEntry = finallyEntry;
	}
	
	_util.inherits(TryEntry, Entry);
	exports.TryEntry = TryEntry;
	
	function CatchEntry(firstLoc, paramId) {
	  Entry.call(this);
	
	  t.assertLiteral(firstLoc);
	  t.assertIdentifier(paramId);
	
	  this.firstLoc = firstLoc;
	  this.paramId = paramId;
	}
	
	_util.inherits(CatchEntry, Entry);
	exports.CatchEntry = CatchEntry;
	
	function FinallyEntry(firstLoc, afterLoc) {
	  Entry.call(this);
	  t.assertLiteral(firstLoc);
	  t.assertLiteral(afterLoc);
	  this.firstLoc = firstLoc;
	  this.afterLoc = afterLoc;
	}
	
	_util.inherits(FinallyEntry, Entry);
	exports.FinallyEntry = FinallyEntry;
	
	function LabeledEntry(breakLoc, label) {
	  Entry.call(this);
	
	  t.assertLiteral(breakLoc);
	  t.assertIdentifier(label);
	
	  this.breakLoc = breakLoc;
	  this.label = label;
	}
	
	_util.inherits(LabeledEntry, Entry);
	exports.LabeledEntry = LabeledEntry;
	
	function LeapManager(emitter) {
	  _assert2["default"].ok(this instanceof LeapManager);
	
	  var Emitter = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/lib/emit.js").Emitter;
	  _assert2["default"].ok(emitter instanceof Emitter);
	
	  this.emitter = emitter;
	  this.entryStack = [new FunctionEntry(emitter.finalLoc)];
	}
	
	var LMp = LeapManager.prototype;
	exports.LeapManager = LeapManager;
	
	LMp.withEntry = function (entry, callback) {
	  _assert2["default"].ok(entry instanceof Entry);
	  this.entryStack.push(entry);
	  try {
	    callback.call(this.emitter);
	  } finally {
	    var popped = this.entryStack.pop();
	    _assert2["default"].strictEqual(popped, entry);
	  }
	};
	
	LMp._findLeapLocation = function (property, label) {
	  for (var i = this.entryStack.length - 1; i >= 0; --i) {
	    var entry = this.entryStack[i];
	    var loc = entry[property];
	    if (loc) {
	      if (label) {
	        if (entry.label && entry.label.name === label.name) {
	          return loc;
	        }
	      } else if (entry instanceof LabeledEntry) {
	        // Ignore LabeledEntry entries unless we are actually breaking to
	        // a label.
	      } else {
	          return loc;
	        }
	    }
	  }
	
	  return null;
	};
	
	LMp.getBreakLoc = function (label) {
	  return this._findLeapLocation("breakLoc", label);
	};
	
	LMp.getContinueLoc = function (label) {
	  return this._findLeapLocation("continueLoc", label);
	};

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/meta.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	var _assert = __webpack_require__("./node_modules/assert/assert.js");
	
	var _assert2 = _interopRequireDefault(_assert);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	var m = __webpack_require__("./node_modules/private/private.js").makeAccessor();
	
	var hasOwn = Object.prototype.hasOwnProperty;
	
	function makePredicate(propertyName, knownTypes) {
	  function onlyChildren(node) {
	    t.assertNode(node);
	
	    // Assume no side effects until we find out otherwise.
	    var result = false;
	
	    function check(child) {
	      if (result) {
	        // Do nothing.
	      } else if (Array.isArray(child)) {
	          child.some(check);
	        } else if (t.isNode(child)) {
	          _assert2["default"].strictEqual(result, false);
	          result = predicate(child);
	        }
	      return result;
	    }
	
	    var keys = t.VISITOR_KEYS[node.type];
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var child = node[key];
	        check(child);
	      }
	    }
	
	    return result;
	  }
	
	  function predicate(node) {
	    t.assertNode(node);
	
	    var meta = m(node);
	    if (hasOwn.call(meta, propertyName)) return meta[propertyName];
	
	    // Certain types are "opaque," which means they have no side
	    // effects or leaps and we don't care about their subexpressions.
	    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;
	
	    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;
	
	    return meta[propertyName] = onlyChildren(node);
	  }
	
	  predicate.onlyChildren = onlyChildren;
	
	  return predicate;
	}
	
	var opaqueTypes = {
	  FunctionExpression: true
	};
	
	// These types potentially have side effects regardless of what side
	// effects their subexpressions have.
	var sideEffectTypes = {
	  CallExpression: true, // Anything could happen!
	  ForInStatement: true, // Modifies the key variable.
	  UnaryExpression: true, // Think delete.
	  BinaryExpression: true, // Might invoke .toString() or .valueOf().
	  AssignmentExpression: true, // Side-effecting by definition.
	  UpdateExpression: true, // Updates are essentially assignments.
	  NewExpression: true // Similar to CallExpression.
	};
	
	// These types are the direct cause of all leaps in control flow.
	var leapTypes = {
	  YieldExpression: true,
	  BreakStatement: true,
	  ContinueStatement: true,
	  ReturnStatement: true,
	  ThrowStatement: true
	};
	
	// All leap types are also side effect types.
	for (var type in leapTypes) {
	  if (hasOwn.call(leapTypes, type)) {
	    sideEffectTypes[type] = leapTypes[type];
	  }
	}
	
	exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
	exports.containsLeap = makePredicate("containsLeap", leapTypes);

/***/ },

/***/ "./node_modules/babel-plugin-transform-regenerator/lib/util.js":
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports.runtimeProperty = runtimeProperty;
	exports.isReference = isReference;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-plugin-transform-regenerator/node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	function runtimeProperty(name) {
	  return t.memberExpression(t.identifier("regeneratorRuntime"), t.identifier(name), false);
	}
	
	function isReference(path) {
	  return path.isReferenced() || path.parentPath.isAssignmentExpression({ left: path.node });
	}

/***/ },

/***/ "./node_modules/babel-preset-stage-0/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__("./node_modules/babel-preset-stage-1/index.js")
	  ],
	  plugins: [
	    __webpack_require__("./node_modules/babel-plugin-transform-do-expressions/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-function-bind/lib/index.js")
	  ]
	};


/***/ },

/***/ "./node_modules/babel-preset-stage-1/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__("./node_modules/babel-preset-stage-2/index.js")
	  ],
	  plugins: [
	    __webpack_require__("./node_modules/babel-plugin-transform-class-constructor-call/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-class-properties/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-decorators/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-export-extensions/lib/index.js")
	  ]
	};


/***/ },

/***/ "./node_modules/babel-preset-stage-2/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__("./node_modules/babel-preset-stage-3/index.js")
	  ],
	  plugins: [
	    __webpack_require__("./node_modules/babel-plugin-syntax-trailing-function-commas/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-object-rest-spread/lib/index.js")
	  ]
	};


/***/ },

/***/ "./node_modules/babel-preset-stage-3/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__("./node_modules/babel-plugin-transform-async-to-generator/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-exponentiation-operator/lib/index.js")
	  ]
	};


/***/ },

/***/ "./node_modules/babel-plugin-transform-async-to-generator/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperRemapAsyncToGenerator = __webpack_require__("./node_modules/babel-helper-remap-async-to-generator/lib/index.js");
	
	var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);
	
	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-async-functions/lib/index.js"),
	
	    visitor: {
	      Function: function Function(path, state) {
	        if (!path.node.async || path.node.generator) return;
	
	        _babelHelperRemapAsyncToGenerator2["default"](path, state.addHelper("asyncToGenerator"));
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-remap-async-to-generator/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperFunctionName = __webpack_require__("./node_modules/babel-helper-function-name/lib/index.js");
	
	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type { NodePath } from "babel-traverse";*/
	
	var buildWrapper = _babelTemplate2["default"]("\n  (function () {\n    var ref = FUNCTION;\n    return function (PARAMS) {\n      return ref.apply(this, arguments);\n    };\n  })\n");
	
	var arrowBuildWrapper = _babelTemplate2["default"]("\n  (() => {\n    var ref = FUNCTION, _this = this;\n    return function(PARAMS) {\n      return ref.apply(_this, arguments);\n    };\n  })\n");
	
	var awaitVisitor = {
	  ArrowFunctionExpression: function ArrowFunctionExpression(path) {
	    if (!path.node.async) {
	      path.arrowFunctionToShadowed();
	    }
	  },
	
	  AwaitExpression: function AwaitExpression(_ref) {
	    var node = _ref.node;
	
	    node.type = "YieldExpression";
	  }
	};
	
	function classOrObjectMethod(path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  var body = node.body;
	
	  node.async = false;
	
	  var container = t.functionExpression(null, [], t.blockStatement(body.body), true);
	  container.shadow = true;
	  body.body = [t.returnStatement(t.callExpression(t.callExpression(callId, [container]), []))];
	}
	
	function plainFunction(path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  var wrapper = buildWrapper;
	
	  if (path.isArrowFunctionExpression()) {
	    path.arrowFunctionToShadowed();
	    wrapper = arrowBuildWrapper;
	  }
	
	  node.async = false;
	  node.generator = true;
	
	  var asyncFnId = node.id;
	  node.id = null;
	
	  var isDeclaration = path.isFunctionDeclaration();
	
	  if (isDeclaration) {
	    node.type = "FunctionExpression";
	  }
	
	  var built = t.callExpression(callId, [node]);
	  var container = wrapper({
	    FUNCTION: built,
	    PARAMS: node.params.map(function () {
	      return path.scope.generateUidIdentifier("x");
	    })
	  }).expression;
	
	  var retFunction = container.body.body[1].argument;
	
	  if (isDeclaration) {
	    var declar = t.variableDeclaration("let", [t.variableDeclarator(t.identifier(asyncFnId.name), t.callExpression(container, []))]);
	    declar._blockHoist = true;
	
	    retFunction.id = asyncFnId;
	    path.replaceWith(declar);
	  } else {
	    if (asyncFnId && asyncFnId.name) {
	      retFunction.id = asyncFnId;
	    } else {
	      _babelHelperFunctionName2["default"]({
	        node: retFunction,
	        parent: path.parent,
	        scope: path.scope
	      });
	    }
	
	    if (retFunction.id || node.params.length) {
	      // we have an inferred function id or params so we need this wrapper
	      path.replaceWith(t.callExpression(container, []));
	    } else {
	      // we can omit this wrapper as the conditions it protects for do not apply
	      path.replaceWith(built);
	    }
	  }
	}
	
	exports["default"] = function (path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  if (node.generator) return;
	
	  path.traverse(awaitVisitor);
	
	  if (path.isClassMethod() || path.isObjectMethod()) {
	    return classOrObjectMethod(path, callId);
	  } else {
	    return plainFunction(path, callId);
	  }
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-async-functions/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("asyncFunctions");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-exponentiation-operator/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperBuilderBinaryAssignmentOperatorVisitor = __webpack_require__("./node_modules/babel-helper-builder-binary-assignment-operator-visitor/lib/index.js");
	
	var _babelHelperBuilderBinaryAssignmentOperatorVisitor2 = _interopRequireDefault(_babelHelperBuilderBinaryAssignmentOperatorVisitor);
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-exponentiation-operator/lib/index.js"),
	
	    visitor: _babelHelperBuilderBinaryAssignmentOperatorVisitor2["default"]({
	      operator: "**",
	
	      build: function build(left, right) {
	        return t.callExpression(t.memberExpression(t.identifier("Math"), t.identifier("pow")), [left, right]);
	      }
	    })
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-builder-binary-assignment-operator-visitor/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	/* @flow */
	
	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperExplodeAssignableExpression = __webpack_require__("./node_modules/babel-helper-explode-assignable-expression/lib/index.js");
	
	var _babelHelperExplodeAssignableExpression2 = _interopRequireDefault(_babelHelperExplodeAssignableExpression);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	exports["default"] = function (opts /*: {
	                                      build: Function;
	                                      operator: string;
	                                    }*/) /*: Object*/ {
	  var visitor = {};
	
	  function isAssignment(node) {
	    return node.operator === opts.operator + "=";
	  }
	
	  function buildAssignment(left, right) {
	    return t.assignmentExpression("=", left, right);
	  }
	
	  visitor.ExpressionStatement = function (path, file) {
	    // hit the `AssignmentExpression` one below
	    if (path.isCompletionRecord()) return;
	
	    var expr = path.node.expression;
	    if (!isAssignment(expr)) return;
	
	    var nodes = [];
	    var exploded = _babelHelperExplodeAssignableExpression2["default"](expr.left, nodes, file, path.scope, true);
	
	    nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));
	
	    path.replaceWithMultiple(nodes);
	  };
	
	  visitor.AssignmentExpression = function (path, file) {
	    var node = path.node;
	    var scope = path.scope;
	
	    if (!isAssignment(node)) return;
	
	    var nodes = [];
	    var exploded = _babelHelperExplodeAssignableExpression2["default"](node.left, nodes, file, scope);
	    nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
	    path.replaceWithMultiple(nodes);
	  };
	
	  visitor.BinaryExpression = function (path) {
	    var node = path.node;
	
	    if (node.operator === opts.operator) {
	      path.replaceWith(opts.build(node.left, node.right));
	    }
	  };
	
	  return visitor;
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-explode-assignable-expression/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type { Scope } from "babel-traverse";*/
	
	function getObjRef(node, nodes, file, scope) {
	  var ref = undefined;
	  if (t.isIdentifier(node)) {
	    if (scope.hasBinding(node.name)) {
	      // this variable is declared in scope so we can be 100% sure
	      // that evaluating it multiple times wont trigger a getter
	      // or something else
	      return node;
	    } else {
	      // could possibly trigger a getter so we need to only evaluate
	      // it once
	      ref = node;
	    }
	  } else if (t.isMemberExpression(node)) {
	    ref = node.object;
	
	    if (t.isIdentifier(ref) && scope.hasBinding(ref.name)) {
	      // the object reference that we need to save is locally declared
	      // so as per the previous comment we can be 100% sure evaluating
	      // it multiple times will be safe
	      return ref;
	    }
	  } else {
	    throw new Error("We can't explode this node type " + node.type);
	  }
	
	  var temp = scope.generateUidIdentifierBasedOnNode(ref);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
	  return temp;
	}
	
	function getPropRef(node, nodes, file, scope) {
	  var prop = node.property;
	  var key = t.toComputedKey(node, prop);
	  if (t.isLiteral(key)) return key;
	
	  var temp = scope.generateUidIdentifierBasedOnNode(prop);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
	  return temp;
	}
	
	exports["default"] = function (node /*: Object*/, nodes /*: Array<Object>*/, file, scope /*: Scope*/, allowedSingleIdent /*:: ?: boolean*/) /*: {
	                                                                                                                                              uid: Object;
	                                                                                                                                              ref: Object;
	                                                                                                                                            }*/ {
	  var obj = undefined;
	  if (t.isIdentifier(node) && allowedSingleIdent) {
	    obj = node;
	  } else {
	    obj = getObjRef(node, nodes, file, scope);
	  }
	
	  var ref = undefined,
	      uid = undefined;
	
	  if (t.isIdentifier(node)) {
	    ref = node;
	    uid = obj;
	  } else {
	    var prop = getPropRef(node, nodes, file, scope);
	    var computed = node.computed || t.isLiteral(prop);
	    uid = ref = t.memberExpression(obj, prop, computed);
	  }
	
	  return {
	    uid: uid,
	    ref: ref
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-exponentiation-operator/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("exponentiationOperator");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-trailing-function-commas/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("trailingFunctionCommas");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-object-rest-spread/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref3) {
	  var t = _ref3.types;
	
	  function hasSpread(node) {
	    for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var prop = _ref;
	
	      if (t.isSpreadProperty(prop)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-object-rest-spread/lib/index.js"),
	
	    visitor: {
	      ObjectExpression: function ObjectExpression(path, file) {
	        if (!hasSpread(path.node)) return;
	
	        var args = [];
	        var props = [];
	
	        function push() {
	          if (!props.length) return;
	          args.push(t.objectExpression(props));
	          props = [];
	        }
	
	        for (var _iterator2 = (path.node.properties /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;
	
	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }
	
	          var prop = _ref2;
	
	          if (t.isSpreadProperty(prop)) {
	            push();
	            args.push(prop.argument);
	          } else {
	            props.push(prop);
	          }
	        }
	
	        push();
	
	        if (!t.isObjectExpression(args[0])) {
	          args.unshift(t.objectExpression([]));
	        }
	
	        path.replaceWith(t.callExpression(file.addHelper("extends"), args));
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-object-rest-spread/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("objectRestSpread");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-class-constructor-call/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol = __webpack_require__("./node_modules/babel-runtime/core-js/symbol.js")["default"];
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var buildWrapper = _babelTemplate2["default"]("\n  let CLASS_REF = CLASS;\n  var CALL_REF = CALL;\n  var WRAPPER_REF = function (...args) {\n    if (this instanceof WRAPPER_REF) {\n      return Reflect.construct(CLASS_REF, args);\n    } else {\n      return CALL_REF.apply(this, args);\n    }\n  };\n  WRAPPER_REF.__proto__ = CLASS_REF;\n  WRAPPER_REF;\n");
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  var ALREADY_VISITED = _Symbol();
	
	  function findConstructorCall(path) /*: ?Object*/ {
	    var methods /*: Array<Object>*/ = path.get("body.body");
	
	    for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var method = _ref;
	
	      if (method.node.kind === "constructorCall") {
	        return method;
	      }
	    }
	
	    return null;
	  }
	
	  function handleClassWithCall(constructorCall, classPath) {
	    var _classPath = classPath;
	    var node = _classPath.node;
	
	    var ref = node.id || classPath.scope.generateUidIdentifier("class");
	
	    if (classPath.parentPath.isExportDefaultDeclaration()) {
	      classPath = classPath.parentPath;
	      classPath.insertAfter(t.exportDefaultDeclaration(ref));
	    }
	
	    classPath.replaceWithMultiple(buildWrapper({
	      CLASS_REF: classPath.scope.generateUidIdentifier(ref.name),
	      CALL_REF: classPath.scope.generateUidIdentifier(ref.name + "Call"),
	      CALL: t.functionExpression(null, constructorCall.node.params, constructorCall.node.body),
	      CLASS: t.toExpression(node),
	      WRAPPER_REF: ref
	    }));
	
	    constructorCall.remove();
	  }
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-class-constructor-call/lib/index.js"),
	
	    visitor: {
	      Class: function Class(path) {
	        if (path.node[ALREADY_VISITED]) return;
	        path.node[ALREADY_VISITED] = true;
	
	        var constructorCall = findConstructorCall(path);
	
	        if (constructorCall) {
	          handleClassWithCall(constructorCall, path);
	        } else {
	          return;
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-class-constructor-call/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("classConstructorCall");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-class-properties/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	// todo: define instead of assign
	
	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  var findBareSupers = {
	    Super: function Super(path) {
	      if (path.parentPath.isCallExpression({ callee: path.node })) {
	        this.push(path.parentPath);
	      }
	    }
	  };
	
	  var referenceVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      if (this.scope.hasOwnBinding(path.node.name)) {
	        this.collision = true;
	        path.skip();
	      }
	    }
	  };
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-class-properties/lib/index.js"),
	
	    visitor: {
	      Class: function Class(path) {
	        var isDerived = !!path.node.superClass;
	        var constructor = undefined;
	        var props = [];
	        var body = path.get("body");
	
	        for (var _iterator = body.get("body"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var _path = _ref;
	
	          if (_path.isClassProperty()) {
	            props.push(_path);
	          } else if (_path.isClassMethod({ kind: "constructor" })) {
	            constructor = _path;
	          }
	        }
	
	        if (!props.length) return;
	
	        var nodes = [];
	        var ref = undefined;
	
	        if (path.isClassExpression() || !path.node.id) {
	          ref = path.scope.generateUidIdentifier("class");
	        } else {
	          // path.isClassDeclaration() && path.node.id
	          ref = path.node.id;
	        }
	
	        var instanceBody = [];
	
	        for (var _i2 = 0; _i2 < props.length; _i2++) {
	          var prop = props[_i2];
	          var propNode = prop.node;
	          if (propNode.decorators && propNode.decorators.length > 0) continue;
	          if (!propNode.value) continue;
	
	          var isStatic = propNode["static"];
	
	          if (isStatic) {
	            nodes.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(ref, propNode.key), propNode.value)));
	          } else {
	            instanceBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), propNode.key), propNode.value)));
	          }
	        }
	
	        if (instanceBody.length) {
	          if (!constructor) {
	            var newConstructor = t.classMethod("constructor", t.identifier("constructor"), [], t.blockStatement([]));
	            if (isDerived) {
	              newConstructor.params = [t.restElement(t.identifier("args"))];
	              newConstructor.body.body.push(t.returnStatement(t.callExpression(t["super"](), [t.spreadElement(t.identifier("args"))])));
	            }
	
	            var _body$unshiftContainer = body.unshiftContainer("body", newConstructor);
	
	            constructor = _body$unshiftContainer[0];
	          }
	
	          var collisionState = {
	            collision: false,
	            scope: constructor.scope
	          };
	
	          for (var _i3 = 0; _i3 < props.length; _i3++) {
	            var prop = props[_i3];
	            prop.traverse(referenceVisitor, collisionState);
	            if (collisionState.collision) break;
	          }
	
	          if (collisionState.collision) {
	            var initialisePropsRef = path.scope.generateUidIdentifier("initialiseProps");
	
	            nodes.push(t.variableDeclaration("var", [t.variableDeclarator(initialisePropsRef, t.functionExpression(null, [], t.blockStatement(instanceBody)))]));
	
	            instanceBody = [t.expressionStatement(t.callExpression(t.memberExpression(initialisePropsRef, t.identifier("call")), [t.thisExpression()]))];
	          }
	
	          //
	
	          if (isDerived) {
	            var bareSupers = [];
	            constructor.traverse(findBareSupers, bareSupers);
	            for (var _i4 = 0; _i4 < bareSupers.length; _i4++) {
	              var bareSuper = bareSupers[_i4];
	              bareSuper.insertAfter(instanceBody);
	            }
	          } else {
	            constructor.get("body").unshiftContainer("body", instanceBody);
	          }
	        }
	
	        for (var _i5 = 0; _i5 < props.length; _i5++) {
	          var prop = props[_i5];
	          prop.remove();
	        }
	
	        if (!nodes.length) return;
	
	        if (path.isClassExpression()) {
	          path.scope.push({ id: ref });
	          path.replaceWith(t.assignmentExpression("=", ref, path.node));
	        } else {
	          // path.isClassDeclaration()
	          if (!path.node.id) {
	            path.node.id = ref;
	          }
	
	          if (path.parentPath.isExportDeclaration()) {
	            path = path.parentPath;
	          }
	        }
	
	        path.insertAfter(nodes);
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-class-properties/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("classProperties");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-decorators/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _Object$create = __webpack_require__("./node_modules/babel-runtime/core-js/object/create.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	exports.__esModule = true;
	
	var _babelTemplate = __webpack_require__("./node_modules/babel-template/lib/index.js");
	
	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
	
	var _babelHelperExplodeClass = __webpack_require__("./node_modules/babel-helper-explode-class/lib/index.js");
	
	var _babelHelperExplodeClass2 = _interopRequireDefault(_babelHelperExplodeClass);
	
	var buildClassDecorator = _babelTemplate2["default"]("\n  CLASS_REF = DECORATOR(CLASS_REF) || CLASS_REF;\n");
	
	exports["default"] = function (_ref5) {
	  var t = _ref5.types;
	
	  function cleanDecorators(decorators) {
	    return decorators.reverse().map(function (dec) {
	      return dec.expression;
	    });
	  }
	
	  function transformClass(path, ref, state) {
	    var nodes = [];
	
	    state;
	
	    var classDecorators = path.node.decorators;
	    if (classDecorators) {
	      path.node.decorators = null;
	      classDecorators = cleanDecorators(classDecorators);
	
	      for (var _iterator = classDecorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;
	
	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }
	
	        var decorator = _ref;
	
	        nodes.push(buildClassDecorator({
	          CLASS_REF: ref,
	          DECORATOR: decorator
	        }));
	      }
	    }
	
	    var map = _Object$create(null);
	
	    for (var _iterator2 = path.get("body.body"), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;
	
	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }
	
	      var method = _ref2;
	
	      var decorators = method.node.decorators;
	      if (!decorators) continue;
	
	      var alias = t.toKeyAlias(method.node);
	      map[alias] = map[alias] || [];
	      map[alias].push(method.node);
	
	      method.remove();
	    }
	
	    for (var alias in map) {
	      var items = map[alias];
	
	      items;
	    }
	
	    return nodes;
	  }
	
	  function hasDecorators(path) {
	    if (path.isClass()) {
	      if (path.node.decorators) return true;
	
	      for (var _iterator3 = (path.node.body.body /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;
	
	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }
	
	        var method = _ref3;
	
	        if (method.decorators) {
	          return true;
	        }
	      }
	    } else if (path.isObjectExpression()) {
	      for (var _iterator4 = (path.node.properties /*: Array<Object>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	        var _ref4;
	
	        if (_isArray4) {
	          if (_i4 >= _iterator4.length) break;
	          _ref4 = _iterator4[_i4++];
	        } else {
	          _i4 = _iterator4.next();
	          if (_i4.done) break;
	          _ref4 = _i4.value;
	        }
	
	        var prop = _ref4;
	
	        if (prop.decorators) {
	          return true;
	        }
	      }
	    }
	
	    return false;
	  }
	
	  function doError(path) {
	    throw path.buildCodeFrameError("Decorators are not supported yet in 6.x pending proposal update.");
	  }
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-decorators/lib/index.js"),
	
	    visitor: {
	      ClassExpression: function ClassExpression(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	
	        _babelHelperExplodeClass2["default"](path);
	
	        var ref = path.scope.generateDeclaredUidIdentifier("ref");
	        var nodes = [];
	
	        nodes.push(t.assignmentExpression("=", ref, path.node));
	
	        nodes = nodes.concat(transformClass(path, ref, this));
	
	        nodes.push(ref);
	
	        path.replaceWith(t.sequenceExpression(nodes));
	      },
	
	      ClassDeclaration: function ClassDeclaration(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	        _babelHelperExplodeClass2["default"](path);
	
	        var ref = path.node.id;
	        var nodes = [];
	
	        nodes = nodes.concat(transformClass(path, ref, this).map(function (expr) {
	          return t.expressionStatement(expr);
	        }));
	        nodes.push(t.expressionStatement(ref));
	
	        path.insertAfter(nodes);
	      },
	
	      ObjectExpression: function ObjectExpression(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-explode-class/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _babelHelperBindifyDecorators = __webpack_require__("./node_modules/babel-helper-bindify-decorators/lib/index.js");
	
	var _babelHelperBindifyDecorators2 = _interopRequireDefault(_babelHelperBindifyDecorators);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type { NodePath } from "babel-traverse"*/
	exports["default"] = function (classPath) {
	  classPath.assertClass();
	
	  var memoisedExpressions = [];
	
	  function maybeMemoise(path) {
	    if (!path.node || path.isPure()) return;
	
	    var uid = classPath.scope.generateDeclaredUidIdentifier();
	    memoisedExpressions.push(t.assignmentExpression("=", uid, path.node));
	    path.replaceWith(uid);
	  }
	
	  function memoiseDecorators(paths /*: Array<NodePath>*/) {
	    if (!Array.isArray(paths) || !paths.length) return;
	
	    // ensure correct evaluation order of decorators
	    paths = paths.reverse();
	
	    // bind decorators if they're member expressions
	    _babelHelperBindifyDecorators2["default"](paths);
	
	    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var path = _ref;
	
	      maybeMemoise(path);
	    }
	  }
	
	  maybeMemoise(classPath.get("superClass"));
	  memoiseDecorators(classPath.get("decorators"), true);
	
	  var methods /*: Array<NodePath>*/ = classPath.get("body.body");
	  for (var _iterator2 = methods, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;
	
	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }
	
	    var methodPath = _ref2;
	
	    if (methodPath.is("computed")) {
	      maybeMemoise(methodPath.get("key"));
	    }
	
	    if (methodPath.has("decorators")) {
	      memoiseDecorators(classPath.get("decorators"));
	    }
	  }
	
	  if (memoisedExpressions) {
	    classPath.insertBefore(memoisedExpressions.map(function (expr) {
	      return t.expressionStatement(expr);
	    }));
	  }
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-bindify-decorators/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	exports["default"] = bindifyDecorators;
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: import type { NodePath } from "babel-traverse"*/
	function bindifyDecorators(decorators /*: Array<NodePath>*/) /*: Array<NodePath>*/ {
	  for (var _iterator = decorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var decoratorPath = _ref;
	
	    var decorator = decoratorPath.node;
	    var expression = decorator.expression;
	    if (!t.isMemberExpression(expression)) continue;
	
	    var temp = decoratorPath.scope.maybeGenerateMemoised(expression.object);
	    var ref = undefined;
	
	    var nodes = [];
	
	    if (temp) {
	      ref = temp;
	      nodes.push(t.assignmentExpression("=", temp, expression.object));
	    } else {
	      ref = expression.object;
	    }
	
	    nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));
	
	    if (nodes.length === 1) {
	      decorator.expression = nodes[0];
	    } else {
	      decorator.expression = t.sequenceExpression(nodes);
	    }
	  }
	}
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-decorators/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("decorators");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-export-extensions/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  function build(node, nodes, scope) {
	    var first = node.specifiers[0];
	    if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first)) return;
	
	    var specifier = node.specifiers.shift();
	    var uid = scope.generateUidIdentifier(specifier.exported.name);
	
	    var newSpecifier = undefined;
	    if (t.isExportNamespaceSpecifier(specifier)) {
	      newSpecifier = t.importNamespaceSpecifier(uid);
	    } else {
	      newSpecifier = t.importDefaultSpecifier(uid);
	    }
	
	    nodes.push(t.importDeclaration([newSpecifier], node.source));
	    nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));
	
	    build(node, nodes, scope);
	  }
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-export-extensions/lib/index.js"),
	
	    visitor: {
	      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
	        var node = path.node;
	        var scope = path.scope;
	
	        var nodes = [];
	        build(node, nodes, scope);
	        if (!nodes.length) return;
	
	        if (node.specifiers.length >= 1) {
	          nodes.push(node);
	        }
	        path.replaceWithMultiple(nodes);
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-export-extensions/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("exportExtensions");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-do-expressions/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-do-expressions/lib/index.js"),
	
	    visitor: {
	      DoExpression: function DoExpression(path) {
	        var body = path.node.body.body;
	        if (body.length) {
	          path.replaceWithMultiple(body);
	        } else {
	          path.replaceWith(path.scope.buildUndefinedNode());
	        }
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-do-expressions/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("doExpressions");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-function-bind/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref) {
	  var t = _ref.types;
	
	  function getTempId(scope) {
	    var id = scope.path.getData("functionBind");
	    if (id) return id;
	
	    id = scope.generateDeclaredUidIdentifier("context");
	    return scope.path.setData("functionBind", id);
	  }
	
	  function getStaticContext(bind, scope) {
	    var object = bind.object || bind.callee.object;
	    return scope.isStatic(object) && object;
	  }
	
	  function inferBindContext(bind, scope) {
	    var staticContext = getStaticContext(bind, scope);
	    if (staticContext) return staticContext;
	
	    var tempId = getTempId(scope);
	    if (bind.object) {
	      bind.callee = t.sequenceExpression([t.assignmentExpression("=", tempId, bind.object), bind.callee]);
	    } else {
	      bind.callee.object = t.assignmentExpression("=", tempId, bind.callee.object);
	    }
	    return tempId;
	  }
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-function-bind/lib/index.js"),
	
	    visitor: {
	      CallExpression: function CallExpression(_ref2) {
	        var node = _ref2.node;
	        var scope = _ref2.scope;
	
	        var bind = node.callee;
	        if (!t.isBindExpression(bind)) return;
	
	        var context = inferBindContext(bind, scope);
	        node.callee = t.memberExpression(bind.callee, t.identifier("call"));
	        node.arguments.unshift(context);
	      },
	
	      BindExpression: function BindExpression(path) {
	        var node = path.node;
	        var scope = path.scope;
	
	        var context = inferBindContext(node, scope);
	        path.replaceWith(t.callExpression(t.memberExpression(node.callee, t.identifier("bind")), [context]));
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-function-bind/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("functionBind");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-preset-react/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__("./node_modules/babel-plugin-transform-react-jsx/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-flow-strip-types/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-syntax-flow/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-syntax-jsx/lib/index.js"),
	    __webpack_require__("./node_modules/babel-plugin-transform-react-display-name/lib/index.js"),
	  ],
	  /*env: {
	    development: {
	      plugins: [
	        require("babel-plugin-transform-react-jsx-source")
	      ]
	    }
	  }*/
	};


/***/ },

/***/ "./node_modules/babel-plugin-transform-react-jsx/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  var JSX_ANNOTATION_REGEX = /\*?\s*@jsx\s+([^\s]+)/;
	
	  var visitor = __webpack_require__("./node_modules/babel-helper-builder-react-jsx/lib/index.js")({
	    pre: function pre(state) {
	      var tagName = state.tagName;
	      var args = state.args;
	      if (t.react.isCompatTag(tagName)) {
	        args.push(t.stringLiteral(tagName));
	      } else {
	        args.push(state.tagExpr);
	      }
	    },
	
	    post: function post(state, pass) {
	      state.callee = pass.get("jsxIdentifier");
	    }
	  });
	
	  visitor.Program = function (path, state) {
	    var file = state.file;
	
	    var id = state.opts.pragma || "React.createElement";
	
	    for (var _iterator = (file.ast.comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var comment = _ref;
	
	      var matches = JSX_ANNOTATION_REGEX.exec(comment.value);
	      if (matches) {
	        id = matches[1];
	        if (id === "React.DOM") {
	          throw file.buildCodeFrameError(comment, "The @jsx React.DOM pragma has been deprecated as of React 0.12");
	        } else {
	          break;
	        }
	      }
	    }
	
	    state.set("jsxIdentifier", id.split(".").map(function (name) {
	      return t.identifier(name);
	    }).reduce(function (object, property) {
	      return t.memberExpression(object, property);
	    }));
	  };
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-jsx/lib/index.js"),
	    visitor: visitor
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-helper-builder-react-jsx/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-default.js")["default"];
	
	var _interopRequireWildcard = __webpack_require__("./node_modules/babel-runtime/helpers/interop-require-wildcard.js")["default"];
	
	exports.__esModule = true;
	
	var _esutils = __webpack_require__("./node_modules/esutils/lib/utils.js");
	
	var _esutils2 = _interopRequireDefault(_esutils);
	
	var _babelTypes = __webpack_require__("./node_modules/babel-types/lib/index.js");
	
	var t = _interopRequireWildcard(_babelTypes);
	
	/*:: type ElementState = {
	  tagExpr: Object; // tag node
	  tagName: string; // raw string tag name
	  args: Array<Object>; // array of call arguments
	  call?: Object; // optional call property that can be set to override the call expression returned
	  pre?: Function; // function called with (state: ElementState) before building attribs
	  post?: Function; // function called with (state: ElementState) after building attribs
	};*/ // function called with (state: ElementState) after building attribs
	
	exports["default"] = function (opts) {
	  var visitor = {};
	
	  visitor.JSXNamespacedName = function (path) {
	    throw path.buildCodeFrameError("Namespace tags are not supported. ReactJSX is not XML.");
	  };
	
	  visitor.JSXElement = {
	    exit: function exit(path, file) {
	      var callExpr = buildElementCall(path.get("openingElement"), file);
	
	      callExpr.arguments = callExpr.arguments.concat(path.node.children);
	
	      if (callExpr.arguments.length >= 3) {
	        callExpr._prettyCall = true;
	      }
	
	      path.replaceWith(t.inherits(callExpr, path.node));
	    }
	  };
	
	  return visitor;
	
	  function convertJSXIdentifier(node, parent) {
	    if (t.isJSXIdentifier(node)) {
	      if (node.name === "this" && t.isReferenced(node, parent)) {
	        return t.thisExpression();
	      } else if (_esutils2["default"].keyword.isIdentifierNameES6(node.name)) {
	        node.type = "Identifier";
	      } else {
	        return t.stringLiteral(node.name);
	      }
	    } else if (t.isJSXMemberExpression(node)) {
	      return t.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node));
	    }
	
	    return node;
	  }
	
	  function convertAttributeValue(node) {
	    if (t.isJSXExpressionContainer(node)) {
	      return node.expression;
	    } else {
	      return node;
	    }
	  }
	
	  function convertAttribute(node) {
	    var value = convertAttributeValue(node.value || t.booleanLiteral(true));
	
	    if (t.isStringLiteral(value)) {
	      value.value = value.value.replace(/\n\s+/g, " ");
	    }
	
	    if (t.isValidIdentifier(node.name.name)) {
	      node.name.type = "Identifier";
	    } else {
	      node.name = t.stringLiteral(node.name.name);
	    }
	
	    return t.inherits(t.objectProperty(node.name, value), node);
	  }
	
	  function buildElementCall(path, file) {
	    path.parent.children = t.react.buildChildren(path.parent);
	
	    var tagExpr = convertJSXIdentifier(path.node.name, path.node);
	    var args = [];
	
	    var tagName = undefined;
	    if (t.isIdentifier(tagExpr)) {
	      tagName = tagExpr.name;
	    } else if (t.isLiteral(tagExpr)) {
	      tagName = tagExpr.value;
	    }
	
	    var state /*: ElementState*/ = {
	      tagExpr: tagExpr,
	      tagName: tagName,
	      args: args
	    };
	
	    if (opts.pre) {
	      opts.pre(state, file);
	    }
	
	    var attribs = path.node.attributes;
	    if (attribs.length) {
	      attribs = buildOpeningElementAttributes(attribs, file);
	    } else {
	      attribs = t.nullLiteral();
	    }
	
	    args.push(attribs);
	
	    if (opts.post) {
	      opts.post(state, file);
	    }
	
	    return state.call || t.callExpression(state.callee, args);
	  }
	
	  /**
	   * The logic for this is quite terse. It's because we need to
	   * support spread elements. We loop over all attributes,
	   * breaking on spreads, we then push a new object containg
	   * all prior attributes to an array for later processing.
	   */
	
	  function buildOpeningElementAttributes(attribs, file) {
	    var _props = [];
	    var objs = [];
	
	    function pushProps() {
	      if (!_props.length) return;
	
	      objs.push(t.objectExpression(_props));
	      _props = [];
	    }
	
	    while (attribs.length) {
	      var prop = attribs.shift();
	      if (t.isJSXSpreadAttribute(prop)) {
	        pushProps();
	        objs.push(prop.argument);
	      } else {
	        _props.push(convertAttribute(prop));
	      }
	    }
	
	    pushProps();
	
	    if (objs.length === 1) {
	      // only one object
	      attribs = objs[0];
	    } else {
	      // looks like we have multiple objects
	      if (!t.isObjectExpression(objs[0])) {
	        objs.unshift(t.objectExpression([]));
	      }
	
	      // spread it
	      attribs = t.callExpression(file.addHelper("extends"), objs);
	    }
	
	    return attribs;
	  }
	};
	
	module.exports = exports["default"];
	// tag node
	// raw string tag name
	// array of call arguments
	// optional call property that can be set to override the call expression returned
	// function called with (state: ElementState) before building attribs

/***/ },

/***/ "./node_modules/babel-plugin-syntax-jsx/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("jsx");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-flow-strip-types/lib/index.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _getIterator = __webpack_require__("./node_modules/babel-runtime/core-js/get-iterator.js")["default"];
	
	exports.__esModule = true;
	
	exports["default"] = function (_ref2) {
	  var t = _ref2.types;
	
	  var FLOW_DIRECTIVE = "@flow";
	
	  return {
	    inherits: __webpack_require__("./node_modules/babel-plugin-syntax-flow/lib/index.js"),
	
	    visitor: {
	      Program: function Program(path, _ref3) {
	        var comments = _ref3.file.ast.comments;
	
	        for (var _iterator = (comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;
	
	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }
	
	          var comment = _ref;
	
	          if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
	            // remove flow directive
	            comment.value = comment.value.replace(FLOW_DIRECTIVE, "");
	
	            // remove the comment completely if it only consists of whitespace and/or stars
	            if (!comment.value.replace(/\*/g, "").trim()) comment.ignore = true;
	          }
	        }
	      },
	
	      Flow: function Flow(path) {
	        path.remove();
	      },
	
	      ClassProperty: function ClassProperty(path) {
	        path.node.typeAnnotation = null;
	        if (!path.node.value) path.remove();
	      },
	
	      Class: function Class(_ref4) {
	        var node = _ref4.node;
	
	        node["implements"] = null;
	      },
	
	      Function: function Function(_ref5) {
	        var node = _ref5.node;
	
	        for (var i = 0; i < node.params.length; i++) {
	          var param = node.params[i];
	          param.optional = false;
	        }
	      },
	
	      TypeCastExpression: function TypeCastExpression(path) {
	        var node = path.node;
	
	        do {
	          node = node.expression;
	        } while (t.isTypeCastExpression(node));
	        path.replaceWith(node);
	      }
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-syntax-flow/lib/index.js":
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("flow");
	    }
	  };
	};
	
	module.exports = exports["default"];

/***/ },

/***/ "./node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-types/lib/constants.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Symbol$for = __webpack_require__("./node_modules/babel-runtime/core-js/symbol/for.js")["default"];
	
	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
	
	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];
	
	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);
	
	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);
	
	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};
	
	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
	var NOT_LOCAL_BINDING = _Symbol$for("should not be considered a local binding");
	exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

/***/ }

});